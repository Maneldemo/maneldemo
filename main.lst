Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2015.03.07 - 18:48:04]

main.asm
Errors: 0

       1   00:0000                      ;----------------------------------------------------------------------------
       2   00:0000                      ;----------------------------------------------------------------------------
       3   00:0000                      
       4   00:0000                              output "maneldem.rom"
       5   00:0000                      
       6   00:0000                      		defpage	0,0x4000, 0x4000		; page 0 main code + far call routines
       7   00:0000                      		defpage	1,0x8000, 0x4000		; swapped data 
       8   00:0000                      		defpage	2..15
       9   00:0000                      	
      10   00:0000  (00:6000)           _bank1	equ	0x6000
      11   00:0000  (00:7000)           _bank2	equ	0x7000
      12   00:0000                      		
      13   00:0000  (00)                		page 0
      14   00:4000                      		
      15   00:4000                              org 4000h
      16   00:4000                              dw  4241h,START,0,0,0,0,0,0
      16   00:4000  41 42 23 42 00 00 00 00 00 00 00 00 00 00 00 00 
      17   00:4010                      
      18   00:4010                      
      19   00:4010                      		include "header.asm"
       1.  00:4010  (00:065F)           n_tiles: equ 1631
       2.  00:4010  (00:0100)           mapWidth:	equ	256
       3.  00:4010  (00:0020)           mapHeight:	equ	 32
       4.  00:4010  (00:001C)           WinWidth:	equ	 28
       5.  00:4010  (00:0010)           WinHeight:	equ	 16
       6.  00:4010  (00:03C1)           Transp:	equ	961
       7.  00:4010  (00:0000)           SolidTile0	equ	  0
       8.  00:4010  (00:0018)           SolidTile1	equ	 24
       9.  00:4010  (00:03E6)           SolidTile2	equ	998
      10.  00:4010  (00:04ED)           SolidTile3	equ	1261
      11.  00:4010  (00:05CD)           SolidTile4	equ	1485
      12.  00:4010  (00:0000)           SolidColor0	equ	  0
      13.  00:4010  (00:0001)           SolidColor1	equ	  1
      14.  00:4010  (00:0004)           SolidColor2	equ	  4
      15.  00:4010  (00:0007)           SolidColor3	equ	  7
      16.  00:4010  (00:0008)           SolidColor4	equ	  8
      17.  00:4010  (00:0005)           NSolidColors	equ	  5
      20   00:4010                      	
      21   00:4010                      		include "rominit64.asm"
       1.  00:4010                      
       2.  00:4010                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       3.  00:4010                      ; set pages and subslot
       4.  00:4010                      ;
       5.  00:4010                      
       6.  00:4010                      
       7.  00:4010  (00:0024)           ENASLT:			equ		024h
       8.  00:4010  (00:0138)           RSLREG:			equ		0138h
       9.  00:4010  (00:FCC1)           EXPTBL:			equ		0FCC1h	; Bios Slot / Expansion Slot
      10.  00:4010                      
      11.  00:4010                      
      12.  00:4010                      ; ----------------------------
      13.  00:4010                      ; pre-set main slot for page 3
      14.  00:4010                      ; and set sub-slot for page 3
      15.  00:4010                      ; ----------------------------
      16.  00:4010                      	macro	mainslot_setup n
      17.  00:4010                    < 	and		3
      18.  00:4010                    < [2]	rrca
      19.  00:4010                    < 	and		0xC0
      20.  00:4010                    < 	ld		c,a
      21.  00:4010                    < 	ld		a,d
      22.  00:4010                    < 	and		0x3F
      23.  00:4010                    < 	or		c
      24.  00:4010                    < 	ld		c,a					; Primary slot value with main slot in page 3
      25.  00:4010                    < 
      26.  00:4010                    < 	ld		a,b
      27.  00:4010                    < 	and		0x0C
      28.  00:4010                    < [2]	rrca
      29.  00:4010                    < 	and		3
      30.  00:4010                    < 	ld		b,a					; B = Expanded slot in page 3
      31.  00:4010                    < 	ld		a,c
      32.  00:4010                    < 	out		(0A8h),a			; Slot : Main Slot, xx, xx, Main slot
      33.  00:4010                    < 	ld		a,(0FFFFh)
      34.  00:4010                    < 	cpl
      35.  00:4010                    < 	if (n<=4)
      36.  00:4010                    < [n]	RLCA
      37.  00:4010                    < 	else
      38.  00:4010                    < [8-n] RRCA	
      39.  00:4010                    < 	endif
      40.  00:4010                    < 	and		0xFC
      41.  00:4010                    < 	or		b
      42.  00:4010                    < 	if (n<=4)
      43.  00:4010                    < [n]	RRCA
      44.  00:4010                    < 	else
      45.  00:4010                    < [8-n] RLCA
      46.  00:4010                    < 	endif
      47.  00:4010                    < 	ld		(0FFFFh),a		; Expanded slot selected
      48.  00:4010                    < 	ld		b,a				; save for later	
      49.  00:4010                    < 	endmacro
      50.  00:4010                      		
      51.  00:4010                      
      52.  00:4010                      ; ------------------------------
      53.  00:4010                      ; SEARCH_SLOT
      54.  00:4010                      ; look for the slot of our rom
      55.  00:4010                      ; active in page 1
      56.  00:4010                      ; ------------------------------
      57.  00:4010                      
      58.  00:4010                      search_slot:
      59.  00:4010  CD 38 01            	call	RSLREG
      60.  00:4013  0F 0F               [2]	rrca
      61.  00:4015  E6 03               	and		3
      62.  00:4017  4F                  	ld		c,a
      63.  00:4018  06 00               	ld		b,0
      64.  00:401A  21 C1 FC            	ld		hl,EXPTBL
      65.  00:401D  09                  	add		hl,bc
      66.  00:401E  7E                  	ld		a,(hl)
      67.  00:401F  E6 80               	and		080h
      68.  00:4021  B1                  	or		c
      69.  00:4022  4F                  	ld		c,a
      70.  00:4023  23 23 23 23         [4]	inc		hl
      71.  00:4027  7E                  	ld		a,(hl)
      72.  00:4028  E6 0C               	and		0Ch
      73.  00:402A  B1                  	or		c
      74.  00:402B  32 00 C0            	ld		(slotvar),a
      75.  00:402E  C9                  	ret
      76.  00:402F                      	
      77.  00:402F                      ; ------------------------------
      78.  00:402F                      ; look for the slot of ram
      79.  00:402F                      ; active in page 3
      80.  00:402F                      ; ------------------------------
      81.  00:402F                      
      82.  00:402F                      search_slotram:
      83.  00:402F  F3                  	di
      84.  00:4030  CD 38 01            	call	RSLREG
      85.  00:4033  07 07               [2]	rlca
      86.  00:4035  E6 03               	and		3
      87.  00:4037  4F                  	ld		c,a
      88.  00:4038  06 00               	ld		b,0
      89.  00:403A  21 C1 FC            	ld		hl,EXPTBL
      90.  00:403D  09                  	add		hl,bc
      91.  00:403E  7E                  	ld		a,(hl)
      92.  00:403F  E6 80               	and		080h
      93.  00:4041  28 0D               	jr		z,search_slotram0
      94.  00:4043  B1                  	or		c
      95.  00:4044  4F                  	ld		c,a
      96.  00:4045  23 23 23 23         [4]	inc		hl
      97.  00:4049  7E                  	ld		a,(hl)
      98.  00:404A  07 07 07 07         [4]	rlca
      99.  00:404E  E6 0C               	and		0Ch
     100.  00:4050                      search_slotram0:
     101.  00:4050  B1                  	or		c
     102.  00:4051  32 01 C0            	ld		(slotram),a
     103.  00:4054  C9                  	ret
     104.  00:4055                      	
     105.  00:4055                      ; ------------------------------
     106.  00:4055                      ; SETROMPAGE0
     107.  00:4055                      ; Set the chart in
     108.  00:4055                      ; Page 0
     109.  00:4055                      ; -----------------------------
     110.  00:4055                      
     111.  00:4055                      setrompage0:
     112.  00:4055  3A 00 C0            	ld		a,(slotvar)
     113.  00:4058  C3 76 40            	jp		setslotpage0
     114.  00:405B                      
     115.  00:405B                      setrompage2:
     116.  00:405B  3A 00 C0            	ld		a,(slotvar)
     117.  00:405E  C3 EC 40            	jp		setslotpage2
     118.  00:4061                      
     119.  00:4061                      setrampage2:
     120.  00:4061  3A 01 C0            	ld		a,(slotram)
     121.  00:4064  C3 EC 40            	jp		setslotpage2
     122.  00:4067                      	
     123.  00:4067                      setrompage3:
     124.  00:4067  3A 00 C0            	ld		a,(slotvar)
     125.  00:406A  C3 33 41            	jp		setslotpage3
     126.  00:406D                      
     127.  00:406D                      setrampage3:
     128.  00:406D  3A 01 C0            	ld		a,(slotram)
     129.  00:4070  C3 33 41            	jp		setslotpage3
     130.  00:4073                      	
     131.  00:4073                      ; ------------------------------
     132.  00:4073                      ; RECBIOS
     133.  00:4073                      ; set the bios ROM
     134.  00:4073                      ; -------------------------------
     135.  00:4073                      recbios:
     136.  00:4073  3A C1 FC            	ld		a,(EXPTBL)
     137.  00:4076                      
     138.  00:4076                      ; ---------------------------
     139.  00:4076                      ; SETSLOTPAGE0
     140.  00:4076                      ; Set the slot passed in A
     141.  00:4076                      ; at page 0 in the Z80 address space
     142.  00:4076                      ; A: Format FxxxSSPP
     143.  00:4076                      ; ----------------------------
     144.  00:4076                      
     145.  00:4076                      setslotpage0:
     146.  00:4076  F3                  	di
     147.  00:4077  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     148.  00:4078  DB A8               	in		a,(0A8h)
     149.  00:407A  E6 FC               	and		0xFC
     150.  00:407C  57                  	ld		d,a					; D = Primary slot value
     151.  00:407D  78                  	ld		a,b
     152.  00:407E  E6 03               	and		3
     153.  00:4080  B2                  	or		d
     154.  00:4081  57                  	ld		d,a		; D = Final Value for primary slot
     155.  00:4082  78                  	ld		a,b		; Check if expanded
     156.  00:4083  CB 7F               	bit		7,a
     157.  00:4085  28 22               	jr		z,1f	; Not Expanded
     158.  00:4087                      	mainslot_setup	0
     158.  00:4087  E6 03             >  and  3
     158.  00:4089  0F 0F             > [2] rrca
     158.  00:408B  E6 C0             >  and  0xC0
     158.  00:408D  4F                >  ld  c,a
     158.  00:408E  7A                >  ld  a,d
     158.  00:408F  E6 3F             >  and  0x3F
     158.  00:4091  B1                >  or  c
     158.  00:4092  4F                >  ld  c,a
     158.  00:4093                    > 
     158.  00:4093  78                >  ld  a,b
     158.  00:4094  E6 0C             >  and  0x0C
     158.  00:4096  0F 0F             > [2] rrca
     158.  00:4098  E6 03             >  and  3
     158.  00:409A  47                >  ld  b,a
     158.  00:409B  79                >  ld  a,c
     158.  00:409C  D3 A8             >  out  (0A8h),a
     158.  00:409E  3A FF FF          >  ld  a,(0FFFFh)
     158.  00:40A1  2F                >  cpl
     158.  00:40A2                    >  if (n<=4)
     158.  00:40A2                    > [n] RLCA
     158.  00:40A2                    >  else
     158.  00:40A2                    ~ [8-n] RRCA
     158.  00:40A2                    ~  endif
     158.  00:40A2  E6 FC             >  and  0xFC
     158.  00:40A4  B0                >  or  b
     158.  00:40A5                    >  if (n<=4)
     158.  00:40A5                    > [n] RRCA
     158.  00:40A5                    >  else
     158.  00:40A5                    ~ [8-n] RLCA
     158.  00:40A5                    ~  endif
     158.  00:40A5  32 FF FF          >  ld  (0FFFFh),a
     158.  00:40A8  47                >  ld  b,a
     159.  00:40A9  7A                  1:	ld		a,d				; A = Final value
     160.  00:40AA  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     161.  00:40AC  C9                  	ret
     162.  00:40AD                      
     163.  00:40AD                      ; ---------------------------
     164.  00:40AD                      ; SETSLOTPAGE1
     165.  00:40AD                      ; Set the slot passed in A
     166.  00:40AD                      ; at page 1 in the Z80 address space
     167.  00:40AD                      ; A: Format FxxxSSPP
     168.  00:40AD                      ; ----------------------------
     169.  00:40AD                      
     170.  00:40AD                      setslotpage1:
     171.  00:40AD  F3                  	di
     172.  00:40AE  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     173.  00:40AF  DB A8               	in		a,(0A8h)
     174.  00:40B1  0F 0F               [2]	RRCA
     175.  00:40B3  E6 FC               	and		0xFC
     176.  00:40B5  57                  	ld		d,a					; D = Primary slot value
     177.  00:40B6  78                  	ld		a,b
     178.  00:40B7  E6 03               	and		3
     179.  00:40B9  B2                  	or		d
     180.  00:40BA  07 07               [2]	RLCA
     181.  00:40BC  57                  	ld		d,a		; D = Final Value for primary slot
     182.  00:40BD  78                  	ld		a,b		; Check if expanded
     183.  00:40BE  CB 7F               	bit		7,a
     184.  00:40C0  28 26               	jr		z,1f	; Not Expanded
     185.  00:40C2                      	mainslot_setup	6
     185.  00:40C2  E6 03             >  and  3
     185.  00:40C4  0F 0F             > [2] rrca
     185.  00:40C6  E6 C0             >  and  0xC0
     185.  00:40C8  4F                >  ld  c,a
     185.  00:40C9  7A                >  ld  a,d
     185.  00:40CA  E6 3F             >  and  0x3F
     185.  00:40CC  B1                >  or  c
     185.  00:40CD  4F                >  ld  c,a
     185.  00:40CE                    > 
     185.  00:40CE  78                >  ld  a,b
     185.  00:40CF  E6 0C             >  and  0x0C
     185.  00:40D1  0F 0F             > [2] rrca
     185.  00:40D3  E6 03             >  and  3
     185.  00:40D5  47                >  ld  b,a
     185.  00:40D6  79                >  ld  a,c
     185.  00:40D7  D3 A8             >  out  (0A8h),a
     185.  00:40D9  3A FF FF          >  ld  a,(0FFFFh)
     185.  00:40DC  2F                >  cpl
     185.  00:40DD                    >  if (n<=4)
     185.  00:40DD                    ~ [n] RLCA
     185.  00:40DD                    ~  else
     185.  00:40DD  0F 0F             > [8-n] RRCA
     185.  00:40DF                    >  endif
     185.  00:40DF  E6 FC             >  and  0xFC
     185.  00:40E1  B0                >  or  b
     185.  00:40E2                    >  if (n<=4)
     185.  00:40E2                    ~ [n] RRCA
     185.  00:40E2                    ~  else
     185.  00:40E2  07 07             > [8-n] RLCA
     185.  00:40E4                    >  endif
     185.  00:40E4  32 FF FF          >  ld  (0FFFFh),a
     185.  00:40E7  47                >  ld  b,a
     186.  00:40E8  7A                  1:	ld		a,d				; A = Final value
     187.  00:40E9  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     188.  00:40EB  C9                  	ret
     189.  00:40EC                      	
     190.  00:40EC                      
     191.  00:40EC                      ; ---------------------------
     192.  00:40EC                      ; SETSLOTPAGE2
     193.  00:40EC                      ; Set the slot passed in A
     194.  00:40EC                      ; at page 2 in the Z80 address space
     195.  00:40EC                      ; A: Format FxxxSSPP
     196.  00:40EC                      ; ----------------------------
     197.  00:40EC                      
     198.  00:40EC                      setslotpage2:
     199.  00:40EC  F3                  	di
     200.  00:40ED  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     201.  00:40EE  DB A8               	in		a,(0A8h)
     202.  00:40F0  07 07 07 07         [4]	RLCA
     203.  00:40F4  E6 FC               	and		0xFC
     204.  00:40F6  57                  	ld		d,a					; D = Primary slot value
     205.  00:40F7  78                  	ld		a,b
     206.  00:40F8  E6 03               	and		3
     207.  00:40FA  B2                  	or		d
     208.  00:40FB  0F 0F 0F 0F         [4]	RRCA
     209.  00:40FF  57                  	ld		d,a		; D = Final Value for primary slot
     210.  00:4100  78                  	ld		a,b		; Check if expanded
     211.  00:4101  CB 7F               	bit		7,a
     212.  00:4103  28 2A               	jr		z,1f	; Not Expanded
     213.  00:4105                      	mainslot_setup	4
     213.  00:4105  E6 03             >  and  3
     213.  00:4107  0F 0F             > [2] rrca
     213.  00:4109  E6 C0             >  and  0xC0
     213.  00:410B  4F                >  ld  c,a
     213.  00:410C  7A                >  ld  a,d
     213.  00:410D  E6 3F             >  and  0x3F
     213.  00:410F  B1                >  or  c
     213.  00:4110  4F                >  ld  c,a
     213.  00:4111                    > 
     213.  00:4111  78                >  ld  a,b
     213.  00:4112  E6 0C             >  and  0x0C
     213.  00:4114  0F 0F             > [2] rrca
     213.  00:4116  E6 03             >  and  3
     213.  00:4118  47                >  ld  b,a
     213.  00:4119  79                >  ld  a,c
     213.  00:411A  D3 A8             >  out  (0A8h),a
     213.  00:411C  3A FF FF          >  ld  a,(0FFFFh)
     213.  00:411F  2F                >  cpl
     213.  00:4120                    >  if (n<=4)
     213.  00:4120  07 07 07 07       > [n] RLCA
     213.  00:4124                    >  else
     213.  00:4124                    ~ [8-n] RRCA
     213.  00:4124                    ~  endif
     213.  00:4124  E6 FC             >  and  0xFC
     213.  00:4126  B0                >  or  b
     213.  00:4127                    >  if (n<=4)
     213.  00:4127  0F 0F 0F 0F       > [n] RRCA
     213.  00:412B                    >  else
     213.  00:412B                    ~ [8-n] RLCA
     213.  00:412B                    ~  endif
     213.  00:412B  32 FF FF          >  ld  (0FFFFh),a
     213.  00:412E  47                >  ld  b,a
     214.  00:412F  7A                  1:	ld		a,d				; A = Final value
     215.  00:4130  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     216.  00:4132  C9                  	ret
     217.  00:4133                      	
     218.  00:4133                      ; ---------------------------
     219.  00:4133                      ; SETSLOTPAGE3
     220.  00:4133                      ; Set the slot passed in A
     221.  00:4133                      ; at page 3 in the Z80 address space
     222.  00:4133                      ; A: Format FxxxSSPP
     223.  00:4133                      ; ----------------------------
     224.  00:4133                      	
     225.  00:4133                      setslotpage3:
     226.  00:4133  F3                  	di
     227.  00:4134  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     228.  00:4135  DB A8               	in		a,(0A8h)
     229.  00:4137  07 07               [2]	RLCA
     230.  00:4139  E6 FC               	and		0xFC
     231.  00:413B  57                  	ld		d,a					; D = Primary slot value
     232.  00:413C  78                  	ld		a,b
     233.  00:413D  E6 03               	and		3
     234.  00:413F  B2                  	or		d
     235.  00:4140  0F 0F               [2]	RRCA	
     236.  00:4142  57                  	ld		d,a		; D = Final Value for primary slot
     237.  00:4143  78                  	ld		a,b		; Check if expanded
     238.  00:4144  CB 7F               	bit		7,a
     239.  00:4146  28 26               	jr		z,1f	; Not Expanded
     240.  00:4148                      	mainslot_setup	2
     240.  00:4148  E6 03             >  and  3
     240.  00:414A  0F 0F             > [2] rrca
     240.  00:414C  E6 C0             >  and  0xC0
     240.  00:414E  4F                >  ld  c,a
     240.  00:414F  7A                >  ld  a,d
     240.  00:4150  E6 3F             >  and  0x3F
     240.  00:4152  B1                >  or  c
     240.  00:4153  4F                >  ld  c,a
     240.  00:4154                    > 
     240.  00:4154  78                >  ld  a,b
     240.  00:4155  E6 0C             >  and  0x0C
     240.  00:4157  0F 0F             > [2] rrca
     240.  00:4159  E6 03             >  and  3
     240.  00:415B  47                >  ld  b,a
     240.  00:415C  79                >  ld  a,c
     240.  00:415D  D3 A8             >  out  (0A8h),a
     240.  00:415F  3A FF FF          >  ld  a,(0FFFFh)
     240.  00:4162  2F                >  cpl
     240.  00:4163                    >  if (n<=4)
     240.  00:4163  07 07             > [n] RLCA
     240.  00:4165                    >  else
     240.  00:4165                    ~ [8-n] RRCA
     240.  00:4165                    ~  endif
     240.  00:4165  E6 FC             >  and  0xFC
     240.  00:4167  B0                >  or  b
     240.  00:4168                    >  if (n<=4)
     240.  00:4168  0F 0F             > [n] RRCA
     240.  00:416A                    >  else
     240.  00:416A                    ~ [8-n] RLCA
     240.  00:416A                    ~  endif
     240.  00:416A  32 FF FF          >  ld  (0FFFFh),a
     240.  00:416D  47                >  ld  b,a
     241.  00:416E  7A                  1:	ld		a,d				; A = Final value
     242.  00:416F  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     243.  00:4171  C9                  	ret
     244.  00:4172                      
     245.  00:4172                      	
      22   00:4172                      
      23   00:4172  (00:000C)           rdslt	equ	0x000c
      24   00:4172  (00:001C)           CALSLT	equ	0x001c
      25   00:4172  (00:0180)           chgcpu	equ	0x0180	; change cpu mode
      26   00:4172  (00:FCC1)           exttbl	equ	0xfcc1	; main rom slot
      27   00:4172                      
      28   00:4172                      ; _levelmap:			#mapWidth*mapHeight*2	
      29   00:4172                      
      30   00:4172  (00:8000)           _levelmap equ	0x8000	; ram in page 1
      31   00:4172                      
      32   00:4172                      ; Switch to r800 rom mode
      33   00:4172                      	
      34   00:4172                      _set_r800:
      35   00:4172  DB AA               		in	a,(0aah)
      36   00:4174  E6 F0               		and 011110000B			; upper 4 bits contain info to preserve
      37   00:4176  F6 06               		or	6
      38   00:4178  D3 AA               		out (0aah),a
      39   00:417A  DB A9               		in	a,(0a9h)
      40   00:417C  6F                  		ld	l,a
      41   00:417D                      
      42   00:417D  3A 2D 00            		ld	a,(0x002d)
      43   00:4180  FE 03               		cp	3					; this is a TR
      44   00:4182  7D                  		ld	a,l
      45   00:4183  28 0E               		jr	z,set_turbo_tr
      46   00:4185                      								; this is anything else
      47   00:4185  E6 02               		and	0x02				; CTR
      48   00:4187  C0                  		ret	nz					; if NZ, CTR is not pressed set the turbo
      49   00:4188                      
      50   00:4188  3A 80 01            		ld	A,(chgcpu)
      51   00:418B  FE C3               		cp	0C3h
      52   00:418D  3E 81               		ld	a,81h              ; R800 ROM mode or any other turbo
      53   00:418F  CC 80 01            		call	z,chgcpu
      54   00:4192  C9                  		ret
      55   00:4193                      
      56   00:4193                      set_turbo_tr
      57   00:4193  E6 02               		and	0x02				; CTR
      58   00:4195  C8                  		ret	z					; if Z, CTR is pressed -> do not set the turbo
      59   00:4196  3E 81               		ld	a,81h              	; R800 ROM mode
      60   00:4198  C3 80 01            		jp chgcpu
      61   00:419B                      		
      62   00:419B                      	
      63   00:419B                      checkkbd:
      64   00:419B  DB AA               		in	a,(0aah)
      65   00:419D  E6 F0               		and 011110000B			; upper 4 bits contain info to preserve
      66   00:419F  B3                  		or	e
      67   00:41A0  D3 AA               		out (0aah),a
      68   00:41A2  DB A9               		in	a,(0a9h)
      69   00:41A4  6F                  		ld	l,a
      70   00:41A5  C9                  		ret
      71   00:41A6                      		
      72   00:41A6                      ;-------------------------------------		
      73   00:41A6                      		
      74   00:41A6                      		include plot_frame.asm
       1.  00:41A6                      
       2.  00:41A6                      plot_frame:
       3.  00:41A6  0E 10               		ld		c,WinHeight
       4.  00:41A8                      		
       5.  00:41A8  2E 00               		ld	l,0
       6.  00:41AA  3A 29 C0            		ld	a,(_ymappos)
       7.  00:41AD                      
       8.  00:41AD  1F 1F               [2]		rra
       9.  00:41AF  E6 3E               		and	00111110B				; ONLY IF mapWidth=256
      10.  00:41B1  67                  		ld	h,a
      11.  00:41B2                      
      12.  00:41B2  ED 5B 2A C0         		ld	de,(_xmappos)
      13.  00:41B6                      		repeat 2		; X /8 * 2
      14.  00:41B6                    < 		srl		d
      15.  00:41B6                    < 		rr		e
      16.  00:41B6                    < 		endrepeat
      16.  00:41B6  CB 3A CB 1B CB 3A CB 1B 
      17.  00:41BE  CB 83               		res		0,e
      18.  00:41C0  19                  		add		hl,de
      19.  00:41C1                      		
      20.  00:41C1  11 00 80            		ld		de,_levelmap		; byte scale
      21.  00:41C4  19                  		add		hl,de
      22.  00:41C5  EB                  		ex		de,hl				; de -> levelmap
      23.  00:41C6  21 84 00            		ld		hl,2*(2*32+2)		; hl -> screen 
      24.  00:41C9                      		
      25.  00:41C9  3A 2A C0            		ld		a,(_xmappos)
      26.  00:41CC  E6 04               		and		00000100B
      27.  00:41CE  47                  		ld		b,a
      28.  00:41CF  3A 29 C0            		ld		a,(_ymappos)
      29.  00:41D2  E6 04               		and		00000100B
      30.  00:41D4  1F                  		rra
      31.  00:41D5  80                  		add		a,b
      32.  00:41D6  DD 6F               		ld		ixl,a			; ixl -> scroll offset
      33.  00:41D8                      		
      34.  00:41D8                      		
      35.  00:41D8  06 1C               2:		ld		b,WinWidth
      36.  00:41DA  D5                  		push	de
      37.  00:41DB                      
      38.  00:41DB  D5                  3:		push	de
      39.  00:41DC  E5                  		push	hl
      40.  00:41DD                      		
      41.  00:41DD  EB                  		ex		de,hl
      42.  00:41DE  5E                  		ld		e,(hl)
      43.  00:41DF  23                  		inc		hl
      44.  00:41E0  56                  		ld		d,(hl)		; DE = meta tile
      45.  00:41E1                      		
      46.  00:41E1  EB                  		ex		de,hl
      47.  00:41E2  29 29 29            [3]		add		hl,hl
      48.  00:41E5                      		
      49.  00:41E5  DD 7D               		ld	a,ixl
      50.  00:41E7  B5                  		or	l
      51.  00:41E8  6F                  		ld	l,a
      52.  00:41E9                      		
      53.  00:41E9  11 DC 47            		ld		de,_metatable
      54.  00:41EC  19                  		add		hl,de
      55.  00:41ED                      
      56.  00:41ED  5E                  		ld		e,(hl)
      57.  00:41EE  23                  		inc		hl
      58.  00:41EF  56                  		ld		d,(hl)		; DE = tile
      59.  00:41F0                      
      60.  00:41F0  E1                  		pop		hl			; HL = screen position
      61.  00:41F1  E5                  		push	hl
      62.  00:41F2                      
      63.  00:41F2  C5                  		push	bc
      64.  00:41F3                      		
      65.  00:41F3  ED 4B 2C C0         		ld		bc,(_shadowbuff)
      66.  00:41F7  09                  		add		hl,bc		; HL = pointer to the shadow map
      67.  00:41F8                      		
      68.  00:41F8  7E                  		ld		a,(hl)		; Avoid writing the same tile
      69.  00:41F9  BB                  		cp		e
      70.  00:41FA  23                  		inc		hl
      71.  00:41FB  C2 06 42            		jp		nz,1f
      72.  00:41FE  7E                  		ld		a,(hl)
      73.  00:41FF  BA                  		cp		d
      74.  00:4200  C2 06 42            		jp		nz,1f
      75.  00:4203  C3 0F 42            		jp		4f
      76.  00:4206                      1:
      77.  00:4206  72                  		ld		(hl),d		; rewrite the position with the actual tile in shadowbuffer
      78.  00:4207  2B                  		dec		hl
      79.  00:4208  73                  		ld		(hl),e
      80.  00:4209  A7                  		and		a
      81.  00:420A  ED 42               		sbc		hl,bc		; HL relative position in 32x24*2
      82.  00:420C                      							; DE new 16 tile to be plotted
      83.  00:420C  CD DE 45            		call	plot_tile
      84.  00:420F                      4:		
      85.  00:420F  C1                  		pop		bc
      86.  00:4210  E1                  		pop		hl
      87.  00:4211  D1                  		pop		de
      88.  00:4212                      		
      89.  00:4212  23 23               [2]		inc		hl			; the screen in WinWidthxWinHeight of uints
      90.  00:4214                      		
      91.  00:4214  13 13               [2]		inc		de			; the levelmap is uint
      92.  00:4216  10 C3               		djnz	3b
      93.  00:4218                      		
      94.  00:4218                      		if (WinWidth<32)
      95.  00:4218  11 08 00            			ld	de,2*(32-WinWidth)	; only if WinWidth<32
      96.  00:421B  19                  			add	hl,de
      97.  00:421C                      		endif
      98.  00:421C                      		
      99.  00:421C  D1                  		pop		de
     100.  00:421D                      		
     101.  00:421D  14 14               [2]		inc d				; only if mapWidth=256
     102.  00:421F                      		
     103.  00:421F  0D                  		dec		c
     104.  00:4220  20 B6               		jr	nz,2b
     105.  00:4222  C9                  		ret
      75   00:4223                      		
      76   00:4223                      ;-------------------------------------
      77   00:4223                      ; Entry point
      78   00:4223                      ;-------------------------------------
      79   00:4223                      START:
      80   00:4223  1E 05                       ld		e,5
      81   00:4225  CD 1F 47            		call	_scr
      82   00:4228                      
      83   00:4228  CD 72 41            		call 	_set_r800
      84   00:422B  CD 52 44                    call    powerup
      85   00:422E                      
      86   00:422E  1E 06               		ld e,6
      87   00:4230  CD 9B 41            		call	checkkbd
      88   00:4233  3E 01               		ld	a,1
      89   00:4235  CB 0D               		rrc	l				; shift
      90   00:4237  D2 3B 42            		jp	nc,_ntsc
      91   00:423A  AF                  		xor	a
      92   00:423B  32 02 C0            _ntsc:	ld	(SEL_NTSC),a	; if set NSTC, if reset PAL
      93   00:423E                      		
      94   00:423E                      		; ld	e,7
      95   00:423E                      		; call	checkkbd
      96   00:423E                      		; and	0x04				; ESC
      97   00:423E                      		; jp 	z,_mballon_start
      98   00:423E                      		
      99   00:423E  11 00 00            		ld		de,0
     100   00:4241  4B                  		ld		c,e
     101   00:4242  F3                  		di
     102   00:4243  CD DA 46            		call	_vdpsetvramwr
     103   00:4246  01 00 00            		ld		bc,0x0000
     104   00:4249  AF                  1:		xor		a
     105   00:424A  D3 98               		out		(0x98),a
     106   00:424C  0B                  		dec		bc
     107   00:424D  78                  		ld		a,b
     108   00:424E  B1                  		or		c
     109   00:424F  20 F8               		jr	nz,1b
     110   00:4251                      		
     111   00:4251  F3                  		di
     112   00:4252                      		// sprites 16x16
     113   00:4252  3A E0 F3            		ld	a,(0xF3E0)
     114   00:4255  F6 02               		or	2
     115   00:4257  32 E0 F3            		ld	(0xF3E0),a
     116   00:425A  D3 99               		out		(0x99),a
     117   00:425C  3E 81               		ld		a,128+1
     118   00:425E  D3 99               		out		(0x99),a
     119   00:4260                      
     120   00:4260                      		// border color
     121   00:4260  3E 55               		ld		a,0x55
     122   00:4262  D3 99               		out		(0x99),a
     123   00:4264  3E 87               		ld		a,128+7
     124   00:4266  D3 99               		out		(0x99),a
     125   00:4268                      		
     126   00:4268                      		// enable sprites + TP
     127   00:4268  3A E7 FF            		ld		a,(0xFFE7)
     128   00:426B  F6 20               		or		32
     129   00:426D  32 E7 FF            		ld		(0xFFE7),a
     130   00:4270  D3 99               		out		(0x99),a
     131   00:4272  3E 88               		ld		a,128+8
     132   00:4274  D3 99               		out		(0x99),a
     133   00:4276                      		
     134   00:4276                      		// Set 192 lines @50Hz (PAL assumed!)
     135   00:4276  3A 02 C0            		ld	a,(SEL_NTSC)
     136   00:4279  A7                  		and 	a
     137   00:427A  20 0C               		jr		nz,1f
     138   00:427C                      		
     139   00:427C  3A E8 FF            		ld		a,(0xFFE8)		; PAL
     140   00:427F  E6 7F               		and		01111111B
     141   00:4281  F6 02               		or		2
     142   00:4283  32 E8 FF            		ld		(0xFFE8),a
     143   00:4286  18 08               		jr	2f
     144   00:4288  3A E8 FF            1:		ld		a,(0xFFE8)		; NTSC
     145   00:428B  E6 7D               		and		01111101B
     146   00:428D  32 E8 FF            		ld		(0xFFE8),a
     147   00:4290                      2:	
     148   00:4290  D3 99               		out		(0x99),a
     149   00:4292  3E 89               		ld		a,128+9
     150   00:4294  D3 99               		out		(0x99),a
     151   00:4296  FB                  		ei
     152   00:4297                      
     153   00:4297  CD 33 5F            		call _hw_sprite_init
     154   00:429A                      		
     155   00:429A  3E C3               		LD	A,0xC3
     156   00:429C  21 22 44            		LD	HL,_isr
     157   00:429F  F3                  		DI
     158   00:42A0  32 9F FD            		LD	(0xFD9F),A
     159   00:42A3  22 A0 FD            		LD	(0xFDA0),HL
     160   00:42A6  FB                  		EI
     161   00:42A7                      
     162   00:42A7  CD CC 46            		call	_clean_buffs
     163   00:42AA                      
     164   00:42AA  CD D3 44            		call	_SetPalet
     165   00:42AD  1E 00               		ld		e,0
     166   00:42AF  CD 0E 47                    call	_setpage
     167   00:42B2                      		
     168   00:42B2                      		; unpack level map (bit field for collisions)
     169   00:42B2  3E 04               		ld	a, :_level_bf
     170   00:42B4  32 00 70            		ld	(_bank2),a
     171   00:42B7                      		
     172   00:42B7  01 00 10            		ld	bc,mapWidth*mapHeight/2
     173   00:42BA  21 2C 8A            		ld	hl,	_level_bf
     174   00:42BD  11 2F CC            		ld	de,	_cur_level_bf
     175   00:42C0  ED B0               		ldir
     176   00:42C2                      
     177   00:42C2                      		; unpack level map (meta_tiles)
     178   00:42C2  3E 04               		ld	a, :_level
     179   00:42C4  32 00 70            		ld	(_bank2),a
     180   00:42C7                      		
     181   00:42C7  AF                  		xor	a
     182   00:42C8  32 27 C0            		ld		(_vbit16 ),a
     183   00:42CB  11 00 80            		ld		de,	_level
     184   00:42CE  01 00 00            		ld		bc,0
     185   00:42D1  CD E5 44            		call	_vuitpakker 
     186   00:42D4                      		
     187   00:42D4  CD 61 40            		call	setrampage2
     188   00:42D7                      		
     189   00:42D7  11 00 00            		ld		de,0
     190   00:42DA  4B                  		ld		c,e
     191   00:42DB  CD F4 46            		call	_vdpsetvramrd
     192   00:42DE  21 00 80            		ld		hl,_levelmap
     193   00:42E1  11 00 40            		ld		de,mapWidth*mapHeight*2
     194   00:42E4  0E 98               		ld		c,0x98
     195   00:42E6  ED A2               1:		ini
     196   00:42E8  1B                  		dec	de
     197   00:42E9  7A                  		ld	a,d
     198   00:42EA  B3                  		or	e
     199   00:42EB  20 F9               		jr	nz,1b
     200   00:42ED                      
     201   00:42ED  CD 5B 40            		call	setrompage2
     202   00:42F0                      				
     203   00:42F0                      		; unpack frame
     204   00:42F0  3E 01               		ld		a, :_frame
     205   00:42F2  32 00 70            		ld		(_bank2),a
     206   00:42F5                      		
     207   00:42F5  AF                  		xor	a
     208   00:42F6  32 27 C0            		ld		(_vbit16 ),a
     209   00:42F9  11 00 80            		ld		de,	_frame
     210   00:42FC  01 00 00            		ld		bc,0
     211   00:42FF  CD E5 44            		call	_vuitpakker 
     212   00:4302                      
     213   00:4302  1E 01               		ld		e,1
     214   00:4304  CD 0E 47                    call	_setpage
     215   00:4307                      
     216   00:4307  11 00 80            		ld		de,	_frame
     217   00:430A  01 00 80            		ld		bc,0x8000
     218   00:430D  CD E5 44            		call	_vuitpakker 
     219   00:4310                      		
     220   00:4310                      		; unpack mc frames
     221   00:4310  3E 01               		ld		a, :_mc_sprites
     222   00:4312  32 00 70            		ld		(_bank2),a
     223   00:4315                      		
     224   00:4315  AF                  		xor	a
     225   00:4316  32 27 C0            		ld		(_vbit16 ),a
     226   00:4319  11 51 89            		ld		de,	_mc_sprites
     227   00:431C  01 00 E0            		ld		bc,192*128+256*128
     228   00:431F  CD E5 44            		call	_vuitpakker 
     229   00:4322                      				
     230   00:4322  1E 02               		ld		e,2
     231   00:4324  CD 0E 47                    call	_setpage
     232   00:4327                      
     233   00:4327                      		; unpack tileset
     234   00:4327  3E 02               		ld		a, :_tiles0
     235   00:4329  32 00 70            		ld		(_bank2),a
     236   00:432C                      		
     237   00:432C  3E 01               		ld		a,1
     238   00:432E  32 27 C0            		ld		(_vbit16 ),a
     239   00:4331  11 00 80            		ld		de,	_tiles0
     240   00:4334  01 00 00            		ld		bc,0
     241   00:4337  CD E5 44            		call	_vuitpakker 
     242   00:433A                      		
     243   00:433A  1E 03               		ld		e,3
     244   00:433C  CD 0E 47                    call	_setpage
     245   00:433F                      		
     246   00:433F  3E 03               		ld		a, :_tiles1
     247   00:4341  32 00 70            		ld		(_bank2),a
     248   00:4344                      		
     249   00:4344  3E 01               		ld		a,1
     250   00:4346  32 27 C0            		ld		(_vbit16 ),a
     251   00:4349  11 00 80            		ld		de,	_tiles1
     252   00:434C  01 00 80            		ld		bc,0x8000
     253   00:434F  CD E5 44            		call	_vuitpakker 
     254   00:4352                      		
     255   00:4352                      		; call	int_sprites
     256   00:4352                      
     257   00:4352                      		; main init
     258   00:4352                      		
     259   00:4352  CD 61 40            		call	setrampage2
     260   00:4355  FB                  		ei
     261   00:4356                      		
     262   00:4356  21 00 00            		ld		hl,0
     263   00:4359  7C                  		ld		a,h
     264   00:435A  32 29 C0            		ld		(_ymappos),a
     265   00:435D  22 2A C0            		ld		(_xmappos),hl
     266   00:4360                      		
     267   00:4360  22 25 C0            		ld		(_nframes),hl
     268   00:4363  32 2E C0            		ld		(_currentpage),a
     269   00:4366  32 04 C0            		ld		(_mcdx),a
     270   00:4369  32 0E C0            		ld		(_mcframe),a
     271   00:436C                      main_loop:
     272   00:436C  AF                  		xor		a
     273   00:436D  32 12 C0            		ld		(_ticxframe),a
     274   00:4370                      
     275   00:4370  3A 2E C0            		ld		a,(_currentpage)
     276   00:4373  EE 01               		xor		1
     277   00:4375  32 2E C0            		ld		(_currentpage),a
     278   00:4378  EE 01               		xor		1
     279   00:437A  5F                  		ld		e,a
     280   00:437B  76                  		halt
     281   00:437C  CD 0E 47                    call	_setpage
     282   00:437F  CB 43               		bit		0,e
     283   00:4381  21 2F C6            		ld		hl,_shadow1
     284   00:4384  20 03               		jr		nz,1f
     285   00:4386  21 2F C0            		ld		hl,_shadow0
     286   00:4389  22 2C C0            1:		ld		(_shadowbuff),hl
     287   00:438C                      
     288   00:438C                      		; ld	ix,enemylist
     289   00:438C                      		; call save_background
     290   00:438C                      
     291   00:438C                      		; ld	ix,enemylist
     292   00:438C                      		; call plot_sprite
     293   00:438C                      
     294   00:438C  CD A6 41            		call	plot_frame
     295   00:438F                      		
     296   00:438F  CD AC 5F            		call	enemies_LMMM
     297   00:4392                      
     298   00:4392                      		; ld	ix,enemylist
     299   00:4392                      		; call restore_background
     300   00:4392                      
     301   00:4392                      		; ld	ix,enemylist
     302   00:4392                      		; call	move_sprites
     303   00:4392                      		
     304   00:4392  CD AE 47            		call	_compute_fps
     305   00:4395  CD 8C 47            		call	_print_fps
     306   00:4398  CD 50 60            		call	probe_level
     307   00:439B  CD 3C 47            		call	_print_probe
     308   00:439E                      		
     309   00:439E  2A 25 C0            		ld		hl,(_nframes)
     310   00:43A1  23                  		inc		hl
     311   00:43A2  22 25 C0            		ld		(_nframes),hl
     312   00:43A5                      		
     313   00:43A5  CD 5B 44            		call	_cursors
     314   00:43A8                      
     315   00:43A8  DD CB 00 46         		bit		0,(ix)
     316   00:43AC  CC CD 43            		call	z,up
     317   00:43AF  DD CB 00 5E         		bit		3,(ix)
     318   00:43B3  CC F1 43            		call	z,right
     319   00:43B6  DD CB 00 4E         		bit		1,(ix)
     320   00:43BA  CC E0 43            		call	z,dwn
     321   00:43BD  DD CB 00 56         		bit		2,(ix)
     322   00:43C1  CC 09 44            		call	z,left
     323   00:43C4                      		
     324   00:43C4  3E FF               		ld		a,-1
     325   00:43C6  32 0E C0            		ld		(_mcframe),a
     326   00:43C9  C3 6C 43            		jp      main_loop
     327   00:43CC                      
     328   00:43CC  C9                          ret
     329   00:43CD                      
     330   00:43CD                      up:		
     331   00:43CD  3A 29 C0            		ld		a,(_ymappos)
     332   00:43D0  47                  		ld		b,a
     333   00:43D1  3A 12 C0            		ld		a,(_ticxframe)
     334   00:43D4  ED 44               		neg
     335   00:43D6  80                  		add		a,b
     336   00:43D7  32 29 C0            		ld		(_ymappos),a
     337   00:43DA  3E 02               		ld	a,2
     338   00:43DC  32 0F C0            		ld	(_mcstate),a
     339   00:43DF  C9                  		ret
     340   00:43E0                      
     341   00:43E0                      dwn:	
     342   00:43E0  3A 29 C0            		ld		a,(_ymappos)
     343   00:43E3  47                  		ld		b,a
     344   00:43E4  3A 12 C0            		ld		a,(_ticxframe)
     345   00:43E7  80                  		add		a,b
     346   00:43E8  32 29 C0            		ld		(_ymappos),a
     347   00:43EB  3E 03               		ld	a,3
     348   00:43ED  32 0F C0            		ld	(_mcstate),a
     349   00:43F0  C9                  		ret
     350   00:43F1                      		
     351   00:43F1                      right:	
     352   00:43F1  3E 04               		ld		a,4
     353   00:43F3  32 04 C0            		ld		(_mcdx),a
     354   00:43F6                      
     355   00:43F6  3E 01               		ld	a,1
     356   00:43F8  32 0F C0            		ld	(_mcstate),a
     357   00:43FB                      
     358   00:43FB  3A 12 C0            		ld		a,(_ticxframe)
     359   00:43FE  4F                  		ld		c,a
     360   00:43FF  06 00               		ld		b,0
     361   00:4401  2A 2A C0            		ld		hl,(_xmappos)
     362   00:4404  09                  		add		hl,bc
     363   00:4405  22 2A C0            		ld		(_xmappos),hl
     364   00:4408  C9                  		ret
     365   00:4409                      
     366   00:4409                      left:	
     367   00:4409  3E FC               		ld		a,-4
     368   00:440B  32 04 C0            		ld		(_mcdx),a
     369   00:440E                      
     370   00:440E  AF                  		xor	a
     371   00:440F  32 0F C0            		ld	(_mcstate),a
     372   00:4412                      		
     373   00:4412  3A 12 C0            		ld		a,(_ticxframe)
     374   00:4415  ED 44               		neg
     375   00:4417  4F                  		ld		c,a
     376   00:4418  06 FF               		ld		b,-1
     377   00:441A  2A 2A C0            		ld		hl,(_xmappos)
     378   00:441D  09                  		add		hl,bc
     379   00:441E  22 2A C0            		ld		(_xmappos),hl
     380   00:4421  C9                  		ret
     381   00:4422                      
     382   00:4422                      
     383   00:4422                      ;-------------------------------------
     384   00:4422  (00:FC9E)           JIFFY: equ 0xFC9E 
     385   00:4422                      ;-------------------------------------
     386   00:4422  E5                  _isr:	push	hl
     387   00:4423  C5                  		push	bc
     388   00:4424  2A 9E FC            		ld		hl,(JIFFY)
     389   00:4427                      
     390   00:4427  3A 02 C0            		ld	a,(SEL_NTSC)
     391   00:442A  A7                  		and 	a
     392   00:442B  20 05               		jr		nz,1f
     393   00:442D                      		
     394   00:442D  01 CE FF            		ld		bc,-50			; PAL 
     395   00:4430  18 03               		jr	2f
     396   00:4432                      1:
     397   00:4432  01 C4 FF            		ld		bc,-60			; NTSC
     398   00:4435                      		
     399   00:4435  09                  2:		add		hl,bc
     400   00:4436  21 12 C0            		ld		hl,_ticxframe
     401   00:4439  34                  		inc		(hl)
     402   00:443A                      		
     403   00:443A                      		; ld		a,4
     404   00:443A                      		; ld		(hl),a
     405   00:443A                      		
     406   00:443A  C1                  		pop		bc
     407   00:443B  E1                  		pop		hl
     408   00:443C  D0                  		ret	nc
     409   00:443D                      		
     410   00:443D  E5                  		push	hl
     411   00:443E  21 00 00            		ld		hl,0
     412   00:4441  22 9E FC            		ld		(JIFFY),hl
     413   00:4444  2A 25 C0            		ld		hl,(_nframes)
     414   00:4447  22 23 C0            		ld		(_fps),hl
     415   00:444A  21 00 00            		ld		hl,0
     416   00:444D  22 25 C0            		ld		(_nframes),hl
     417   00:4450  E1                  		pop		hl
     418   00:4451  C9                  		ret
     419   00:4452                      ;-------------------------------------
     420   00:4452                      ;   Power-up routine for 32K ROM
     421   00:4452                      ;   set pages and sub slot
     422   00:4452                      ;-------------------------------------
     423   00:4452                      powerup:
     424   00:4452  CD 10 40                    call    search_slot
     425   00:4455  CD 2F 40                    call    search_slotram
     426   00:4458  C3 5B 40            		jp		setrompage2
     427   00:445B                              
     428   00:445B                      
     429   00:445B                      ;-------------------------------------
     430   00:445B                      
     431   00:445B                      
     432   00:445B  (00:00D5)           GTSTCK      equ 0x00D5      ;Returns the joystick status
     433   00:445B  (00:00D8)           GTTRIG      equ 0x00D8      ;Returns current trigger status
     434   00:445B                      
     435   00:445B                      
     436   00:445B                      _cursors:
     437   00:445B                      
     438   00:445B                      	; xor     a
     439   00:445B                      	; call	GTSTCK
     440   00:445B                      	; push	af		;return the cursors
     441   00:445B                      	; ld		a,1
     442   00:445B                      	; call	GTSTCK
     443   00:445B                      	; pop		hl		;return the joystick
     444   00:445B                      	; or		h
     445   00:445B                      	; ld		l,a
     446   00:445B                      	; ret
     447   00:445B                      	
     448   00:445B                      ; PSG I/O port A (r#14) – read-only
     449   00:445B                      ; Bit	Description	Comment
     450   00:445B                      ; 0	Input joystick pin 1	(up)
     451   00:445B                      ; 1	Input joystick pin 2	(down)
     452   00:445B                      ; 2	Input joystick pin 3	(left)
     453   00:445B                      ; 3	Input joystick pin 4	(right)
     454   00:445B                      ; 4	Input joystick pin 6	(trigger A)
     455   00:445B                      ; 5	Input joystick pin 7	(trigger B)
     456   00:445B                      ; 6	Japanese keyboard layout bit	(1=JIS, 0=ANSI)
     457   00:445B                      ; 7	Cassette input signal	
     458   00:445B                      
     459   00:445B                      .rd_joy:
     460   00:445B  3E 0F               	ld	a,#0f
     461   00:445D  D3 A0               	out	(#a0),a
     462   00:445F  3E 8F               	ld	a,0x8F
     463   00:4461  D3 A1               	out	(#a1),a		; select port A
     464   00:4463  3E 0E               	ld	a,#0e
     465   00:4465  D3 A0               	out	(#a0),a
     466   00:4467  DB A2               	in	a,(#a2)
     467   00:4469                      .rd_key:	
     468   00:4469  DD 21 03 C0         	ld	ix,joystick
     469   00:446D  DD 77 00            	ld	(ix),a
     470   00:4470                      	
     471   00:4470  1E 08               	ld  e,8
     472   00:4472  CD 9B 41                call    checkkbd
     473   00:4475  CB 47               	bit	0,a				; space
     474   00:4477  20 04               	jr	nz,1f
     475   00:4479  DD CB 00 A6         	res	4,(ix)			; (trigger A)
     476   00:447D                      1:
     477   00:447D  CB 7F               	bit	7,a				; RIGHT
     478   00:447F  20 04               	jr	nz,1f
     479   00:4481  DD CB 00 9E         	res	3,(ix)			; (right joy)
     480   00:4485                      1:
     481   00:4485  CB 77               	bit	6,a				; DOWN
     482   00:4487  20 04               	jr	nz,1f
     483   00:4489  DD CB 00 8E         	res	1,(ix)			; (down joy)
     484   00:448D                      1:
     485   00:448D  CB 6F               	bit	5,a				; UP
     486   00:448F  20 04               	jr	nz,1f
     487   00:4491  DD CB 00 86         	res	0,(ix)			; (up joy)
     488   00:4495                      1:
     489   00:4495  CB 67               	bit	4,a				; LEFT
     490   00:4497  20 04               	jr	nz,1f
     491   00:4499  DD CB 00 96         	res	2,(ix)			; (left joy)
     492   00:449D                      1:
     493   00:449D  1E 05               	ld  e,5
     494   00:449F  CD 9B 41                call    checkkbd
     495   00:44A2  CB 6F               	bit	5,a				; X
     496   00:44A4  20 04               	jr	nz,1f
     497   00:44A6  DD CB 00 AE         	res	5,(ix)			; (trigger B)
     498   00:44AA                      1:
     499   00:44AA  CB 7F               	bit	7,a				; Z
     500   00:44AC  20 04               	jr	nz,1f
     501   00:44AE  DD CB 00 A6         	res	4,(ix)			; (trigger A)
     502   00:44B2                      1:
     503   00:44B2  C9                  	ret
     504   00:44B3                      
     505   00:44B3                              
     506   00:44B3                      ;-------------------------------------
     507   00:44B3                      		
     508   00:44B3  (00:0099)           vdpport1 equ 0x99
     509   00:44B3  (00:009A)           vdpport2 equ 0x9A
     510   00:44B3                      
     511   00:44B3                      levelcolors:
     512   00:44B3  (0020)              	incbin "palette.bin"
     513   00:44D3                      
     514   00:44D3                      _SetPalet:   
     515   00:44D3  F3                  	di
     516   00:44D4  AF                  	xor a 			;Set pointer to zero.
     517   00:44D5  D3 99               	out (vdpport1),a        
     518   00:44D7  3E 90               	ld  a,16 | 010000000B
     519   00:44D9  D3 99               	out (vdpport1),a
     520   00:44DB                      
     521   00:44DB  21 B3 44            	ld  hl,levelcolors
     522   00:44DE  01 9A 20            	ld bc,vdpport2+32*256
     523   00:44E1  ED B3               	otir
     524   00:44E3  FB                  	ei
     525   00:44E4  C9                  	ret
     526   00:44E5                      
     527   00:44E5                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     528   00:44E5                      
     529   00:44E5                      	include vuitpakker.asm
       1.  00:44E5                      
       2.  00:44E5                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       3.  00:44E5                      
       4.  00:44E5                      
       5.  00:44E5                      _vuitpakker:
       6.  00:44E5  FD E5                   push iy
       7.  00:44E7  DD E5                   push ix
       8.  00:44E9                      
       9.  00:44E9  CD F1 44                call  1f
      10.  00:44EC                      
      11.  00:44EC  DD E1                   pop ix
      12.  00:44EE  FD E1                   pop iy
      13.  00:44F0  C9                      ret
      14.  00:44F1                      
      15.  00:44F1                      1:
      16.  00:44F1                      ; in de input
      17.  00:44F1                      ; in bc VRAM output
      18.  00:44F1                      
      19.  00:44F1  62                      ld h,d
      20.  00:44F2  6B                      ld l,e
      21.  00:44F3  50                      ld d,b
      22.  00:44F4  59                      ld e,c
      23.  00:44F5                      
      24.  00:44F5                      ; pletter v0.5 msx unpacker
      25.  00:44F5                      
      26.  00:44F5                      ;-----------------------------------------------------------
      27.  00:44F5                      ; Pletter 0.5b VRAM Depacker - 64Kb version
      28.  00:44F5                      ; HL = RAM/ROM source ; DE = VRAM destination
      29.  00:44F5                      ;-----------------------------------------------------------
      30.  00:44F5  F3                      di
      31.  00:44F6                      
      32.  00:44F6                      ; VRAM address setup
      33.  00:44F6                      ;    ld  a,e
      34.  00:44F6                      ;    out (0x99),a
      35.  00:44F6                      ;    ld  a,d
      36.  00:44F6                      ;    or  0x40
      37.  00:44F6                      ;    out (0x99),a
      38.  00:44F6  CD B6 45                call setVwrite
      39.  00:44F9                      
      40.  00:44F9                      ; Initialization
      41.  00:44F9  7E                      ld  a,(hl)
      42.  00:44FA  23                      inc hl
      43.  00:44FB  D9                      exx
      44.  00:44FC  11 00 00                ld  de,0
      45.  00:44FF  87                      add a,a
      46.  00:4500  3C                      inc a
      47.  00:4501  CB 13                   rl  e
      48.  00:4503  87                      add a,a
      49.  00:4504  CB 13                   rl  e
      50.  00:4506  87                      add a,a
      51.  00:4507  CB 13                   rl  e
      52.  00:4509  CB 13                   rl  e
      53.  00:450B  21 D0 45                ld  hl,__modes
      54.  00:450E  19                      add hl,de
      55.  00:450F  5E                      ld  e,(hl)
      56.  00:4510  DD                      db    0xdd
      57.  00:4511  6B                      ld  l,e         ; ld ixl,e    
      58.  00:4512  23                      inc hl
      59.  00:4513  5E                      ld  e,(hl)
      60.  00:4514  DD                      db    0xdd
      61.  00:4515  63                      ld h,e          ; ld  ixh,e
      62.  00:4516  1E 01                   ld  e,1
      63.  00:4518  D9                      exx
      64.  00:4519  FD 21 22 45             ld  iy,__loop
      65.  00:451D                      
      66.  00:451D                      ; Main depack loop
      67.  00:451D  0E 98               _literal:ld  c,098h
      68.  00:451F  ED A3                   outi
      69.  00:4521  13                      inc de
      70.  00:4522  87                  __loop:   add a,a
      71.  00:4523  CC AA 45                call    z,_getbit
      72.  00:4526  30 F5                   jr  nc,_literal
      73.  00:4528                      
      74.  00:4528                      ; Compressed data
      75.  00:4528  D9                      exx
      76.  00:4529  62                      ld  h,d
      77.  00:452A  6B                      ld  l,e
      78.  00:452B  87                  _getlen: add a,a
      79.  00:452C  CC AE 45                call    z,_getbitexx
      80.  00:452F  30 1D                   jr  nc,lenok
      81.  00:4531  87                  lus:    add a,a
      82.  00:4532  CC AE 45                call    z,_getbitexx
      83.  00:4535  ED 6A                   adc hl,hl
      84.  00:4537  D8                      ret c
      85.  00:4538  87                      add a,a
      86.  00:4539  CC AE 45                call    z,_getbitexx
      87.  00:453C  30 10                   jr  nc,lenok
      88.  00:453E  87                      add a,a
      89.  00:453F  CC AE 45                call    z,_getbitexx
      90.  00:4542  ED 6A                   adc hl,hl
      91.  00:4544  DA B4 45                jp  c,Depack_out
      92.  00:4547  87                      add a,a
      93.  00:4548  CC AE 45                call    z,_getbitexx
      94.  00:454B  DA 31 45                jp  c,lus
      95.  00:454E  23                  lenok:  inc hl
      96.  00:454F  D9                      exx
      97.  00:4550  4E                      ld  c,(hl)
      98.  00:4551  23                      inc hl
      99.  00:4552  06 00                   ld  b,0
     100.  00:4554  CB 79                   bit 7,c
     101.  00:4556  CA 89 45                jp  z,offsok
     102.  00:4559  DD E9                   jp  (ix)
     103.  00:455B                      
     104.  00:455B  87                  _mode7:  add a,a
     105.  00:455C  CC AA 45                call    z,_getbit
     106.  00:455F  CB 10                   rl  b
     107.  00:4561  87                  _mode6:  add a,a
     108.  00:4562  CC AA 45                call    z,_getbit
     109.  00:4565  CB 10                   rl  b
     110.  00:4567  87                  _mode5:  add a,a
     111.  00:4568  CC AA 45                call    z,_getbit
     112.  00:456B  CB 10                   rl  b
     113.  00:456D  87                  _mode4:  add a,a
     114.  00:456E  CC AA 45                call    z,_getbit
     115.  00:4571  CB 10                   rl  b
     116.  00:4573  87                  _mode3:  add a,a
     117.  00:4574  CC AA 45                call    z,_getbit
     118.  00:4577  CB 10                   rl  b
     119.  00:4579  87                  _mode2:  add a,a
     120.  00:457A  CC AA 45                call    z,_getbit
     121.  00:457D  CB 10                   rl  b
     122.  00:457F  87                      add a,a
     123.  00:4580  CC AA 45                call    z,_getbit
     124.  00:4583  30 04                   jr  nc,offsok
     125.  00:4585  B7                      or  a
     126.  00:4586  04                      inc b
     127.  00:4587  CB B9                   res 7,c
     128.  00:4589  03                  offsok: inc bc
     129.  00:458A  E5                      push    hl
     130.  00:458B  D9                      exx
     131.  00:458C  E5                      push    hl
     132.  00:458D  D9                      exx
     133.  00:458E  6B                      ld  l,e
     134.  00:458F  62                      ld  h,d
     135.  00:4590  ED 42                   sbc hl,bc
     136.  00:4592  C1                      pop bc
     137.  00:4593  F5                      push    af
     138.  00:4594                      _loop: 
     139.  00:4594                      ;    ld  a,l
     140.  00:4594                      ;    out (0x99),a
     141.  00:4594                      ;    ld  a,h
     142.  00:4594                      ;    out (0x99),a
     143.  00:4594  CD C2 45                call setVread
     144.  00:4597                          
     145.  00:4597  DB 98                   in  a,(0x98)
     146.  00:4599  08                      ex  af,af'
     147.  00:459A                      ;    ld  a,e
     148.  00:459A                      ;    out (0x99),a
     149.  00:459A                      ;    ld  a,d
     150.  00:459A                      ;    or  0x40
     151.  00:459A                      ;    out (0x99),a
     152.  00:459A  CD B6 45                call setVwrite
     153.  00:459D                          
     154.  00:459D  08                      ex  af,af'
     155.  00:459E  D3 98                   out (0x98),a
     156.  00:45A0  13                      inc de
     157.  00:45A1  ED A1                   cpi
     158.  00:45A3  EA 94 45                jp  pe,_loop
     159.  00:45A6  F1                      pop af
     160.  00:45A7  E1                      pop hl
     161.  00:45A8  FD E9                   jp  (iy)
     162.  00:45AA                      ;
     163.  00:45AA  7E                  _getbit: ld  a,(hl)
     164.  00:45AB  23                      inc hl
     165.  00:45AC  17                      rla
     166.  00:45AD  C9                      ret
     167.  00:45AE                      
     168.  00:45AE                      _getbitexx:
     169.  00:45AE  D9                      exx
     170.  00:45AF  7E                      ld  a,(hl)
     171.  00:45B0  23                      inc hl
     172.  00:45B1  D9                      exx
     173.  00:45B2  17                      rla
     174.  00:45B3  C9                      ret
     175.  00:45B4                      
     176.  00:45B4                      ; De-packer exit
     177.  00:45B4                      Depack_out:
     178.  00:45B4  FB                      ei
     179.  00:45B5  C9                      ret
     180.  00:45B6                      
     181.  00:45B6                      
     182.  00:45B6                      
     183.  00:45B6                      setVwrite:
     184.  00:45B6                      
     185.  00:45B6  D5                      push    de
     186.  00:45B7  C5                      push    bc
     187.  00:45B8  ED 4B 27 C0             ld      bc,(_vbit16)
     188.  00:45BC  CD DA 46                call    _vdpsetvramwr
     189.  00:45BF  C1                      pop     bc
     190.  00:45C0  D1                      pop     de
     191.  00:45C1                      
     192.  00:45C1  C9                      ret
     193.  00:45C2                      setVread:    
     194.  00:45C2                      
     195.  00:45C2  D5                      push    de
     196.  00:45C3  C5                      push    bc
     197.  00:45C4  5D                      ld      e,l
     198.  00:45C5  54                      ld      d,h
     199.  00:45C6  ED 4B 27 C0             ld      bc,(_vbit16)
     200.  00:45CA  CD F4 46                call    _vdpsetvramrd
     201.  00:45CD  C1                      pop     bc
     202.  00:45CE  D1                      pop     de
     203.  00:45CF                      
     204.  00:45CF  C9                      ret
     205.  00:45D0                      
     206.  00:45D0                      __modes:
     207.  00:45D0  89 45                   dw  offsok
     208.  00:45D2  79 45                   dw  _mode2
     209.  00:45D4  73 45                   dw  _mode3
     210.  00:45D6  6D 45                   dw  _mode4
     211.  00:45D8  67 45                   dw  _mode5
     212.  00:45DA  61 45                   dw  _mode6
     213.  00:45DC  5B 45                   dw  _mode7
     530   00:45DE                      
     531   00:45DE                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     532   00:45DE                      
     533   00:45DE                      	include plot_tile.asm
       1.  00:45DE                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       2.  00:45DE                      ; input
       3.  00:45DE                      ; hl  configured in window map 32x24 of uints
       4.  00:45DE                      ; de  tile to be plot
       5.  00:45DE                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       6.  00:45DE                      plot_tile:
       7.  00:45DE                      							
       8.  00:45DE  CB 7A               	bit 	7,d			; test for LMMMM	
       9.  00:45E0  C2 2D 46            	jp		nz,plot_trasp_tile
      10.  00:45E3                      	
      11.  00:45E3  7A                  	ld		a,d
      12.  00:45E4  B3                  	or		e
      13.  00:45E5  C2 F1 45            	jp		nz,plot_foreground
      14.  00:45E8                      
      15.  00:45E8                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      16.  00:45E8                      ; input
      17.  00:45E8                      ; hl  configured in window map 32x24
      18.  00:45E8                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      19.  00:45E8                      
      20.  00:45E8                      ; plot_background:
      21.  00:45E8                      
      22.  00:45E8  E5                  	push	hl
      23.  00:45E9  11 12 5A            	ld		de,_backmap-32*4-2
      24.  00:45EC  19                  	add		hl,de
      25.  00:45ED  5E                  	ld		e,(hl)
      26.  00:45EE  23                  	inc		hl
      27.  00:45EF  56                  	ld		d,(hl)
      28.  00:45F0  E1                  	pop		hl
      29.  00:45F1                      	
      30.  00:45F1                      	
      31.  00:45F1                      plot_foreground:
      32.  00:45F1                      
      33.  00:45F1  (00:0001)           counter:=1
      34.  00:45F1                      	while counter<NSolidColors
      35.  00:45F1                    < 	ld	a,low SolidTile@#
      36.  00:45F1                    < 	cp	e
      37.  00:45F1                    < 	jr	nz,1f
      38.  00:45F1                    < 	ld	a,high SolidTile@#
      39.  00:45F1                    < 	cp	d
      40.  00:45F1                    < 	ld	a,17*SolidColor@#		; solid color1
      41.  00:45F1                    < 	jp	z,plot_solid_box
      42.  00:45F1                    < 1:	
      43.  00:45F1                    < counter:=counter+1
      44.  00:45F1                    < 	endwhile	
      44.  00:45F1  3E 00 BB 20 08 3E 00 BA 3E 00 CA 92 46 3E 18 BB 
      44.  00:4601  20 08 3E 00 BA 3E 11 CA 92 46 3E E6 BB 20 08 3E 
      44.  00:4611  03 BA 3E 44 CA 92 46 3E ED BB 20 08 3E 04 BA 3E 
      44.  00:4621  77 CA 92 46 
      45.  00:4625                      
      46.  00:4625  CD 45 46            	call 	vdp_conf
      47.  00:4628                      
      48.  00:4628  3E D0               	ld		a,11010000B
      49.  00:462A  D3 9B               	out 	(0x9B), a		; command HMMM
      50.  00:462C  C9                  	ret
      51.  00:462D                      
      52.  00:462D                      	
      53.  00:462D                      	
      54.  00:462D                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      55.  00:462D                      ; input
      56.  00:462D                      ; hl   configured in window map 32x24
      57.  00:462D                      ; de  tile to be plot
      58.  00:462D                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      59.  00:462D                      
      60.  00:462D                      plot_trasp_tile:
      61.  00:462D                      
      62.  00:462D  D5                  	push	de
      63.  00:462E  E5                  	push	hl
      64.  00:462F                      					;	plot_background
      65.  00:462F  11 12 5A            	ld		de,_backmap-32*4-2
      66.  00:4632  19                  	add		hl,de
      67.  00:4633  5E                  	ld		e,(hl)
      68.  00:4634  23                  	inc		hl
      69.  00:4635  56                  	ld		d,(hl)
      70.  00:4636                      
      71.  00:4636  E1                  	pop		hl
      72.  00:4637  E5                  	push	hl
      73.  00:4638  CD F1 45            	call	plot_foreground
      74.  00:463B  E1                  	pop		hl
      75.  00:463C  D1                  	pop		de
      76.  00:463D                      
      77.  00:463D  CD 45 46            	call	vdp_conf
      78.  00:4640                      
      79.  00:4640  3E 98               	ld		a,10011000B
      80.  00:4642  D3 9B               	out 	(0x9B), a		; command LMMM
      81.  00:4644  C9                  	ret
      82.  00:4645                      
      83.  00:4645                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      84.  00:4645                      ; input
      85.  00:4645                      ; hl   configured in window map 32x24
      86.  00:4645                      ; de  tile to be plot
      87.  00:4645                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      88.  00:4645                      
      89.  00:4645                      vdp_conf:	
      90.  00:4645                      	
      91.  00:4645  29 29               [2]	add		hl,hl
      92.  00:4647  4D                  	ld		c,l			; C = dx*8
      93.  00:4648  7C                  	ld		a,h
      94.  00:4649  87 87 87            [3]	add		a,a
      95.  00:464C  47                  	ld		b,a			; B = dy*8
      96.  00:464D  C5                  	push	bc			; dx*8 and dy*8 on the stack
      97.  00:464E                      	
      98.  00:464E                      	; de has the 16 bit tile
      99.  00:464E                      	; de = 10 bits = 5 bits for y and 5 bits for x
     100.  00:464E                      
     101.  00:464E  EB                  	ex		de,hl
     102.  00:464F  29 29 29            [3]	add		hl,hl
     103.  00:4652                      	
     104.  00:4652                      	; now l is sx*8 and h is sy
     105.  00:4652                      		
     106.  00:4652  7C                  	ld		a,h
     107.  00:4653  87 87 87            [3]	add		a,a
     108.  00:4656  67                  	ld		h,a
     109.  00:4657  F5                  	push	af
     110.  00:4658                      	
     111.  00:4658                      	; now h is sy*8
     112.  00:4658  F3                  	di
     113.  00:4659  3E 20               	ld 		a, 32
     114.  00:465B  D3 99               	out 	(0x99),a
     115.  00:465D  3E 91               	ld 		a, 17+128
     116.  00:465F  D3 99               	out 	(0x99),a
     117.  00:4661  FB                  	ei
     118.  00:4662                      
     119.  00:4662  0E 9B               	ld 		c, 0x9B
     120.  00:4664                      	
     121.  00:4664  CD 24 47            	call _waitvdp;
     122.  00:4667                      	
     123.  00:4667  ED 69               	out		(c), l 		; sx
     124.  00:4669  AF                  	xor a
     125.  00:466A  D3 9B               	out		(0x9B), a 	; sx (high)
     126.  00:466C                      	
     127.  00:466C  ED 61               	out		(c), h 		; sy
     128.  00:466E  F1                  	pop		af
     129.  00:466F  3E 02               	ld		a,2			; source page for tiles 32x32=1024 tiles
     130.  00:4671  CE 00               	adc		a,0
     131.  00:4673  D3 9B               	out 	(0x9B), a 	; sy (high-> page 2)
     132.  00:4675                      
     133.  00:4675  E1                  	pop		hl			; recover dx*8,dy*8
     134.  00:4676                      	
     135.  00:4676  ED 69               	out 	(c), l 		; dx
     136.  00:4678  AF                  	xor a
     137.  00:4679  D3 9B               	out 	(0x9B), a	; dx (high)
     138.  00:467B  ED 61               	out 	(c), h 		; dy
     139.  00:467D  3A 2E C0            	ld 		a,(_currentpage)	; destination page
     140.  00:4680  D3 9B               	out 	(0x9B), a	; dy (high-> page 0 or 1)
     141.  00:4682                      
     142.  00:4682  2E 08               	ld 		l,8 		; block size
     143.  00:4684                      
     144.  00:4684  ED 69               	out 	(c), l
     145.  00:4686  AF                  	xor a
     146.  00:4687  D3 9B               	out 	(0x9B), a
     147.  00:4689  ED 69               	out 	(c), l
     148.  00:468B  D3 9B               	out 	(0x9B), a
     149.  00:468D  D3 9B               	out 	(0x9B), a
     150.  00:468F  D3 9B               	out 	(0x9B), a
     151.  00:4691  C9                  	ret
     152.  00:4692                      
     153.  00:4692                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     154.  00:4692                      ; input
     155.  00:4692                      ; hl configured in window map 32x24
     156.  00:4692                      ;  a color
     157.  00:4692                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     158.  00:4692                      
     159.  00:4692                      plot_solid_box:
     160.  00:4692  5F                  	ld		e,a		; solid color
     161.  00:4693                      
     162.  00:4693  29 29               [2]	add		hl,hl
     163.  00:4695  4D                  	ld		c,l			; C = dx*8
     164.  00:4696  7C                  	ld		a,h
     165.  00:4697  87 87 87            [3]	add		a,a
     166.  00:469A  47                  	ld		b,a			; B = dy*8
     167.  00:469B  C5                  	push	bc			; dx*8 and dy*8 on the stack
     168.  00:469C                      
     169.  00:469C  F3                  	di
     170.  00:469D  3E 24               	ld 		a, 36
     171.  00:469F  D3 99               	out 	(0x99),a
     172.  00:46A1  3E 91               	ld 		a, 17+128
     173.  00:46A3  D3 99               	out 	(0x99),a
     174.  00:46A5  FB                  	ei
     175.  00:46A6                      
     176.  00:46A6  0E 9B               	ld 		c, 0x9B
     177.  00:46A8                      	
     178.  00:46A8  CD 24 47            	call _waitvdp;
     179.  00:46AB  E1                  	pop		hl			; recover dx*8,dy*8
     180.  00:46AC                      	
     181.  00:46AC  ED 69               	out 	(c), l 		; dx
     182.  00:46AE  AF                  	xor a
     183.  00:46AF  D3 9B               	out 	(0x9B), a	; dx (high)
     184.  00:46B1  ED 61               	out 	(c), h 		; dy
     185.  00:46B3  3A 2E C0            	ld 		a,(_currentpage)	; destination page
     186.  00:46B6  D3 9B               	out 	(0x9B), a	; dy (high-> page 0 or 1)
     187.  00:46B8                      
     188.  00:46B8  2E 08               	ld 		l,8 		; block size
     189.  00:46BA                      
     190.  00:46BA  ED 69               	out 	(c), l
     191.  00:46BC  AF                  	xor a
     192.  00:46BD  D3 9B               	out 	(0x9B), a
     193.  00:46BF  ED 69               	out 	(c), l
     194.  00:46C1  D3 9B               	out 	(0x9B), a
     195.  00:46C3  ED 59               	out 	(c), e
     196.  00:46C5  D3 9B               	out 	(0x9B), a
     197.  00:46C7  2E C0               	ld		l,11000000B	; command HMMV
     198.  00:46C9  ED 69               	out 	(c), l
     199.  00:46CB  C9                  	ret
     534   00:46CC                      
     535   00:46CC                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     536   00:46CC                      
     537   00:46CC                      _clean_buffs:
     538   00:46CC  01 3F 0C            	ld	bc,2*WinWidth*WinWidth*2-1
     539   00:46CF  21 2F C0            	ld	hl,_shadow0
     540   00:46D2  36 FF               	ld	(hl),-1
     541   00:46D4  11 30 C0            	ld	de,_shadow0+1
     542   00:46D7  ED B0               	ldir
     543   00:46D9  C9                  	ret
     544   00:46DA                      	
     545   00:46DA                      ;Set VDP for writing at address CDE (17-bit) 
     546   00:46DA                      
     547   00:46DA                      _vdpsetvramwr:
     548   00:46DA  79                  	ld a,c
     549   00:46DB                      ;Set VDP for writing at address ADE (17-bit) ;
     550   00:46DB  CB 02               	rlc d
     551   00:46DD  17                  	rla
     552   00:46DE  CB 02               	rlc d
     553   00:46E0  17                  	rla
     554   00:46E1  CB 3A               	srl d ; primo shift, il secondo dopo la out
     555   00:46E3                      
     556   00:46E3  D3 99               	out (0x99),a ;set bits 14-16
     557   00:46E5  3E 8E               	ld a,14+128
     558   00:46E7  D3 99               	out (0x99),a
     559   00:46E9                      
     560   00:46E9  CB 3A               	srl d ; secondo shift.            
     561   00:46EB  7B                  	ld a,e ;set bits 0-7
     562   00:46EC  D3 99               	out (0x99),a
     563   00:46EE  7A                  	ld a,d ;set bits 8-13
     564   00:46EF  F6 40               	or 0x40 ; + write access
     565   00:46F1  D3 99               	out (0x99),a
     566   00:46F3  C9                  	ret
     567   00:46F4                      	
     568   00:46F4                      ;Set VDP port #98 to start reading at address CDE (17-bit) ;
     569   00:46F4                      
     570   00:46F4                      _vdpsetvramrd:
     571   00:46F4  79                  	ld a,c
     572   00:46F5                      ;Set VDP port #98 to start reading at address ADE (17-bit) ;
     573   00:46F5  CB 02               	rlc d
     574   00:46F7  17                  	rla
     575   00:46F8  CB 02               	rlc d
     576   00:46FA  17                  	rla
     577   00:46FB  CB 3A               	srl d ; primo shift, il secondo dopo la out
     578   00:46FD                      
     579   00:46FD  D3 99               	out (0x99),a ;set bits 14-16
     580   00:46FF  3E 8E               	ld a,14+128
     581   00:4701  D3 99               	out (0x99),a
     582   00:4703                      
     583   00:4703  CB 3A               	srl d ; secondo shift.            
     584   00:4705  7B                  	ld a,e ;set bits 0-7
     585   00:4706  D3 99               	out (0x99),a
     586   00:4708  7A                  	ld a,d ;set bits 8-13
     587   00:4709  E6 3F               	and 0x3F
     588   00:470B  D3 99               	out (0x99),a
     589   00:470D  C9                  	ret
     590   00:470E                      
     591   00:470E                      ;Display page E in screen 5
     592   00:470E                      _setpage:
     593   00:470E  7B                  	ld a,e
     594   00:470F  87                  	add a,a ;x32
     595   00:4710  87                  	add a,a
     596   00:4711  87                  	add a,a
     597   00:4712  87                  	add a,a
     598   00:4713  87                  	add a,a
     599   00:4714  C6 1F               	add a,31
     600   00:4716  F3                  	di
     601   00:4717  D3 99               	out (0x99),a
     602   00:4719  3E 82               	ld a,2+128
     603   00:471B  D3 99               	out (0x99),a
     604   00:471D  FB                  	ei            
     605   00:471E  C9                  	ret
     606   00:471F                      
     607   00:471F  (00:005F)           chgmod        equ     0x005f      ;change graphic mode
     608   00:471F  (00:000C)           RDSLT         equ     0x000c      ;read address HL in slot A
     609   00:471F  (00:0156)           KILBUF        equ     0x0156      ;clear keyboard buffer
     610   00:471F                      
     611   00:471F                      _scr:
     612   00:471F  7B                  	ld  a,e
     613   00:4720  CD 5F 00            	call	chgmod
     614   00:4723  C9                  	ret
     615   00:4724                      
     616   00:4724                      
     617   00:4724                      _waitvdp:
     618   00:4724  F3                  	di
     619   00:4725  3E 02               	ld a,2
     620   00:4727  D3 99               	out (0x99),a
     621   00:4729  3E 8F               	ld a, 0x8f
     622   00:472B  D3 99               	out (0x99),a
     623   00:472D                      
     624   00:472D  DB 99               1:  in a,(0x99)
     625   00:472F  0F                  	rrca
     626   00:4730  DA 2D 47            	jp c, 1b
     627   00:4733                      
     628   00:4733  AF                  	xor a
     629   00:4734  D3 99               	out (0x99),a
     630   00:4736  3E 8F               	ld a, 0x8f
     631   00:4738  D3 99               	out (0x99),a
     632   00:473A  FB                  	ei
     633   00:473B  C9                  	ret
     634   00:473C                      
     635   00:473C                      _print_probe
     636   00:473C  3A 11 C0            	ld	a,(_mcprobeb)
     637   00:473F  5F                  	ld	e,a
     638   00:4740  16 00               	ld	d,0
     639   00:4742  21 C0 07            	ld	hl,32*(64-2)
     640   00:4745  19                  	add	hl,de
     641   00:4746  EB                  	ex	de,hl
     642   00:4747  21 C0 05            	ld	hl,2*(23*32+0)
     643   00:474A  CD F1 45            	call 	plot_foreground
     644   00:474D                      	
     645   00:474D  ED 5B 12 C0         	ld	de,(_ticxframe)
     646   00:4751  16 00               	ld	d,0
     647   00:4753  01 13 C0            	ld	bc,_buffer
     648   00:4756  CD B5 47            	call	int2ascii
     649   00:4759                      	
     650   00:4759  3A 15 C0            	ld	a,(_buffer+2)
     651   00:475C  5F                  	ld	e,a
     652   00:475D  16 00               	ld	d,0
     653   00:475F  21 90 07            	ld	hl,32*(64-2)-'0'
     654   00:4762  19                  	add	hl,de
     655   00:4763  EB                  	ex	de,hl
     656   00:4764  21 80 05            	ld	hl,2*(22*32)
     657   00:4767  CD F1 45            	call 	plot_foreground
     658   00:476A                      
     659   00:476A  3A 16 C0            	ld	a,(_buffer+3)
     660   00:476D  5F                  	ld	e,a
     661   00:476E  16 00               	ld	d,0
     662   00:4770  21 90 07            	ld	hl,32*(64-2)-'0'
     663   00:4773  19                  	add	hl,de
     664   00:4774  EB                  	ex	de,hl
     665   00:4775  21 82 05            	ld	hl,2*(22*32+1)
     666   00:4778  CD F1 45            	call 	plot_foreground
     667   00:477B                      
     668   00:477B  3A 17 C0            	ld	a,(_buffer+4)
     669   00:477E  5F                  	ld	e,a
     670   00:477F  16 00               	ld	d,0
     671   00:4781  21 90 07            	ld	hl,32*(64-2)-'0'
     672   00:4784  19                  	add	hl,de
     673   00:4785  EB                  	ex	de,hl
     674   00:4786  21 84 05            	ld	hl,2*(22*32+2)
     675   00:4789  C3 F1 45            	jp 	plot_foreground
     676   00:478C                      	
     677   00:478C                      	
     678   00:478C                      _print_fps:
     679   00:478C  3A 16 C0            	ld	a,(_buffer+3)
     680   00:478F  5F                  	ld	e,a
     681   00:4790  16 00               	ld	d,0
     682   00:4792  21 90 07            	ld	hl,32*(64-2)-'0'
     683   00:4795  19                  	add	hl,de
     684   00:4796  EB                  	ex	de,hl
     685   00:4797                      	
     686   00:4797  21 FC 05            	ld	hl,2*(23*32+30)
     687   00:479A  CD F1 45            	call 	plot_foreground
     688   00:479D                      
     689   00:479D  3A 17 C0            	ld	a,(_buffer+4)
     690   00:47A0  5F                  	ld	e,a
     691   00:47A1  16 00               	ld	d,0
     692   00:47A3  21 90 07            	ld	hl,32*(64-2)-'0'
     693   00:47A6  19                  	add	hl,de
     694   00:47A7  EB                  	ex	de,hl
     695   00:47A8                      	
     696   00:47A8  21 FE 05            	ld	hl,2*(23*32+31)
     697   00:47AB  C3 F1 45            	jp 	plot_foreground
     698   00:47AE                      	
     699   00:47AE                      
     700   00:47AE                      ;-------------------------------------
     701   00:47AE                      _compute_fps:
     702   00:47AE  ED 5B 23 C0         	ld	de,(_fps)
     703   00:47B2  01 13 C0            	ld	bc,_buffer
     704   00:47B5                      
     705   00:47B5                      int2ascii:
     706   00:47B5                      	
     707   00:47B5                      ; in de input 
     708   00:47B5                      ; in bc output
     709   00:47B5                      
     710   00:47B5  EB                  	ex  de,hl
     711   00:47B6  59                  	ld  e,c
     712   00:47B7  50                  	ld  d,b
     713   00:47B8                      
     714   00:47B8                      Num2asc:
     715   00:47B8  01 F0 D8            	ld  bc,-10000
     716   00:47BB  CD D1 47            	call    Num1
     717   00:47BE  01 18 FC            	ld  bc,-1000
     718   00:47C1  CD D1 47            	call    Num1
     719   00:47C4  01 9C FF            	ld  bc,-100
     720   00:47C7  CD D1 47            	call    Num1
     721   00:47CA  0E F6               	ld  c,-10
     722   00:47CC  CD D1 47            	call    Num1
     723   00:47CF  0E FF               	ld  c,-1
     724   00:47D1                      
     725   00:47D1                      Num1:   
     726   00:47D1  3E 2F               	ld  a,'0'-1  ; '0' in the tileset
     727   00:47D3                      
     728   00:47D3                      Num2:   
     729   00:47D3  3C                  	inc a
     730   00:47D4  09                  	add hl,bc
     731   00:47D5  38 FC               	jr  c,Num2
     732   00:47D7  ED 42               	sbc hl,bc
     733   00:47D9                      
     734   00:47D9  12                  	ld  (de),a
     735   00:47DA  13                  	inc de
     736   00:47DB  C9                  	ret
     737   00:47DC                      
     738   00:47DC                      _metatable:
     739   00:47DC  (12B8)              	incbin "metatable.bin"
     740   00:5A94                      _backmap:
     741   00:5A94  (0400)              	incbin "backmap.bin"
     742   00:5E94                      
     743   00:5E94                      	include enemies.asm
       1.  00:5E94                      
       2.  00:5E94  (00:0008)           nenemies 	equ	8
       3.  00:5E94  (00:0080)           sprite_size	equ	8*8*2
       4.  00:5E94                      
       5.  00:5E94                      		struct enemy
       6.  00:5E94                    < type 	db
       7.  00:5E94                    < state 	db
       8.  00:5E94                    < frame 	db
       9.  00:5E94                    < x		dw	
      10.  00:5E94                    < y		dw
      11.  00:5E94                    < mappos	dw
      12.  00:5E94                    < dx		dw
      13.  00:5E94                    < dy		dw
      14.  00:5E94                    < nx		db
      15.  00:5E94                    < ny		db
      16.  00:5E94                    < buf		ds	sprite_size
      17.  00:5E94                    < 	endstruct
      18.  00:5E94                      	
      19.  00:5E94  (06)                	page 6
      20.  06:8000                      frames:
      21.  06:8000  1A 00 EB 00 AA 00   		dw 01Ah,0EBh,0AAh
      22.  06:8006  1A 00 EB 00 AA 00   		dw 01Ah,0EBh,0AAh
      23.  06:800C                      
      24.  06:800C  00 (128)            [127]	ds	sprite_size
      25.  06:BF8C                      
      26.  06:BF8C  (00)                	page 0
      27.  00:5E94                      int_sprites
      28.  00:5E94  DD 21 2F DC         	ld	ix,enemylist
      29.  00:5E98  DD 36 03 00         	ld	(ix+enemy.x),0
      30.  00:5E9C  DD 36 04 00         	ld	(ix+enemy.x+1),0
      31.  00:5EA0                      	
      32.  00:5EA0  DD 36 05 00         	ld	(ix+enemy.y),0
      33.  00:5EA4  DD 36 06 00         	ld	(ix+enemy.y+1),0
      34.  00:5EA8                      	
      35.  00:5EA8  DD 36 0D 03         	ld	(ix+enemy.nx),3
      36.  00:5EAC  DD 36 0E 02         	ld	(ix+enemy.ny),2
      37.  00:5EB0                      	
      38.  00:5EB0  DD 36 02 00         	ld	(ix+enemy.frame),0
      39.  00:5EB4                      	
      40.  00:5EB4  01 02 94            	ld	bc,_levelmap+2+mapWidth*10*2
      41.  00:5EB7  DD 71 07            	ld	(ix+enemy.mappos),c
      42.  00:5EBA  DD 70 08            	ld	(ix+enemy.mappos+1),b
      43.  00:5EBD  C9                  	ret
      44.  00:5EBE                      
      45.  00:5EBE                      move_sprites
      46.  00:5EBE  DD 7E 09            	ld	a,(ix+enemy.dx)
      47.  00:5EC1  3D                  	dec	a
      48.  00:5EC2  E6 03               	and	3
      49.  00:5EC4  DD 77 09            	ld	(ix+enemy.dx),a
      50.  00:5EC7  C0                  	ret	nz
      51.  00:5EC8                      	
      52.  00:5EC8  DD 6E 07            	ld	l,(ix+enemy.mappos)
      53.  00:5ECB  DD 66 08            	ld	h,(ix+enemy.mappos+1)
      54.  00:5ECE  23 23               [2]	inc	hl
      55.  00:5ED0  DD 75 07            	ld	(ix+enemy.mappos),l
      56.  00:5ED3  DD 74 08            	ld	(ix+enemy.mappos+1),h
      57.  00:5ED6  C9                  	ret
      58.  00:5ED7                      
      59.  00:5ED7                      	; ld	bc,(ix+enemy.y)
      60.  00:5ED7                      	; ld	hl,mapWidth
      61.  00:5ED7                      	; call	bcxhl
      62.  00:5ED7                      	; ld	bc,(ix+enemy.y)
      63.  00:5ED7                      	; add	hl,bc
      64.  00:5ED7                      	; ld	bc,_levelmap
      65.  00:5ED7                      	; add	hl,bc	
      66.  00:5ED7                      
      67.  00:5ED7                      ;;;;;;;;;;;;;;;;;;;;;;;;
      68.  00:5ED7                      ; save_background
      69.  00:5ED7                      ; in 
      70.  00:5ED7                      ;  ix destination in enemylist
      71.  00:5ED7                      ;;;;;;;;;;;;;;;;;;;;;;;;
      72.  00:5ED7                      
      73.  00:5ED7                      save_background:
      74.  00:5ED7  DD 5E 07            	ld	e,(ix+enemy.mappos)
      75.  00:5EDA  DD 56 08            	ld	d,(ix+enemy.mappos+1)
      76.  00:5EDD                      	
      77.  00:5EDD  DD E5               	push	ix
      78.  00:5EDF  E1                  	pop		hl
      79.  00:5EE0  01 0F 00            	ld	bc,enemy.buf
      80.  00:5EE3  09                  	add	hl,bc
      81.  00:5EE4  EB                  	ex	de,hl
      82.  00:5EE5                      	
      83.  00:5EE5  DD 7E 0E            	ld	a,(ix+enemy.ny)
      84.  00:5EE8                      
      85.  00:5EE8  06 00               	ld	b,0
      86.  00:5EEA                      	
      87.  00:5EEA  DD 4E 0D            2:	ld	c,(ix+enemy.nx)
      88.  00:5EED  CB 21               	sla	c
      89.  00:5EEF  E5                  	push	hl
      90.  00:5EF0  ED B0               	ldir
      91.  00:5EF2  E1                  	pop	hl
      92.  00:5EF3                      	
      93.  00:5EF3  24 24               [2]	inc h	; only if (mapWidth=256)
      94.  00:5EF5                      	
      95.  00:5EF5  3D                  	dec	a
      96.  00:5EF6  C2 EA 5E            	jp	nz,2b
      97.  00:5EF9  C9                  	ret
      98.  00:5EFA                      	
      99.  00:5EFA                      ;;;;;;;;;;;;;;;;;;;;;;;;
     100.  00:5EFA                      ; plot_sprite
     101.  00:5EFA                      ; in 
     102.  00:5EFA                      ;  ix destination in enemylist
     103.  00:5EFA                      ;;;;;;;;;;;;;;;;;;;;;;;;
     104.  00:5EFA                      
     105.  00:5EFA                      plot_sprite:
     106.  00:5EFA  DD 6E 02            	ld	l,(ix+enemy.frame)
     107.  00:5EFD  26 00               	ld	h,0
     108.  00:5EFF  29 29 29 29 29 29   [6]	add	hl,hl			; sprite_size = 64*2
     109.  00:5F05                      
     110.  00:5F05  3E 06               	ld	a,:frames
     111.  00:5F07  32 00 70            	ld	(_bank2),a
     112.  00:5F0A  01 00 80            	ld	bc,frames
     113.  00:5F0D  09                  	add	hl,bc			; hl aims to the current frame to be plotted
     114.  00:5F0E                      
     115.  00:5F0E  C3 18 5F            	jp	plot_sprtite_frame
     116.  00:5F11                      	
     117.  00:5F11                      ;;;;;;;;;;;;;;;;;;;;;;;;
     118.  00:5F11                      ; restore_background
     119.  00:5F11                      ; in 
     120.  00:5F11                      ;  ix source in enemylist
     121.  00:5F11                      ;;;;;;;;;;;;;;;;;;;;;;;;
     122.  00:5F11                      
     123.  00:5F11                      restore_background:
     124.  00:5F11  DD E5               	push	ix
     125.  00:5F13  E1                  	pop		hl
     126.  00:5F14  01 0F 00            	ld	bc,enemy.buf
     127.  00:5F17  09                  	add	hl,bc			
     128.  00:5F18                      
     129.  00:5F18                      plot_sprtite_frame:
     130.  00:5F18  DD 5E 07            	ld	e,(ix+enemy.mappos)
     131.  00:5F1B  DD 56 08            	ld	d,(ix+enemy.mappos+1)	; hl->buffer, de->_levelmap
     132.  00:5F1E                      	
     133.  00:5F1E  DD 7E 0E            	ld	a,(ix+enemy.ny)
     134.  00:5F21  06 00               	ld	b,0
     135.  00:5F23                      	
     136.  00:5F23  DD 4E 0D            2:	ld	c,(ix+enemy.nx)
     137.  00:5F26  CB 21               	sla	c
     138.  00:5F28  D5                  	push	de
     139.  00:5F29  ED B0               	ldir
     140.  00:5F2B  D1                  	pop	de
     141.  00:5F2C                      
     142.  00:5F2C  14 14               [2]	inc d	; only if (mapWidth=256)
     143.  00:5F2E                      
     144.  00:5F2E  3D                  	dec	a
     145.  00:5F2F  C2 23 5F            	jp	nz,2b
     146.  00:5F32  C9                  	ret
     147.  00:5F33                      	
     148.  00:5F33                      	
     149.  00:5F33                      	
     744   00:5F33                      
     745   00:5F33                      	include hwsprites.asm
       1.  00:5F33                      
       2.  00:5F33                      ; SGT = 0x7800 ->#R6 = 0x0F
       3.  00:5F33                      ; SAT = 0x7600 ->#R5 = 0xEF #R11=0
       4.  00:5F33                      
       5.  00:5F33                      _hw_sprite_init:
       6.  00:5F33                      
       7.  00:5F33  F3                  		di
       8.  00:5F34                      		; SGT = 0x7800 ->#R6 = 0x0F
       9.  00:5F34  3E 0F               		ld		a,0x0F
      10.  00:5F36  D3 99               		out		(0x99),a
      11.  00:5F38  3E 86               		ld		a,128+6
      12.  00:5F3A  D3 99               		out		(0x99),a
      13.  00:5F3C                      		
      14.  00:5F3C                      		; SAT = 0x7600 ->#R5 = 0xEF #R11=0
      15.  00:5F3C  3E EF               		ld		a,0xEF
      16.  00:5F3E  D3 99               		out		(0x99),a
      17.  00:5F40  3E 85               		ld		a,128+5
      18.  00:5F42  D3 99               		out		(0x99),a
      19.  00:5F44                      		
      20.  00:5F44  AF                  		xor	a
      21.  00:5F45  D3 99               		out		(0x99),a
      22.  00:5F47  3E 8B               		ld		a,128+11
      23.  00:5F49  D3 99               		out		(0x99),a
      24.  00:5F4B  FB                  		ei
      25.  00:5F4C                      		
      26.  00:5F4C                      		; unpack level map (meta_tiles)
      27.  00:5F4C  3E 05               		ld	a, :sprtdata.SPRITES
      28.  00:5F4E  32 00 70            		ld	(_bank2),a
      29.  00:5F51                      		
      30.  00:5F51  21 00 80            		ld		hl,	sprtdata.SPRITES
      31.  00:5F54  0E 00               		ld		c,0
      32.  00:5F56  11 00 78            		ld		de,0x7800
      33.  00:5F59  CD DA 46            		call	_vdpsetvramwr
      34.  00:5F5C                      		
      35.  00:5F5C  01 98 00            		ld		bc,0x98
      36.  00:5F5F                      [8]		otir	; 2K
      36.  00:5F5F  ED B3 ED B3 ED B3 ED B3 ED B3 ED B3 ED B3 ED B3 
      37.  00:5F6F                      
      38.  00:5F6F  21 40 82            		ld		hl,	sprtdata.ATRIBUTOS
      39.  00:5F72  0E 00               		ld		c,0
      40.  00:5F74  11 00 74            		ld		de,0x7600-512
      41.  00:5F77  CD DA 46            		call	_vdpsetvramwr
      42.  00:5F7A                      
      43.  00:5F7A  01 98 00            		ld		bc,0x98
      44.  00:5F7D  ED B3 ED B3         [2]		otir	; 512
      45.  00:5F81                      
      46.  00:5F81                      
      47.  00:5F81  0E 00               		ld		c,0
      48.  00:5F83  11 00 76            		ld		de,0x7600
      49.  00:5F86  CD DA 46            		call	_vdpsetvramwr
      50.  00:5F89                      		
      51.  00:5F89  21 92 5F            		ld		hl,hwsprt_test		
      52.  00:5F8C  01 98 80            		ld		bc,0x8098
      53.  00:5F8F  ED B3               		otir			
      54.  00:5F91  C9                  		ret
      55.  00:5F92                      		
      56.  00:5F92                      hwsprt_test
      57.  00:5F92  D8                  		db	0xd8
      58.  00:5F93  40 80 00 0F         		db	64,128,0,15
      59.  00:5F97  40 80 04 0F         		db	64,128,4,15
      60.  00:5F9B  40 80 08 0F         		db	64,128,8,15
      61.  00:5F9F                      		
      62.  00:5F9F  20 80 0C 0F         		db	32,128,12,15
      63.  00:5FA3  20 80 10 0F         		db	32,128,16,15
      64.  00:5FA7  20 80 14 0F         		db	32,128,20,15
      65.  00:5FAB  D8                  		db	0xd8
     746   00:5FAC                      	
     747   00:5FAC                      	include enemies_LMMM.asm
       1.  00:5FAC                      
       2.  00:5FAC                      enemies_LMMM:
       3.  00:5FAC                      
       4.  00:5FAC  21 78 00            	ld	hl,120
       5.  00:5FAF  22 06 C0            	ld	(_mcx),hl
       6.  00:5FB2  21 50 00            	ld	hl,16+64
       7.  00:5FB5  22 08 C0            	ld	(_mcy),hl
       8.  00:5FB8                      	
       9.  00:5FB8  2A 08 C0            	ld	hl,(_mcy)
      10.  00:5FBB  7D                  	ld	a,l
      11.  00:5FBC  E6 F8               	and	11111000B
      12.  00:5FBE  6F                  	ld	l,a
      13.  00:5FBF  29 29 29            [3]	add	hl,hl
      14.  00:5FC2  EB                  	ex	de,hl
      15.  00:5FC3  2A 06 C0            	ld	hl,(_mcx)
      16.  00:5FC6  7D                  	ld	a,l
      17.  00:5FC7  E6 F8               	and	11111000B
      18.  00:5FC9  1F 1F               [2]	rra
      19.  00:5FCB  6F                  	ld	l,a
      20.  00:5FCC  19                  	add	hl,de
      21.  00:5FCD                      	
      22.  00:5FCD  ED 5B 2C C0         	ld		de,(_shadowbuff)
      23.  00:5FD1  19                  	add		hl,de		; HL = pointer to the shadow map
      24.  00:5FD2  23                  	inc		hl
      25.  00:5FD3  36 7F               	ld		(hl),127
      26.  00:5FD5  23 23               [2]	inc		hl
      27.  00:5FD7  36 7F               	ld		(hl),127
      28.  00:5FD9  11 3E 00            	ld		de,2*32-2
      29.  00:5FDC  19                  	add		hl,de		; HL = pointer to the shadow map
      30.  00:5FDD  36 7F               	ld		(hl),127
      31.  00:5FDF  23 23               [2]	inc		hl
      32.  00:5FE1  36 7F               	ld		(hl),127
      33.  00:5FE3                      
      34.  00:5FE3                      	
      35.  00:5FE3  F3                  	di
      36.  00:5FE4  3E 20               	ld 		a, 32
      37.  00:5FE6  D3 99               	out 	(0x99),a
      38.  00:5FE8  3E 91               	ld 		a, 17+128
      39.  00:5FEA  D3 99               	out 	(0x99),a
      40.  00:5FEC  FB                  	ei
      41.  00:5FED                      
      42.  00:5FED  0E 9B               	ld 		c, 0x9B
      43.  00:5FEF                      	
      44.  00:5FEF  CD 24 47            	call _waitvdp;
      45.  00:5FF2                      
      46.  00:5FF2  3A 0F C0            	ld	a,(_mcstate)
      47.  00:5FF5  87 87               [2]	add	a,a
      48.  00:5FF7  5F                  	ld	e,a
      49.  00:5FF8  16 00               	ld	d,0
      50.  00:5FFA  21 40 60            	ld	hl,state0
      51.  00:5FFD  19                  	add	hl,de
      52.  00:5FFE                      	
      53.  00:5FFE  3A 0E C0            	ld	a,(_mcframe)
      54.  00:6001  3C                  	inc	a
      55.  00:6002  E6 03               	and	3
      56.  00:6004  32 0E C0            	ld	(_mcframe),a
      57.  00:6007  5F                  	ld	e,a
      58.  00:6008  16 00               	ld	d,0
      59.  00:600A  19                  	add	hl,de
      60.  00:600B  6E                  	ld	l,(hl)
      61.  00:600C                      
      62.  00:600C  26 C0               	ld		h,192
      63.  00:600E  ED 69               	out		(c), l 		; sx
      64.  00:6010  AF                  	xor a
      65.  00:6011  D3 9B               	out		(0x9B), a 	; sx (high)
      66.  00:6013                      	
      67.  00:6013  ED 61               	out		(c), h 		; sy
      68.  00:6015  3E 01               	ld		a,1			; source page for sprites
      69.  00:6017  D3 9B               	out 	(0x9B), a 	; sy (high-> page 3)
      70.  00:6019                      	
      71.  00:6019  3A 06 C0            	ld		a,(_mcx)
      72.  00:601C  D3 9B               	out 	(0x9B), a 	; dx
      73.  00:601E  AF                  	xor a
      74.  00:601F  D3 9B               	out 	(0x9B), a	; dx (high)
      75.  00:6021                      	
      76.  00:6021  3A 08 C0            	ld		a,(_mcy)
      77.  00:6024  D3 9B               	out 	(0x9B), a	; dy
      78.  00:6026  3A 2E C0            	ld 		a,(_currentpage)	; destination page
      79.  00:6029  D3 9B               	out 	(0x9B), a	; dy (high-> page 0 or 1)
      80.  00:602B                      
      81.  00:602B  21 10 10            	ld 		hl,16*257 	; block size
      82.  00:602E                      
      83.  00:602E  ED 69               	out 	(c), l
      84.  00:6030  AF                  	xor a
      85.  00:6031  D3 9B               	out 	(0x9B), a
      86.  00:6033  ED 61               	out 	(c), h
      87.  00:6035  D3 9B               	out 	(0x9B), a
      88.  00:6037  D3 9B               	out 	(0x9B), a
      89.  00:6039  D3 9B               	out 	(0x9B), a
      90.  00:603B                      
      91.  00:603B  3E 98               	ld		a,10011000B
      92.  00:603D  D3 9B               	out 	(0x9B), a		; command LMMM
      93.  00:603F  C9                  	ret
      94.  00:6040                      
      95.  00:6040  00 10 00 20         state0		db	0*16,1*16,0*16,2*16
      96.  00:6044  30 40 30 50         state1		db	3*16,4*16,3*16,5*16
      97.  00:6048  60 70 60 70         state2		db	6*16,7*16,6*16,7*16
      98.  00:604C  60 70 60 70         state3		db	6*16,7*16,6*16,7*16
     748   00:6050                      	include probe_level.asm
       1.  00:6050                      
       2.  00:6050                      
       3.  00:6050                      probe_level:
       4.  00:6050                      	
       5.  00:6050  01 F0 FF            	ld	bc,-16		; FRAME!!!
       6.  00:6053  2A 2A C0            	ld	hl,(_xmappos)
       7.  00:6056  ED 5B 06 C0         	ld	de,(_mcx)
       8.  00:605A  19                  	add	hl,de
       9.  00:605B  09                  	add	hl,bc		; remove frame
      10.  00:605C  22 0A C0            	ld	(_mclx),hl
      11.  00:605F                      
      12.  00:605F  2A 29 C0            	ld	hl,(_ymappos)
      13.  00:6062  26 00               	ld	h,0
      14.  00:6064  ED 5B 08 C0         	ld	de,(_mcy)
      15.  00:6068  19                  	add	hl,de
      16.  00:6069  09                  	add	hl,bc		; remove frame
      17.  00:606A  22 0C C0            	ld	(_mcly),hl
      18.  00:606D                      	
      19.  00:606D  2A 0C C0            	ld	hl,(_mcly)	; ONLY IF mapWidth=256
      20.  00:6070  7D                  	ld	a,l
      21.  00:6071  E6 FC               	and	11111100B
      22.  00:6073  6F                  	ld	l,a
      23.  00:6074  29 29 29 29         [4]	add	hl,hl
      24.  00:6078                      	
      25.  00:6078  EB                  	ex	de,hl
      26.  00:6079                      
      27.  00:6079  2A 0A C0            	ld	hl,(_mclx)	; ONLY IF mapWidth=256
      28.  00:607C  29 29 29            [3]	add	hl,hl	
      29.  00:607F  6C                  	ld	l,h
      30.  00:6080  26 00               	ld	h,0
      31.  00:6082                      	
      32.  00:6082  19                  	add	hl,de
      33.  00:6083                      	
      34.  00:6083  11 2F CC            	ld	de,_cur_level_bf
      35.  00:6086  19                  	add	hl,de
      36.  00:6087                      	
      37.  00:6087  3A 0A C0            	ld	a,(_mclx)
      38.  00:608A  1F 1F               [2]	rra			; x/4
      39.  00:608C  E6 07               	and	7
      40.  00:608E  47                  	ld	b,a
      41.  00:608F  7E                  	ld	a,(hl)
      42.  00:6090  32 10 C0            	ld	(_mcprobe),a
      43.  00:6093  28 03               	jr	z,2f
      44.  00:6095  1F                  1:	rra
      45.  00:6096  10 FD               	djnz	1b
      46.  00:6098  E6 01               2:	and	1
      47.  00:609A                      
      48.  00:609A  32 11 C0            	ld	(_mcprobeb),a
      49.  00:609D  C9                  	ret
      50.  00:609E                      	
     749   00:609E                      	
     750   00:609E  (01)                	page 1
     751   01:8000                      _frame:
     752   01:8000  (0951)              	incbin "_frame.bin"
     753   01:8951                      _mc_sprites:	
     754   01:8951  (0320)              	incbin "_sprites.bin"			
     755   01:8C71                      	
     756   01:8C71  (02)                	page 2
     757   02:8000                      _tiles0:
     758   02:8000  (3365)              	incbin "_tiles0.bin"
     759   02:B365                      	
     760   02:B365  (03)                	page 3
     761   03:8000                      _tiles1:
     762   03:8000  (2A4F)              	incbin "_tiles1.bin"
     763   03:AA4F                      
     764   03:AA4F  (04)                	page 4
     765   04:8000                      _level:
     766   04:8000  (0A2C)              	incbin "_metamap.bin"
     767   04:8A2C                      _level_bf:	
     768   04:8A2C  (1000)              	incbin "BitField.bin"	
     769   04:9A2C                      	
     770   04:9A2C  (05)                	page 5
     771   05:8000                      sprtdata
     772   05:8000                      	include 	SPROL.ASM
       1.  05:8000                      .SPRITES
       2.  05:8000                      ; --- Slot 0
       3.  05:8000                      ; mask 00
       4.  05:8000                       DB $01,$00,$07,$00,$00,$00,$01,$01
       4.  05:8000  01 00 07 00 00 00 01 01 
       5.  05:8008                       DB $00,$04,$10,$18,$18,$04,$00,$06
       5.  05:8008  00 04 10 18 18 04 00 06 
       6.  05:8010                       DB $20,$80,$F8,$20,$20,$70,$20,$E8
       6.  05:8010  20 80 F8 20 20 70 20 E8 
       7.  05:8018                       DB $48,$00,$20,$00,$00,$08,$20,$18
       7.  05:8018  48 00 20 00 00 08 20 18 
       8.  05:8020                      ; mask 01
       9.  05:8020                       DB $03,$07,$00,$07,$00,$05,$04,$02
       9.  05:8020  03 07 00 07 00 05 04 02 
      10.  05:8028                       DB $00,$07,$0D,$02,$1C,$02,$06,$00
      10.  05:8028  00 07 0D 02 1C 02 06 00 
      11.  05:8030                       DB $20,$F0,$00,$F8,$10,$00,$80,$14
      11.  05:8030  20 F0 00 F8 10 00 80 14 
      12.  05:8038                       DB $A4,$48,$C8,$70,$80,$70,$18,$00
      12.  05:8038  A4 48 C8 70 80 70 18 00 
      13.  05:8040                      ; mask 02
      14.  05:8040                       DB $05,$00,$00,$00,$0F,$0F,$06,$06
      14.  05:8040  05 00 00 00 0F 0F 06 06 
      15.  05:8048                       DB $07,$08,$02,$05,$1B,$01,$09,$00
      15.  05:8048  07 08 02 05 1B 01 09 00 
      16.  05:8050                       DB $E0,$00,$00,$00,$D8,$80,$D0,$14
      16.  05:8050  E0 00 00 00 D8 80 D0 14 
      17.  05:8058                       DB $B4,$B4,$14,$88,$70,$80,$C4,$00
      17.  05:8058  B4 B4 14 88 70 80 C4 00 
      18.  05:8060                      
      19.  05:8060                      ;
      20.  05:8060                      ; --- Slot 1
      21.  05:8060                      ; mask 10
      22.  05:8060                       DB $01,$00,$07,$00,$00,$00,$01,$01
      22.  05:8060  01 00 07 00 00 00 01 01 
      23.  05:8068                       DB $00,$00,$00,$02,$04,$02,$00,$03
      23.  05:8068  00 00 00 02 04 02 00 03 
      24.  05:8070                       DB $20,$80,$F8,$20,$20,$70,$20,$E0
      24.  05:8070  20 80 F8 20 20 70 20 E0 
      25.  05:8078                       DB $A0,$60,$60,$E0,$08,$00,$08,$38
      25.  05:8078  A0 60 60 E0 08 00 08 38 
      26.  05:8080                      ; mask 11
      27.  05:8080                       DB $03,$00,$00,$0F,$00,$05,$04,$02
      27.  05:8080  03 00 00 0F 00 05 04 02 
      28.  05:8088                       DB $02,$02,$01,$05,$03,$01,$03,$00
      28.  05:8088  02 02 01 05 03 01 03 00 
      29.  05:8090                       DB $30,$88,$00,$F8,$10,$00,$80,$10
      29.  05:8090  30 88 00 F8 10 00 80 10 
      30.  05:8098                       DB $A0,$60,$60,$10,$F0,$90,$34,$00
      30.  05:8098  A0 60 60 10 F0 90 34 00 
      31.  05:80A0                      ; mask 12
      32.  05:80A0                       DB $05,$07,$00,$00,$0F,$0F,$06,$06
      32.  05:80A0  05 07 00 00 0F 0F 06 06 
      33.  05:80A8                       DB $05,$07,$06,$00,$00,$04,$04,$00
      33.  05:80A8  05 07 06 00 00 04 04 00 
      34.  05:80B0                       DB $E0,$F0,$00,$00,$D8,$80,$D0,$10
      34.  05:80B0  E0 F0 00 00 D8 80 D0 10 
      35.  05:80B8                       DB $F0,$90,$F0,$00,$00,$68,$C0,$00
      35.  05:80B8  F0 90 F0 00 00 68 C0 00 
      36.  05:80C0                      
      37.  05:80C0                      ;
      38.  05:80C0                      ; --- Slot 2
      39.  05:80C0                      ; mask 20
      40.  05:80C0                       DB $01,$00,$07,$00,$00,$00,$01,$01
      40.  05:80C0  01 00 07 00 00 00 01 01 
      41.  05:80C8                       DB $00,$04,$00,$01,$01,$04,$00,$07
      41.  05:80C8  00 04 00 01 01 04 00 07 
      42.  05:80D0                       DB $20,$80,$F8,$20,$20,$70,$20,$E0
      42.  05:80D0  20 80 F8 20 20 70 20 E0 
      43.  05:80D8                       DB $40,$00,$20,$88,$88,$60,$90,$F0
      43.  05:80D8  40 00 20 88 88 60 90 F0 
      44.  05:80E0                      ; mask 21
      45.  05:80E0                       DB $03,$00,$00,$0F,$00,$05,$04,$02
      45.  05:80E0  03 00 00 0F 00 05 04 02 
      46.  05:80E8                       DB $00,$07,$01,$02,$07,$03,$03,$00
      46.  05:80E8  00 07 01 02 07 03 03 00 
      47.  05:80F0                       DB $30,$88,$00,$F8,$10,$00,$80,$10
      47.  05:80F0  30 88 00 F8 10 00 80 10 
      48.  05:80F8                       DB $A0,$40,$C0,$60,$F8,$90,$28,$00
      48.  05:80F8  A0 40 C0 60 F8 90 28 00 
      49.  05:8100                      ; mask 22
      50.  05:8100                       DB $05,$07,$00,$00,$0F,$0F,$06,$06
      50.  05:8100  05 07 00 00 0F 0F 06 06 
      51.  05:8108                       DB $07,$00,$06,$04,$00,$00,$04,$00
      51.  05:8108  07 00 06 04 00 00 04 00 
      52.  05:8110                       DB $E0,$F0,$00,$00,$D8,$80,$D0,$10
      52.  05:8110  E0 F0 00 00 D8 80 D0 10 
      53.  05:8118                       DB $B0,$B0,$10,$10,$00,$00,$40,$00
      53.  05:8118  B0 B0 10 10 00 00 40 00 
      54.  05:8120                      
      55.  05:8120                      ;
      56.  05:8120                      ; --- Slot 3
      57.  05:8120                      ; mask 30
      58.  05:8120                       DB $04,$01,$1F,$04,$04,$0E,$04,$17
      58.  05:8120  04 01 1F 04 04 0E 04 17 
      59.  05:8128                       DB $12,$00,$04,$00,$00,$10,$04,$18
      59.  05:8128  12 00 04 00 00 10 04 18 
      60.  05:8130                       DB $80,$00,$E0,$00,$00,$00,$80,$80
      60.  05:8130  80 00 E0 00 00 00 80 80 
      61.  05:8138                       DB $00,$20,$08,$18,$18,$20,$00,$60
      61.  05:8138  00 20 08 18 18 20 00 60 
      62.  05:8140                      ; mask 31
      63.  05:8140                       DB $04,$0F,$00,$1F,$08,$00,$01,$28
      63.  05:8140  04 0F 00 1F 08 00 01 28 
      64.  05:8148                       DB $25,$12,$13,$0E,$01,$0E,$18,$00
      64.  05:8148  25 12 13 0E 01 0E 18 00 
      65.  05:8150                       DB $C0,$E0,$00,$E0,$00,$A0,$20,$40
      65.  05:8150  C0 E0 00 E0 00 A0 20 40 
      66.  05:8158                       DB $00,$E0,$B0,$40,$38,$40,$60,$00
      66.  05:8158  00 E0 B0 40 38 40 60 00 
      67.  05:8160                      ; mask 32
      68.  05:8160                       DB $07,$00,$00,$00,$1B,$01,$0B,$28
      68.  05:8160  07 00 00 00 1B 01 0B 28 
      69.  05:8168                       DB $2D,$2D,$28,$11,$0E,$01,$23,$00
      69.  05:8168  2D 2D 28 11 0E 01 23 00 
      70.  05:8170                       DB $A0,$00,$00,$00,$F0,$F0,$60,$60
      70.  05:8170  A0 00 00 00 F0 F0 60 60 
      71.  05:8178                       DB $E0,$10,$40,$A0,$D8,$80,$90,$00
      71.  05:8178  E0 10 40 A0 D8 80 90 00 
      72.  05:8180                      
      73.  05:8180                      ;
      74.  05:8180                      ; --- Slot 4
      75.  05:8180                      ; mask 40
      76.  05:8180                       DB $04,$01,$1F,$04,$04,$0E,$04,$07
      76.  05:8180  04 01 1F 04 04 0E 04 07 
      77.  05:8188                       DB $05,$06,$06,$07,$10,$00,$10,$1C
      77.  05:8188  05 06 06 07 10 00 10 1C 
      78.  05:8190                       DB $80,$00,$E0,$00,$00,$00,$80,$80
      78.  05:8190  80 00 E0 00 00 00 80 80 
      79.  05:8198                       DB $00,$00,$00,$40,$20,$40,$00,$C0
      79.  05:8198  00 00 00 40 20 40 00 C0 
      80.  05:81A0                      ; mask 41
      81.  05:81A0                       DB $0C,$11,$00,$1F,$08,$00,$01,$08
      81.  05:81A0  0C 11 00 1F 08 00 01 08 
      82.  05:81A8                       DB $05,$06,$06,$08,$0F,$09,$2C,$00
      82.  05:81A8  05 06 06 08 0F 09 2C 00 
      83.  05:81B0                       DB $C0,$00,$00,$F0,$00,$A0,$20,$40
      83.  05:81B0  C0 00 00 F0 00 A0 20 40 
      84.  05:81B8                       DB $40,$40,$80,$A0,$C0,$80,$C0,$00
      84.  05:81B8  40 40 80 A0 C0 80 C0 00 
      85.  05:81C0                      ; mask 42
      86.  05:81C0                       DB $07,$0F,$00,$00,$1B,$01,$0B,$08
      86.  05:81C0  07 0F 00 00 1B 01 0B 08 
      87.  05:81C8                       DB $0F,$09,$0F,$00,$00,$16,$03,$00
      87.  05:81C8  0F 09 0F 00 00 16 03 00 
      88.  05:81D0                       DB $A0,$E0,$00,$00,$F0,$F0,$60,$60
      88.  05:81D0  A0 E0 00 00 F0 F0 60 60 
      89.  05:81D8                       DB $A0,$E0,$60,$00,$00,$20,$20,$00
      89.  05:81D8  A0 E0 60 00 00 20 20 00 
      90.  05:81E0                      
      91.  05:81E0                      ;
      92.  05:81E0                      ; --- Slot 5
      93.  05:81E0                      ; mask 50
      94.  05:81E0                       DB $04,$01,$1F,$04,$04,$0E,$04,$07
      94.  05:81E0  04 01 1F 04 04 0E 04 07 
      95.  05:81E8                       DB $02,$00,$04,$11,$11,$06,$09,$0F
      95.  05:81E8  02 00 04 11 11 06 09 0F 
      96.  05:81F0                       DB $80,$00,$E0,$00,$00,$00,$80,$80
      96.  05:81F0  80 00 E0 00 00 00 80 80 
      97.  05:81F8                       DB $00,$20,$00,$80,$80,$20,$00,$E0
      97.  05:81F8  00 20 00 80 80 20 00 E0 
      98.  05:8200                      ; mask 51
      99.  05:8200                       DB $0C,$11,$00,$1F,$08,$00,$01,$08
      99.  05:8200  0C 11 00 1F 08 00 01 08 
     100.  05:8208                       DB $05,$02,$03,$06,$1F,$09,$14,$00
     100.  05:8208  05 02 03 06 1F 09 14 00 
     101.  05:8210                       DB $C0,$00,$00,$F0,$00,$A0,$20,$40
     101.  05:8210  C0 00 00 F0 00 A0 20 40 
     102.  05:8218                       DB $00,$E0,$80,$40,$E0,$C0,$C0,$00
     102.  05:8218  00 E0 80 40 E0 C0 C0 00 
     103.  05:8220                      ; mask 52
     104.  05:8220                       DB $07,$0F,$00,$00,$1B,$01,$0B,$08
     104.  05:8220  07 0F 00 00 1B 01 0B 08 
     105.  05:8228                       DB $0D,$0D,$08,$08,$00,$00,$02,$00
     105.  05:8228  0D 0D 08 08 00 00 02 00 
     106.  05:8230                       DB $A0,$E0,$00,$00,$F0,$F0,$60,$60
     106.  05:8230  A0 E0 00 00 F0 F0 60 60 
     107.  05:8238                       DB $E0,$00,$60,$20,$00,$00,$20,$00
     107.  05:8238  E0 00 60 20 00 00 20 00 
     108.  05:8240                      
     109.  05:8240                      .ATRIBUTOS
     110.  05:8240                      ; attr 00
     111.  05:8240                       DB $0C,$0E,$01,$0A,$0C,$0C,$0C,$0C
     111.  05:8240  0C 0E 01 0A 0C 0C 0C 0C 
     112.  05:8248                       DB $0C,$04,$04,$0C,$08,$04,$04,$01
     112.  05:8248  0C 04 04 0C 08 04 04 01 
     113.  05:8250                      ; attr 01
     114.  05:8250                       DB $42,$41,$00,$41,$4A,$4A,$4A,$4A
     114.  05:8250  42 41 00 41 4A 4A 4A 4A 
     115.  05:8258                       DB $4A,$42,$42,$42,$42,$42,$42,$00
     115.  05:8258  4A 42 42 42 42 42 42 00 
     116.  05:8260                      ; attr 02
     117.  05:8260                       DB $41,$00,$00,$00,$41,$41,$41,$41
     117.  05:8260  41 00 00 00 41 41 41 41 
     118.  05:8268                       DB $41,$41,$41,$41,$41,$41,$41,$00
     118.  05:8268  41 41 41 41 41 41 41 00 
     119.  05:8270                      ; attr 10
     120.  05:8270                       DB $0C,$0C,$01,$0A,$0C,$0C,$0C,$0C
     120.  05:8270  0C 0C 01 0A 0C 0C 0C 0C 
     121.  05:8278                       DB $08,$08,$08,$02,$02,$04,$04,$01
     121.  05:8278  08 08 08 02 02 04 04 01 
     122.  05:8280                      ; attr 11
     123.  05:8280                       DB $42,$42,$00,$41,$4A,$4A,$4A,$4A
     123.  05:8280  42 42 00 41 4A 4A 4A 4A 
     124.  05:8288                       DB $42,$44,$42,$41,$41,$42,$42,$00
     124.  05:8288  42 44 42 41 41 42 42 00 
     125.  05:8290                      ; attr 12
     126.  05:8290                       DB $41,$41,$00,$00,$41,$41,$41,$41
     126.  05:8290  41 41 00 00 41 41 41 41 
     127.  05:8298                       DB $41,$42,$41,$00,$00,$41,$41,$00
     127.  05:8298  41 42 41 00 00 41 41 00 
     128.  05:82A0                      ; attr 20
     129.  05:82A0                       DB $0C,$0C,$01,$0A,$0C,$0C,$0C,$0C
     129.  05:82A0  0C 0C 01 0A 0C 0C 0C 0C 
     130.  05:82A8                       DB $0C,$04,$04,$0C,$0A,$02,$04,$01
     130.  05:82A8  0C 04 04 0C 0A 02 04 01 
     131.  05:82B0                      ; attr 21
     132.  05:82B0                       DB $42,$42,$00,$41,$4A,$4A,$4A,$4A
     132.  05:82B0  42 42 00 41 4A 4A 4A 4A 
     133.  05:82B8                       DB $4A,$42,$42,$42,$41,$41,$42,$00
     133.  05:82B8  4A 42 42 42 41 41 42 00 
     134.  05:82C0                      ; attr 22
     135.  05:82C0                       DB $41,$41,$00,$00,$41,$41,$41,$41
     135.  05:82C0  41 41 00 00 41 41 41 41 
     136.  05:82C8                       DB $41,$41,$41,$41,$00,$00,$41,$00
     136.  05:82C8  41 41 41 41 00 00 41 00 
     137.  05:82D0                      ; attr 30
     138.  05:82D0                       DB $0C,$0E,$01,$0A,$0C,$0C,$0C,$0C
     138.  05:82D0  0C 0E 01 0A 0C 0C 0C 0C 
     139.  05:82D8                       DB $0C,$04,$04,$0C,$08,$04,$04,$01
     139.  05:82D8  0C 04 04 0C 08 04 04 01 
     140.  05:82E0                      ; attr 31
     141.  05:82E0                       DB $42,$41,$00,$41,$4A,$4A,$4A,$4A
     141.  05:82E0  42 41 00 41 4A 4A 4A 4A 
     142.  05:82E8                       DB $4A,$42,$42,$42,$42,$42,$42,$00
     142.  05:82E8  4A 42 42 42 42 42 42 00 
     143.  05:82F0                      ; attr 32
     144.  05:82F0                       DB $41,$00,$00,$00,$41,$41,$41,$41
     144.  05:82F0  41 00 00 00 41 41 41 41 
     145.  05:82F8                       DB $41,$41,$41,$41,$41,$41,$41,$00
     145.  05:82F8  41 41 41 41 41 41 41 00 
     146.  05:8300                      ; attr 40
     147.  05:8300                       DB $0C,$0C,$01,$0A,$0C,$0C,$0C,$0C
     147.  05:8300  0C 0C 01 0A 0C 0C 0C 0C 
     148.  05:8308                       DB $08,$08,$08,$02,$02,$04,$04,$01
     148.  05:8308  08 08 08 02 02 04 04 01 
     149.  05:8310                      ; attr 41
     150.  05:8310                       DB $42,$42,$00,$41,$4A,$4A,$4A,$4A
     150.  05:8310  42 42 00 41 4A 4A 4A 4A 
     151.  05:8318                       DB $42,$44,$42,$41,$41,$42,$42,$00
     151.  05:8318  42 44 42 41 41 42 42 00 
     152.  05:8320                      ; attr 42
     153.  05:8320                       DB $41,$41,$00,$00,$41,$41,$41,$41
     153.  05:8320  41 41 00 00 41 41 41 41 
     154.  05:8328                       DB $41,$42,$41,$00,$00,$41,$41,$00
     154.  05:8328  41 42 41 00 00 41 41 00 
     155.  05:8330                      ; attr 50
     156.  05:8330                       DB $0C,$0C,$01,$0A,$0C,$0C,$0C,$0C
     156.  05:8330  0C 0C 01 0A 0C 0C 0C 0C 
     157.  05:8338                       DB $0C,$04,$04,$0C,$0A,$02,$04,$01
     157.  05:8338  0C 04 04 0C 0A 02 04 01 
     158.  05:8340                      ; attr 51
     159.  05:8340                       DB $42,$42,$00,$41,$4A,$4A,$4A,$4A
     159.  05:8340  42 42 00 41 4A 4A 4A 4A 
     160.  05:8348                       DB $4A,$42,$42,$42,$41,$41,$42,$00
     160.  05:8348  4A 42 42 42 41 41 42 00 
     161.  05:8350                      ; attr 52
     162.  05:8350                       DB $41,$41,$00,$00,$41,$41,$41,$41
     162.  05:8350  41 41 00 00 41 41 41 41 
     163.  05:8358                       DB $41,$41,$41,$41,$00,$00,$41,$00
     163.  05:8358  41 41 41 41 00 00 41 00 
     164.  05:8360                      
     165.  05:8360                      	
     773   05:8360                      FINISH:
     774   05:8360                      
     775   05:8360                      ;---------------------------------------------------------
     776   05:8360                      ; Variables
     777   05:8360                      ;---------------------------------------------------------
     778   05:8360                      
     779   05:8360                      
     780   05:8360                      	
     781   05:8360  (C000)              	MAP 0xC000
     782   05:8360  (05:C000)           slotvar				#1
     783   05:8360  (05:C001)           slotram				#1
     784   05:8360  (05:C002)           SEL_NTSC			#1
     785   05:8360                      
     786   05:8360  (05:C003)           joystick			#1
     787   05:8360                      
     788   05:8360  (05:C004)           _mcdx				#1
     789   05:8360  (05:C005)           _mcdy				#1
     790   05:8360  (05:C006)           _mcx				#2
     791   05:8360  (05:C008)           _mcy				#2
     792   05:8360                      
     793   05:8360  (05:C00A)           _mclx				#2
     794   05:8360  (05:C00C)           _mcly				#2
     795   05:8360                      
     796   05:8360  (05:C00E)           _mcframe			#1
     797   05:8360  (05:C00F)           _mcstate			#1
     798   05:8360                      
     799   05:8360  (05:C010)           _mcprobe:			#1
     800   05:8360  (05:C011)           _mcprobeb:			#1
     801   05:8360                      
     802   05:8360  (05:C012)           _ticxframe			#1
     803   05:8360                      
     804   05:8360  (05:C013)           _buffer:			#16
     805   05:8360  (05:C023)           _fps:				#2
     806   05:8360  (05:C025)           _nframes:			#2
     807   05:8360  (05:C027)           _vbit16:			#2
     808   05:8360                      
     809   05:8360  (05:C029)           _ymappos:			#1
     810   05:8360  (05:C02A)           _xmappos:			#2
     811   05:8360                      
     812   05:8360  (05:C02C)           _shadowbuff:		#2
     813   05:8360  (05:C02E)           _currentpage:		#1
     814   05:8360                      
     815   05:8360  (05:C02F)           _shadow0:			#32*24*2
     816   05:8360  (05:C62F)           _shadow1:			#32*24*2
     817   05:8360                      
     818   05:8360  (05:CC2F)           _cur_level_bf:		#mapWidth*mapHeight/2
     819   05:8360                      
     820   05:8360  (05:DC2F)           enemylist:			#enemy*nenemies
     821   05:8360  (0000)              	ENDMAP

    LABELS
-------------------------------------------------
00:00006000 X _bank1
00:00007000   _bank2
00:0000065F X n_tiles
00:00000100   mapWidth
00:00000020   mapHeight
00:0000001C   WinWidth
00:00000010   WinHeight
00:000003C1 X Transp
00:00000000   SolidTile0
00:00000018   SolidTile1
00:000003E6   SolidTile2
00:000004ED   SolidTile3
00:000005CD X SolidTile4
00:00000000   SolidColor0
00:00000001   SolidColor1
00:00000004   SolidColor2
00:00000007   SolidColor3
00:00000008 X SolidColor4
00:00000005 X NSolidColors
00:00000024 X ENASLT
00:00000138   RSLREG
00:0000FCC1   EXPTBL
00:00004010   search_slot
00:0000402F   search_slotram
00:00004050   search_slotram0
00:00004055 X setrompage0
00:0000405B   setrompage2
00:00004061   setrampage2
00:00004067 X setrompage3
00:0000406D X setrampage3
00:00004073 X recbios
00:00004076   setslotpage0
00:000040AD X setslotpage1
00:000040EC   setslotpage2
00:00004133   setslotpage3
00:0000000C X rdslt
00:0000001C X CALSLT
00:00000180   chgcpu
00:0000FCC1 X exttbl
00:00008000   _levelmap
00:00004172   _set_r800
00:00004193   set_turbo_tr
00:0000419B   checkkbd
00:000041A6   plot_frame
00:00004223   START
00:0000423B   _ntsc
00:0000436C   main_loop
00:000043CD   up
00:000043E0   dwn
00:000043F1   right
00:00004409   left
00:0000FC9E   JIFFY
00:00004422   _isr
00:00004452   powerup
00:000000D5 X GTSTCK
00:000000D8 X GTTRIG
00:0000445B   _cursors
00:0000445B X _cursors.rd_joy
00:00004469 X _cursors.rd_key
00:00000099   vdpport1
00:0000009A   vdpport2
00:000044B3   levelcolors
00:000044D3   _SetPalet
00:000044E5   _vuitpakker
00:0000451D   _literal
00:00004522   __loop
00:0000452B X _getlen
00:00004531   lus
00:0000454E   lenok
00:0000455B   _mode7
00:00004561   _mode6
00:00004567   _mode5
00:0000456D   _mode4
00:00004573   _mode3
00:00004579   _mode2
00:00004589   offsok
00:00004594   _loop
00:000045AA   _getbit
00:000045AE   _getbitexx
00:000045B4   Depack_out
00:000045B6   setVwrite
00:000045C2   setVread
00:000045D0   __modes
00:000045DE   plot_tile
00:000045F1   plot_foreground
00:00000005 S counter
00:0000462D   plot_trasp_tile
00:00004645   vdp_conf
00:00004692   plot_solid_box
00:000046CC   _clean_buffs
00:000046DA   _vdpsetvramwr
00:000046F4   _vdpsetvramrd
00:0000470E   _setpage
00:0000005F   chgmod
00:0000000C X RDSLT
00:00000156 X KILBUF
00:0000471F   _scr
00:00004724   _waitvdp
00:0000473C   _print_probe
00:0000478C   _print_fps
00:000047AE   _compute_fps
00:000047B5   int2ascii
00:000047B8 X Num2asc
00:000047D1   Num1
00:000047D3   Num2
00:000047DC   _metatable
00:00005A94   _backmap
00:00000008   nenemies
00:00000080   sprite_size
00:00000000 X enemy.type
00:00000001 X enemy.state
00:00000002   enemy.frame
00:00000003   enemy.x
00:00000005   enemy.y
00:00000007   enemy.mappos
00:00000009   enemy.dx
00:0000000B X enemy.dy
00:0000000D   enemy.nx
00:0000000E   enemy.ny
00:0000000F   enemy.buf
00:0000008F   enemy
06:00008000   frames
00:00005E94 X int_sprites
00:00005EBE X move_sprites
00:00005ED7 X save_background
00:00005EFA X plot_sprite
00:00005F11 X restore_background
00:00005F18   plot_sprtite_frame
00:00005F33   _hw_sprite_init
00:00005F92   hwsprt_test
00:00005FAC   enemies_LMMM
00:00006040   state0
00:00006044 X state1
00:00006048 X state2
00:0000604C X state3
00:00006050   probe_level
01:00008000   _frame
01:00008951   _mc_sprites
02:00008000   _tiles0
03:00008000   _tiles1
04:00008000   _level
04:00008A2C   _level_bf
05:00008000 X sprtdata
05:00008000   sprtdata.SPRITES
05:00008240   sprtdata.ATRIBUTOS
05:00008360 X FINISH
05:0000C000   slotvar
05:0000C001   slotram
05:0000C002   SEL_NTSC
05:0000C003   joystick
05:0000C004   _mcdx
05:0000C005 X _mcdy
05:0000C006   _mcx
05:0000C008   _mcy
05:0000C00A   _mclx
05:0000C00C   _mcly
05:0000C00E   _mcframe
05:0000C00F   _mcstate
05:0000C010   _mcprobe
05:0000C011   _mcprobeb
05:0000C012   _ticxframe
05:0000C013   _buffer
05:0000C023   _fps
05:0000C025   _nframes
05:0000C027   _vbit16
05:0000C029   _ymappos
05:0000C02A   _xmappos
05:0000C02C   _shadowbuff
05:0000C02E   _currentpage
05:0000C02F   _shadow0
05:0000C62F   _shadow1
05:0000CC2F   _cur_level_bf
05:0000DC2F   enemylist


 Output: main.out
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: *  Used: 00000000

    No output

 Output: maneldem.rom
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: 00004000  Used: 0000209E

   Address   Length Align   Label
   00004000    7828         search_slot
   00005E94     522         int_sprites
   0000609E    8034       <empty>

 Page: 01
  Org: 00008000  Size: 00004000  Used: 00000C71

   Address   Length Align   Label
   00008000    3185         _frame
   00008C71   13199       <empty>

 Page: 02
  Org: 00008000  Size: 00004000  Used: 00003365

   Address   Length Align   Label
   00008000   13157         _tiles0
   0000B365    3227       <empty>

 Page: 03
  Org: 00008000  Size: 00004000  Used: 00002A4F

   Address   Length Align   Label
   00008000   10831         _tiles1
   0000AA4F    5553       <empty>

 Page: 04
  Org: 00008000  Size: 00004000  Used: 00001A2C

   Address   Length Align   Label
   00008000    6700         _level
   00009A2C    9684       <empty>

 Page: 05
  Org: 00008000  Size: 00004000  Used: 00000360

   Address   Length Align   Label
   00008000     864         sprtdata
   00008360   15520       <empty>

 Page: 06
  Org: 00008000  Size: 00004000  Used: 00003F8C

   Address   Length Align   Label
   00008000   16268         frames
   0000BF8C     116       <empty>

 Page: 07
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 08
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 09
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0A
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0B
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0C
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0D
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0E
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0F
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>
