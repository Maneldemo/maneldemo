Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2015.02.28 - 16:00:18]

main.asm
Errors: 0

       1   00:0000                      ;----------------------------------------------------------------------------
       2   00:0000                      ;----------------------------------------------------------------------------
       3   00:0000                      
       4   00:0000                              output "maneldem.rom"
       5   00:0000                      
       6   00:0000                      		defpage	0,0x4000, 0x4000		; page 0 main code + far call routines
       7   00:0000                      		defpage	1,0x8000, 0x4000		; swapped data 
       8   00:0000                      		defpage	2..15
       9   00:0000                      	
      10   00:0000  (00:6000)           _bank1	equ	0x6000
      11   00:0000  (00:7000)           _bank2	equ	0x7000
      12   00:0000                      		
      13   00:0000  (00)                		page 0
      14   00:4000                      		
      15   00:4000                              org 4000h
      16   00:4000                              dw  4241h,START,0,0,0,0,0,0
      16   00:4000  41 42 F3 41 00 00 00 00 00 00 00 00 00 00 00 00 
      17   00:4010                      
      18   00:4010                      
      19   00:4010                      		include "header.asm"
       1.  00:4010  (00:037C)           n_tiles: equ 892
       2.  00:4010  (00:0100)           mapWidth:	equ	256
       3.  00:4010  (00:0010)           mapHeight:	equ	 16
       4.  00:4010  (00:001C)           WinWidth:	equ	 28
       5.  00:4010  (00:0010)           WinHeight:	equ	 16
       6.  00:4010  (00:0000)           Transp:	equ	  0
       7.  00:4010  (00:0340)           SolidTile:	equ	832
       8.  00:4010  (00:0007)           SolidColor:	equ	  7
      20   00:4010                      	
      21   00:4010                      		include "rominit64.asm"
       1.  00:4010                      
       2.  00:4010                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       3.  00:4010                      ; set pages and subslot
       4.  00:4010                      ;
       5.  00:4010                      
       6.  00:4010                      
       7.  00:4010  (00:0024)           ENASLT:			equ		024h
       8.  00:4010  (00:0138)           RSLREG:			equ		0138h
       9.  00:4010  (00:FCC1)           EXPTBL:			equ		0FCC1h	; Bios Slot / Expansion Slot
      10.  00:4010                      
      11.  00:4010                      
      12.  00:4010                      ; ----------------------------
      13.  00:4010                      ; pre-set main slot for page 3
      14.  00:4010                      ; and set sub-slot for page 3
      15.  00:4010                      ; ----------------------------
      16.  00:4010                      	macro	mainslot_setup n
      17.  00:4010                    < 	and		3
      18.  00:4010                    < [2]	rrca
      19.  00:4010                    < 	and		0xC0
      20.  00:4010                    < 	ld		c,a
      21.  00:4010                    < 	ld		a,d
      22.  00:4010                    < 	and		0x3F
      23.  00:4010                    < 	or		c
      24.  00:4010                    < 	ld		c,a					; Primary slot value with main slot in page 3
      25.  00:4010                    < 
      26.  00:4010                    < 	ld		a,b
      27.  00:4010                    < 	and		0x0C
      28.  00:4010                    < [2]	rrca
      29.  00:4010                    < 	and		3
      30.  00:4010                    < 	ld		b,a					; B = Expanded slot in page 3
      31.  00:4010                    < 	ld		a,c
      32.  00:4010                    < 	out		(0A8h),a			; Slot : Main Slot, xx, xx, Main slot
      33.  00:4010                    < 	ld		a,(0FFFFh)
      34.  00:4010                    < 	cpl
      35.  00:4010                    < 	if (n<=4)
      36.  00:4010                    < [n]	RLCA
      37.  00:4010                    < 	else
      38.  00:4010                    < [8-n] RRCA	
      39.  00:4010                    < 	endif
      40.  00:4010                    < 	and		0xFC
      41.  00:4010                    < 	or		b
      42.  00:4010                    < 	if (n<=4)
      43.  00:4010                    < [n]	RRCA
      44.  00:4010                    < 	else
      45.  00:4010                    < [8-n] RLCA
      46.  00:4010                    < 	endif
      47.  00:4010                    < 	ld		(0FFFFh),a		; Expanded slot selected
      48.  00:4010                    < 	ld		b,a				; save for later	
      49.  00:4010                    < 	endmacro
      50.  00:4010                      		
      51.  00:4010                      
      52.  00:4010                      ; ------------------------------
      53.  00:4010                      ; SEARCH_SLOT
      54.  00:4010                      ; look for the slot of our rom
      55.  00:4010                      ; active in page 1
      56.  00:4010                      ; ------------------------------
      57.  00:4010                      
      58.  00:4010                      search_slot:
      59.  00:4010  CD 38 01            	call	RSLREG
      60.  00:4013  0F 0F               [2]	rrca
      61.  00:4015  E6 03               	and		3
      62.  00:4017  4F                  	ld		c,a
      63.  00:4018  06 00               	ld		b,0
      64.  00:401A  21 C1 FC            	ld		hl,EXPTBL
      65.  00:401D  09                  	add		hl,bc
      66.  00:401E  7E                  	ld		a,(hl)
      67.  00:401F  E6 80               	and		080h
      68.  00:4021  B1                  	or		c
      69.  00:4022  4F                  	ld		c,a
      70.  00:4023  23 23 23 23         [4]	inc		hl
      71.  00:4027  7E                  	ld		a,(hl)
      72.  00:4028  E6 0C               	and		0Ch
      73.  00:402A  B1                  	or		c
      74.  00:402B  32 00 C0            	ld		(slotvar),a
      75.  00:402E  C9                  	ret
      76.  00:402F                      	
      77.  00:402F                      ; ------------------------------
      78.  00:402F                      ; look for the slot of ram
      79.  00:402F                      ; active in page 3
      80.  00:402F                      ; ------------------------------
      81.  00:402F                      
      82.  00:402F                      search_slotram:
      83.  00:402F  F3                  	di
      84.  00:4030  CD 38 01            	call	RSLREG
      85.  00:4033  07 07               [2]	rlca
      86.  00:4035  E6 03               	and		3
      87.  00:4037  4F                  	ld		c,a
      88.  00:4038  06 00               	ld		b,0
      89.  00:403A  21 C1 FC            	ld		hl,EXPTBL
      90.  00:403D  09                  	add		hl,bc
      91.  00:403E  7E                  	ld		a,(hl)
      92.  00:403F  E6 80               	and		080h
      93.  00:4041  28 0D               	jr		z,search_slotram0
      94.  00:4043  B1                  	or		c
      95.  00:4044  4F                  	ld		c,a
      96.  00:4045  23 23 23 23         [4]	inc		hl
      97.  00:4049  7E                  	ld		a,(hl)
      98.  00:404A  07 07 07 07         [4]	rlca
      99.  00:404E  E6 0C               	and		0Ch
     100.  00:4050                      search_slotram0:
     101.  00:4050  B1                  	or		c
     102.  00:4051  32 01 C0            	ld		(slotram),a
     103.  00:4054  C9                  	ret
     104.  00:4055                      	
     105.  00:4055                      ; ------------------------------
     106.  00:4055                      ; SETROMPAGE0
     107.  00:4055                      ; Set the chart in
     108.  00:4055                      ; Page 0
     109.  00:4055                      ; -----------------------------
     110.  00:4055                      
     111.  00:4055                      setrompage0:
     112.  00:4055  3A 00 C0            	ld		a,(slotvar)
     113.  00:4058  C3 76 40            	jp		setslotpage0
     114.  00:405B                      
     115.  00:405B                      setrompage2:
     116.  00:405B  3A 00 C0            	ld		a,(slotvar)
     117.  00:405E  C3 EC 40            	jp		setslotpage2
     118.  00:4061                      
     119.  00:4061                      setrampage2:
     120.  00:4061  3A 01 C0            	ld		a,(slotram)
     121.  00:4064  C3 EC 40            	jp		setslotpage2
     122.  00:4067                      	
     123.  00:4067                      setrompage3:
     124.  00:4067  3A 00 C0            	ld		a,(slotvar)
     125.  00:406A  C3 33 41            	jp		setslotpage3
     126.  00:406D                      
     127.  00:406D                      setrampage3:
     128.  00:406D  3A 01 C0            	ld		a,(slotram)
     129.  00:4070  C3 33 41            	jp		setslotpage3
     130.  00:4073                      	
     131.  00:4073                      ; ------------------------------
     132.  00:4073                      ; RECBIOS
     133.  00:4073                      ; set the bios ROM
     134.  00:4073                      ; -------------------------------
     135.  00:4073                      recbios:
     136.  00:4073  3A C1 FC            	ld		a,(EXPTBL)
     137.  00:4076                      
     138.  00:4076                      ; ---------------------------
     139.  00:4076                      ; SETSLOTPAGE0
     140.  00:4076                      ; Set the slot passed in A
     141.  00:4076                      ; at page 0 in the Z80 address space
     142.  00:4076                      ; A: Format FxxxSSPP
     143.  00:4076                      ; ----------------------------
     144.  00:4076                      
     145.  00:4076                      setslotpage0:
     146.  00:4076  F3                  	di
     147.  00:4077  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     148.  00:4078  DB A8               	in		a,(0A8h)
     149.  00:407A  E6 FC               	and		0xFC
     150.  00:407C  57                  	ld		d,a					; D = Primary slot value
     151.  00:407D  78                  	ld		a,b
     152.  00:407E  E6 03               	and		3
     153.  00:4080  B2                  	or		d
     154.  00:4081  57                  	ld		d,a		; D = Final Value for primary slot
     155.  00:4082  78                  	ld		a,b		; Check if expanded
     156.  00:4083  CB 7F               	bit		7,a
     157.  00:4085  28 22               	jr		z,1f	; Not Expanded
     158.  00:4087                      	mainslot_setup	0
     158.  00:4087  E6 03             >  and  3
     158.  00:4089  0F 0F             > [2] rrca
     158.  00:408B  E6 C0             >  and  0xC0
     158.  00:408D  4F                >  ld  c,a
     158.  00:408E  7A                >  ld  a,d
     158.  00:408F  E6 3F             >  and  0x3F
     158.  00:4091  B1                >  or  c
     158.  00:4092  4F                >  ld  c,a
     158.  00:4093                    > 
     158.  00:4093  78                >  ld  a,b
     158.  00:4094  E6 0C             >  and  0x0C
     158.  00:4096  0F 0F             > [2] rrca
     158.  00:4098  E6 03             >  and  3
     158.  00:409A  47                >  ld  b,a
     158.  00:409B  79                >  ld  a,c
     158.  00:409C  D3 A8             >  out  (0A8h),a
     158.  00:409E  3A FF FF          >  ld  a,(0FFFFh)
     158.  00:40A1  2F                >  cpl
     158.  00:40A2                    >  if (n<=4)
     158.  00:40A2                    > [n] RLCA
     158.  00:40A2                    >  else
     158.  00:40A2                    ~ [8-n] RRCA
     158.  00:40A2                    ~  endif
     158.  00:40A2  E6 FC             >  and  0xFC
     158.  00:40A4  B0                >  or  b
     158.  00:40A5                    >  if (n<=4)
     158.  00:40A5                    > [n] RRCA
     158.  00:40A5                    >  else
     158.  00:40A5                    ~ [8-n] RLCA
     158.  00:40A5                    ~  endif
     158.  00:40A5  32 FF FF          >  ld  (0FFFFh),a
     158.  00:40A8  47                >  ld  b,a
     159.  00:40A9  7A                  1:	ld		a,d				; A = Final value
     160.  00:40AA  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     161.  00:40AC  C9                  	ret
     162.  00:40AD                      
     163.  00:40AD                      ; ---------------------------
     164.  00:40AD                      ; SETSLOTPAGE1
     165.  00:40AD                      ; Set the slot passed in A
     166.  00:40AD                      ; at page 1 in the Z80 address space
     167.  00:40AD                      ; A: Format FxxxSSPP
     168.  00:40AD                      ; ----------------------------
     169.  00:40AD                      
     170.  00:40AD                      setslotpage1:
     171.  00:40AD  F3                  	di
     172.  00:40AE  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     173.  00:40AF  DB A8               	in		a,(0A8h)
     174.  00:40B1  0F 0F               [2]	RRCA
     175.  00:40B3  E6 FC               	and		0xFC
     176.  00:40B5  57                  	ld		d,a					; D = Primary slot value
     177.  00:40B6  78                  	ld		a,b
     178.  00:40B7  E6 03               	and		3
     179.  00:40B9  B2                  	or		d
     180.  00:40BA  07 07               [2]	RLCA
     181.  00:40BC  57                  	ld		d,a		; D = Final Value for primary slot
     182.  00:40BD  78                  	ld		a,b		; Check if expanded
     183.  00:40BE  CB 7F               	bit		7,a
     184.  00:40C0  28 26               	jr		z,1f	; Not Expanded
     185.  00:40C2                      	mainslot_setup	6
     185.  00:40C2  E6 03             >  and  3
     185.  00:40C4  0F 0F             > [2] rrca
     185.  00:40C6  E6 C0             >  and  0xC0
     185.  00:40C8  4F                >  ld  c,a
     185.  00:40C9  7A                >  ld  a,d
     185.  00:40CA  E6 3F             >  and  0x3F
     185.  00:40CC  B1                >  or  c
     185.  00:40CD  4F                >  ld  c,a
     185.  00:40CE                    > 
     185.  00:40CE  78                >  ld  a,b
     185.  00:40CF  E6 0C             >  and  0x0C
     185.  00:40D1  0F 0F             > [2] rrca
     185.  00:40D3  E6 03             >  and  3
     185.  00:40D5  47                >  ld  b,a
     185.  00:40D6  79                >  ld  a,c
     185.  00:40D7  D3 A8             >  out  (0A8h),a
     185.  00:40D9  3A FF FF          >  ld  a,(0FFFFh)
     185.  00:40DC  2F                >  cpl
     185.  00:40DD                    >  if (n<=4)
     185.  00:40DD                    ~ [n] RLCA
     185.  00:40DD                    ~  else
     185.  00:40DD  0F 0F             > [8-n] RRCA
     185.  00:40DF                    >  endif
     185.  00:40DF  E6 FC             >  and  0xFC
     185.  00:40E1  B0                >  or  b
     185.  00:40E2                    >  if (n<=4)
     185.  00:40E2                    ~ [n] RRCA
     185.  00:40E2                    ~  else
     185.  00:40E2  07 07             > [8-n] RLCA
     185.  00:40E4                    >  endif
     185.  00:40E4  32 FF FF          >  ld  (0FFFFh),a
     185.  00:40E7  47                >  ld  b,a
     186.  00:40E8  7A                  1:	ld		a,d				; A = Final value
     187.  00:40E9  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     188.  00:40EB  C9                  	ret
     189.  00:40EC                      	
     190.  00:40EC                      
     191.  00:40EC                      ; ---------------------------
     192.  00:40EC                      ; SETSLOTPAGE2
     193.  00:40EC                      ; Set the slot passed in A
     194.  00:40EC                      ; at page 2 in the Z80 address space
     195.  00:40EC                      ; A: Format FxxxSSPP
     196.  00:40EC                      ; ----------------------------
     197.  00:40EC                      
     198.  00:40EC                      setslotpage2:
     199.  00:40EC  F3                  	di
     200.  00:40ED  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     201.  00:40EE  DB A8               	in		a,(0A8h)
     202.  00:40F0  07 07 07 07         [4]	RLCA
     203.  00:40F4  E6 FC               	and		0xFC
     204.  00:40F6  57                  	ld		d,a					; D = Primary slot value
     205.  00:40F7  78                  	ld		a,b
     206.  00:40F8  E6 03               	and		3
     207.  00:40FA  B2                  	or		d
     208.  00:40FB  0F 0F 0F 0F         [4]	RRCA
     209.  00:40FF  57                  	ld		d,a		; D = Final Value for primary slot
     210.  00:4100  78                  	ld		a,b		; Check if expanded
     211.  00:4101  CB 7F               	bit		7,a
     212.  00:4103  28 2A               	jr		z,1f	; Not Expanded
     213.  00:4105                      	mainslot_setup	4
     213.  00:4105  E6 03             >  and  3
     213.  00:4107  0F 0F             > [2] rrca
     213.  00:4109  E6 C0             >  and  0xC0
     213.  00:410B  4F                >  ld  c,a
     213.  00:410C  7A                >  ld  a,d
     213.  00:410D  E6 3F             >  and  0x3F
     213.  00:410F  B1                >  or  c
     213.  00:4110  4F                >  ld  c,a
     213.  00:4111                    > 
     213.  00:4111  78                >  ld  a,b
     213.  00:4112  E6 0C             >  and  0x0C
     213.  00:4114  0F 0F             > [2] rrca
     213.  00:4116  E6 03             >  and  3
     213.  00:4118  47                >  ld  b,a
     213.  00:4119  79                >  ld  a,c
     213.  00:411A  D3 A8             >  out  (0A8h),a
     213.  00:411C  3A FF FF          >  ld  a,(0FFFFh)
     213.  00:411F  2F                >  cpl
     213.  00:4120                    >  if (n<=4)
     213.  00:4120  07 07 07 07       > [n] RLCA
     213.  00:4124                    >  else
     213.  00:4124                    ~ [8-n] RRCA
     213.  00:4124                    ~  endif
     213.  00:4124  E6 FC             >  and  0xFC
     213.  00:4126  B0                >  or  b
     213.  00:4127                    >  if (n<=4)
     213.  00:4127  0F 0F 0F 0F       > [n] RRCA
     213.  00:412B                    >  else
     213.  00:412B                    ~ [8-n] RLCA
     213.  00:412B                    ~  endif
     213.  00:412B  32 FF FF          >  ld  (0FFFFh),a
     213.  00:412E  47                >  ld  b,a
     214.  00:412F  7A                  1:	ld		a,d				; A = Final value
     215.  00:4130  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     216.  00:4132  C9                  	ret
     217.  00:4133                      	
     218.  00:4133                      ; ---------------------------
     219.  00:4133                      ; SETSLOTPAGE3
     220.  00:4133                      ; Set the slot passed in A
     221.  00:4133                      ; at page 3 in the Z80 address space
     222.  00:4133                      ; A: Format FxxxSSPP
     223.  00:4133                      ; ----------------------------
     224.  00:4133                      	
     225.  00:4133                      setslotpage3:
     226.  00:4133  F3                  	di
     227.  00:4134  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     228.  00:4135  DB A8               	in		a,(0A8h)
     229.  00:4137  07 07               [2]	RLCA
     230.  00:4139  E6 FC               	and		0xFC
     231.  00:413B  57                  	ld		d,a					; D = Primary slot value
     232.  00:413C  78                  	ld		a,b
     233.  00:413D  E6 03               	and		3
     234.  00:413F  B2                  	or		d
     235.  00:4140  0F 0F               [2]	RRCA	
     236.  00:4142  57                  	ld		d,a		; D = Final Value for primary slot
     237.  00:4143  78                  	ld		a,b		; Check if expanded
     238.  00:4144  CB 7F               	bit		7,a
     239.  00:4146  28 26               	jr		z,1f	; Not Expanded
     240.  00:4148                      	mainslot_setup	2
     240.  00:4148  E6 03             >  and  3
     240.  00:414A  0F 0F             > [2] rrca
     240.  00:414C  E6 C0             >  and  0xC0
     240.  00:414E  4F                >  ld  c,a
     240.  00:414F  7A                >  ld  a,d
     240.  00:4150  E6 3F             >  and  0x3F
     240.  00:4152  B1                >  or  c
     240.  00:4153  4F                >  ld  c,a
     240.  00:4154                    > 
     240.  00:4154  78                >  ld  a,b
     240.  00:4155  E6 0C             >  and  0x0C
     240.  00:4157  0F 0F             > [2] rrca
     240.  00:4159  E6 03             >  and  3
     240.  00:415B  47                >  ld  b,a
     240.  00:415C  79                >  ld  a,c
     240.  00:415D  D3 A8             >  out  (0A8h),a
     240.  00:415F  3A FF FF          >  ld  a,(0FFFFh)
     240.  00:4162  2F                >  cpl
     240.  00:4163                    >  if (n<=4)
     240.  00:4163  07 07             > [n] RLCA
     240.  00:4165                    >  else
     240.  00:4165                    ~ [8-n] RRCA
     240.  00:4165                    ~  endif
     240.  00:4165  E6 FC             >  and  0xFC
     240.  00:4167  B0                >  or  b
     240.  00:4168                    >  if (n<=4)
     240.  00:4168  0F 0F             > [n] RRCA
     240.  00:416A                    >  else
     240.  00:416A                    ~ [8-n] RLCA
     240.  00:416A                    ~  endif
     240.  00:416A  32 FF FF          >  ld  (0FFFFh),a
     240.  00:416D  47                >  ld  b,a
     241.  00:416E  7A                  1:	ld		a,d				; A = Final value
     242.  00:416F  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     243.  00:4171  C9                  	ret
     244.  00:4172                      
     245.  00:4172                      	
      22   00:4172                      
      23   00:4172  (00:000C)           rdslt	equ	0x000c
      24   00:4172  (00:001C)           CALSLT	equ	0x001c
      25   00:4172  (00:0180)           chgcpu	equ	0x0180	; change cpu mode
      26   00:4172  (00:FCC1)           exttbl	equ	0xfcc1	; main rom slot
      27   00:4172                      
      28   00:4172                      
      29   00:4172                      ; Switch to r800 rom mode
      30   00:4172                      	
      31   00:4172                      _set_r800:
      32   00:4172  DB AA               		in	a,(0aah)
      33   00:4174  E6 F0               		and 011110000B			; upper 4 bits contain info to preserve
      34   00:4176  F6 06               		or	6
      35   00:4178  D3 AA               		out (0aah),a
      36   00:417A  DB A9               		in	a,(0a9h)
      37   00:417C  6F                  		ld	l,a
      38   00:417D                      
      39   00:417D  3A 2D 00            		ld	a,(0x002d)
      40   00:4180  FE 03               		cp	3					; this is a TR
      41   00:4182  7D                  		ld	a,l
      42   00:4183  28 0E               		jr	z,set_turbo_tr
      43   00:4185                      								; this is anything else
      44   00:4185  E6 02               		and	0x02				; CTR
      45   00:4187  C0                  		ret	nz					; if NZ, CTR is not pressed set the turbo
      46   00:4188                      
      47   00:4188  3A 80 01            		ld	A,(chgcpu)
      48   00:418B  FE C3               		cp	0C3h
      49   00:418D  3E 81               		ld	a,81h              ; R800 ROM mode or any other turbo
      50   00:418F  CC 80 01            		call	z,chgcpu
      51   00:4192  C9                  		ret
      52   00:4193                      
      53   00:4193                      set_turbo_tr
      54   00:4193  E6 02               		and	0x02				; CTR
      55   00:4195  C8                  		ret	z					; if Z, CTR is pressed -> do not set the turbo
      56   00:4196  3E 81               		ld	a,81h              	; R800 ROM mode
      57   00:4198  C3 80 01            		jp chgcpu
      58   00:419B                      		
      59   00:419B                      	
      60   00:419B                      checkkbd:
      61   00:419B  DB AA               		in	a,(0aah)
      62   00:419D  E6 F0               		and 011110000B			; upper 4 bits contain info to preserve
      63   00:419F  B3                  		or	e
      64   00:41A0  D3 AA               		out (0aah),a
      65   00:41A2  DB A9               		in	a,(0a9h)
      66   00:41A4  6F                  		ld	l,a
      67   00:41A5  C9                  		ret
      68   00:41A6                      		
      69   00:41A6                      ;-------------------------------------		
      70   00:41A6                      		
      71   00:41A6                      		include plot_frame.asm
       1.  00:41A6                      
       2.  00:41A6                      plot_frame:
       3.  00:41A6  0E 10               		ld		c,WinHeight
       4.  00:41A8                      		
       5.  00:41A8  2A 1B C0            		ld		hl,(_levelmappos)	; pixel scale
       6.  00:41AB                      		repeat 2
       7.  00:41AB                    < 		srl		h
       8.  00:41AB                    < 		rr		l
       9.  00:41AB                    < 		endrepeat
       9.  00:41AB  CB 3C CB 1D CB 3C CB 1D 
      10.  00:41B3  CB 85               		res		0,l
      11.  00:41B5  11 60 CC            		ld		de,_levelmap		; byte scale
      12.  00:41B8  19                  		add		hl,de
      13.  00:41B9  EB                  		ex		de,hl			; de -> levelmap
      14.  00:41BA  21 42 00            		ld		hl,2*32+2		; hl -> screen 
      15.  00:41BD                      		
      16.  00:41BD  06 1C               2:		ld		b,WinWidth
      17.  00:41BF  D5                  		push	de
      18.  00:41C0                      
      19.  00:41C0  D5                  3:		push	de
      20.  00:41C1  E5                  		push	hl
      21.  00:41C2                      		
      22.  00:41C2  EB                  		ex		de,hl
      23.  00:41C3  5E                  		ld		e,(hl)
      24.  00:41C4  23                  		inc		hl
      25.  00:41C5  56                  		ld		d,(hl)		; DE = meta tile
      26.  00:41C6                      		
      27.  00:41C6  EB                  		ex		de,hl
      28.  00:41C7  29 29 29            [3]		add		hl,hl
      29.  00:41CA                      		
      30.  00:41CA  11 9E 46            		ld		de,_metatable
      31.  00:41CD  19                  		add		hl,de
      32.  00:41CE  3A 1B C0            		ld		a,(_levelmappos)
      33.  00:41D1  E6 06               		and		00000110B
      34.  00:41D3  16 00               		ld		d,0
      35.  00:41D5  5F                  		ld		e,a
      36.  00:41D6  19                  		add		hl,de
      37.  00:41D7  5E                  		ld		e,(hl)
      38.  00:41D8  23                  		inc		hl
      39.  00:41D9  56                  		ld		d,(hl)		; DE = tile
      40.  00:41DA                      
      41.  00:41DA  E1                  		pop		hl			; HL = screen position
      42.  00:41DB  E5                  		push	hl
      43.  00:41DC                      
      44.  00:41DC  C5                  		push	bc
      45.  00:41DD  CD 01 45            		call	plot_tile
      46.  00:41E0  C1                  		pop		bc
      47.  00:41E1  E1                  		pop		hl
      48.  00:41E2  D1                  		pop		de
      49.  00:41E3                      		
      50.  00:41E3  23                  		inc		hl			; the screen in WinWidthxWinHeight
      51.  00:41E4                      		
      52.  00:41E4  13 13               [2]		inc		de			; the levelmap is uint
      53.  00:41E6  10 D8               		djnz	3b
      54.  00:41E8                      		
      55.  00:41E8                      		if (WinWidth<32)
      56.  00:41E8  11 04 00            			ld	de,32-WinWidth	; only if WinWidth<32
      57.  00:41EB  19                  			add	hl,de
      58.  00:41EC                      		endif
      59.  00:41EC                      		
      60.  00:41EC  D1                  		pop		de
      61.  00:41ED                      		
      62.  00:41ED  14 14               [2]		inc d				; only if mapWidth=256
      63.  00:41EF                      		
      64.  00:41EF  0D                  		dec		c
      65.  00:41F0  20 CB               		jr	nz,2b
      66.  00:41F2  C9                  		ret
      72   00:41F3                      		
      73   00:41F3                      ;-------------------------------------
      74   00:41F3                      ; Entry point
      75   00:41F3                      ;-------------------------------------
      76   00:41F3                      START:
      77   00:41F3  1E 05                       ld		e,5
      78   00:41F5  CD 31 46            		call	_scr
      79   00:41F8                      
      80   00:41F8  CD 72 41            		call 	_set_r800
      81   00:41FB  CD C1 43                    call    powerup
      82   00:41FE                      
      83   00:41FE  1E 06               		ld e,6
      84   00:4200  CD 9B 41            		call	checkkbd
      85   00:4203  3E 01               		ld	a,1
      86   00:4205  CB 0D               		rrc	l				; shift
      87   00:4207  D2 0B 42            		jp	nc,_ntsc
      88   00:420A  AF                  		xor	a
      89   00:420B  32 02 C0            _ntsc:	ld	(SEL_NTSC),a	; if set NSTC, if reset PAL
      90   00:420E                      		
      91   00:420E  1E 07               		ld	e,7
      92   00:4210  CD 9B 41            		call	checkkbd
      93   00:4213  E6 04               		and	0x04				; ESC
      94   00:4215  CA 6E 52            		jp 	z,_mballon_start
      95   00:4218                      		
      96   00:4218  11 00 00            		ld		de,0
      97   00:421B  4B                  		ld		c,e
      98   00:421C  F3                  		di
      99   00:421D  CD EC 45            		call	_vdpsetvramwr
     100   00:4220  01 00 00            		ld		bc,0x0000
     101   00:4223  AF                  1:		xor		a
     102   00:4224  D3 98               		out		(0x98),a
     103   00:4226  0B                  		dec		bc
     104   00:4227  78                  		ld		a,b
     105   00:4228  B1                  		or		c
     106   00:4229  20 F8               		jr	nz,1b
     107   00:422B                      		
     108   00:422B  F3                  		di
     109   00:422C                      		// border color
     110   00:422C  3E 55               		ld		a,0x55
     111   00:422E  D3 99               		out		(0x99),a
     112   00:4230  3E 87               		ld		a,128+7
     113   00:4232  D3 99               		out		(0x99),a
     114   00:4234                      		
     115   00:4234                      		// Disable sprites + TP
     116   00:4234  3A E7 FF            		ld		a,(0xFFE7)
     117   00:4237  F6 22               		or		2+32
     118   00:4239  32 E7 FF            		ld		(0xFFE7),a
     119   00:423C  D3 99               		out		(0x99),a
     120   00:423E  3E 88               		ld		a,128+8
     121   00:4240  D3 99               		out		(0x99),a
     122   00:4242                      		
     123   00:4242                      		// Set 192 lines @50Hz (PAL assumed!)
     124   00:4242  3A 02 C0            		ld	a,(SEL_NTSC)
     125   00:4245  A7                  		and 	a
     126   00:4246  20 0C               		jr		nz,1f
     127   00:4248                      		
     128   00:4248  3A E8 FF            		ld		a,(0xFFE8)		; PAL
     129   00:424B  E6 7F               		and		127
     130   00:424D  F6 02               		or		2
     131   00:424F  32 E8 FF            		ld		(0xFFE8),a
     132   00:4252  18 0C               		jr	2f
     133   00:4254  3A E8 FF            1:		ld		a,(0xFFE8)		; NTSC
     134   00:4257  E6 7F               		and		127
     135   00:4259  F6 02               		or		2
     136   00:425B  EE 02               		xor		2
     137   00:425D  32 E8 FF            		ld		(0xFFE8),a
     138   00:4260                      2:	
     139   00:4260  D3 99               		out		(0x99),a
     140   00:4262  3E 89               		ld		a,128+9
     141   00:4264  D3 99               		out		(0x99),a
     142   00:4266  FB                  		ei
     143   00:4267                      			
     144   00:4267  3E C3               		LD	A,0xC3
     145   00:4269  21 91 43            		LD	HL,_isr
     146   00:426C  F3                  		DI
     147   00:426D  32 9F FD            		LD	(0xFD9F),A
     148   00:4270  22 A0 FD            		LD	(0xFDA0),HL
     149   00:4273  FB                  		EI
     150   00:4274                      
     151   00:4274  CD DE 45            		call	_clean_buffs
     152   00:4277                      
     153   00:4277  CD F6 43            		call	_SetPalet
     154   00:427A  1E 00               		ld		e,0
     155   00:427C  CD 20 46                    call	_setpage
     156   00:427F                      		
     157   00:427F                      		; unpack level map (meta_tiles)
     158   00:427F  3E 03               		ld	a, :_level
     159   00:4281  32 00 70            		ld	(_bank2),a
     160   00:4284                      		
     161   00:4284  AF                  		xor	a
     162   00:4285  32 19 C0            		ld		(_vbit16 ),a
     163   00:4288  11 00 80            		ld		de,	_level
     164   00:428B  01 00 00            		ld		bc,0
     165   00:428E  CD 08 44            		call	_vuitpakker 
     166   00:4291                      		
     167   00:4291  11 00 00            		ld		de,0
     168   00:4294  4B                  		ld		c,e
     169   00:4295  CD 06 46            		call	_vdpsetvramrd
     170   00:4298  21 60 CC            		ld		hl,_levelmap
     171   00:429B  11 00 20            		ld		de,mapWidth*mapHeight*2
     172   00:429E  0E 98               		ld		c,0x98
     173   00:42A0  ED A2               1:		ini
     174   00:42A2  1B                  		dec	de
     175   00:42A3  7A                  		ld	a,d
     176   00:42A4  B3                  		or	e
     177   00:42A5  20 F9               		jr	nz,1b
     178   00:42A7                      
     179   00:42A7                      		; unpack frame
     180   00:42A7  3E 01               		ld		a, :_frame
     181   00:42A9  32 00 70            		ld		(_bank2),a
     182   00:42AC                      		
     183   00:42AC  AF                  		xor	a
     184   00:42AD  32 19 C0            		ld		(_vbit16 ),a
     185   00:42B0  11 00 80            		ld		de,	_frame
     186   00:42B3  01 00 00            		ld		bc,0
     187   00:42B6  CD 08 44            		call	_vuitpakker 
     188   00:42B9                      
     189   00:42B9  11 00 80            		ld		de,	_frame
     190   00:42BC  01 00 80            		ld		bc,0x8000
     191   00:42BF  CD 08 44            		call	_vuitpakker 
     192   00:42C2                      		
     193   00:42C2  1E 02               		ld		e,2
     194   00:42C4  CD 20 46                    call	_setpage
     195   00:42C7                      
     196   00:42C7                      		; unpack tileset
     197   00:42C7  3E 02               		ld		a, :_tiles
     198   00:42C9  32 00 70            		ld		(_bank2),a
     199   00:42CC                      		
     200   00:42CC  3E 01               		ld		a,1
     201   00:42CE  32 19 C0            		ld		(_vbit16 ),a
     202   00:42D1  11 00 80            		ld		de,	_tiles
     203   00:42D4  01 00 00            		ld		bc,0
     204   00:42D7  CD 08 44            		call	_vuitpakker 
     205   00:42DA                      		
     206   00:42DA  CD 89 52            		call	int_sprites
     207   00:42DD                      
     208   00:42DD                      		; main init
     209   00:42DD                      			
     210   00:42DD  21 00 00            		ld		hl,0
     211   00:42E0  22 1B C0            		ld		(_levelmappos),hl
     212   00:42E3  22 17 C0            		ld		(_nframes),hl
     213   00:42E6  7C                  		ld		a,h
     214   00:42E7  32 1F C0            		ld		(_currentpage),a
     215   00:42EA  32 03 C0            		ld		(_dx),a
     216   00:42ED                      		
     217   00:42ED                      main_loop:
     218   00:42ED  AF                  		xor		a
     219   00:42EE  32 04 C0            		ld		(_ticxframe),a
     220   00:42F1                      
     221   00:42F1  3A 1F C0            		ld		a,(_currentpage)
     222   00:42F4  EE 01               		xor		1
     223   00:42F6  32 1F C0            		ld		(_currentpage),a
     224   00:42F9  EE 01               		xor		1
     225   00:42FB  5F                  		ld		e,a
     226   00:42FC  76                  		halt
     227   00:42FD  CD 20 46                    call	_setpage
     228   00:4300  CB 43               		bit		0,e
     229   00:4302  21 40 C6            		ld		hl,_shadow1
     230   00:4305  20 03               		jr		nz,1f
     231   00:4307  21 20 C0            		ld		hl,_shadow0
     232   00:430A  22 1D C0            1:		ld		(_shadowbuff),hl
     233   00:430D                      
     234   00:430D  DD 21 60 EC         		ld	ix,enemylist
     235   00:4311  CD CC 52            		call save_background
     236   00:4314                      
     237   00:4314  DD 21 60 EC         		ld	ix,enemylist
     238   00:4318  CD EF 52            		call plot_sprite
     239   00:431B                      
     240   00:431B  CD A6 41            		call	plot_frame
     241   00:431E                      
     242   00:431E  DD 21 60 EC         		ld	ix,enemylist
     243   00:4322  CD 06 53            		call restore_background
     244   00:4325                      
     245   00:4325  DD 21 60 EC         		ld	ix,enemylist
     246   00:4329  CD B3 52            		call	move_sprites
     247   00:432C                      		
     248   00:432C  CD 70 46            		call	_compute_fps
     249   00:432F  CD 4E 46            		call	_print_fps
     250   00:4332                      
     251   00:4332  2A 17 C0            		ld		hl,(_nframes)
     252   00:4335  23                  		inc		hl
     253   00:4336  22 17 C0            		ld		(_nframes),hl
     254   00:4339                      
     255   00:4339                      		
     256   00:4339  CD C8 43            		call	_cursors
     257   00:433C  7D                  		ld		a,l
     258   00:433D  FE 01               		cp		1
     259   00:433F  CA 55 43            		jp		z,up
     260   00:4342  FE 03               		cp		3
     261   00:4344  CA 6F 43            		jp		z,right
     262   00:4347  FE 05               		cp		5
     263   00:4349  CA 62 43            		jp		z,dwn
     264   00:434C  FE 07               		cp		7
     265   00:434E  CA 7F 43            		jp		z,left
     266   00:4351                      		
     267   00:4351  C3 ED 42            		jp      main_loop
     268   00:4354                      
     269   00:4354  C9                          ret
     270   00:4355                      
     271   00:4355  2A 1B C0            up:		ld		hl,(_levelmappos)
     272   00:4358  01 00 F8            		ld		bc,-mapWidth*8
     273   00:435B  09                  		add		hl,bc
     274   00:435C  22 1B C0            		ld		(_levelmappos),hl
     275   00:435F  C3 ED 42            		jp      main_loop
     276   00:4362                      
     277   00:4362  2A 1B C0            dwn:	ld		hl,(_levelmappos)
     278   00:4365  01 00 08            		ld		bc,mapWidth*8
     279   00:4368  09                  		add		hl,bc
     280   00:4369  22 1B C0            		ld		(_levelmappos),hl
     281   00:436C  C3 ED 42            		jp      main_loop
     282   00:436F                      		
     283   00:436F  2A 1B C0            right:	ld		hl,(_levelmappos)
     284   00:4372  3A 04 C0            		ld		a,(_ticxframe)
     285   00:4375  4F                  		ld		c,a					; compensate frame rate
     286   00:4376  06 00               		ld		b,0
     287   00:4378  09                  		add		hl,bc
     288   00:4379  22 1B C0            		ld		(_levelmappos),hl
     289   00:437C  C3 ED 42            		jp      main_loop
     290   00:437F                      
     291   00:437F  2A 1B C0            left:	ld		hl,(_levelmappos)
     292   00:4382  3A 04 C0            		ld		a,(_ticxframe)
     293   00:4385  ED 44               		neg
     294   00:4387  4F                  		ld		c,a					; compensate frame rate
     295   00:4388  06 FF               		ld		b,-1
     296   00:438A  09                  		add		hl,bc
     297   00:438B  22 1B C0            		ld		(_levelmappos),hl
     298   00:438E  C3 ED 42            		jp      main_loop
     299   00:4391                      
     300   00:4391                      ;-------------------------------------
     301   00:4391  (00:FC9E)           JIFFY: equ 0xFC9E 
     302   00:4391                      ;-------------------------------------
     303   00:4391  E5                  _isr:	push	hl
     304   00:4392  C5                  		push	bc
     305   00:4393  2A 9E FC            		ld		hl,(JIFFY)
     306   00:4396                      
     307   00:4396  3A 02 C0            		ld	a,(SEL_NTSC)
     308   00:4399  A7                  		and 	a
     309   00:439A  20 05               		jr		nz,1f
     310   00:439C                      		
     311   00:439C  01 CE FF            		ld		bc,-50			; PAL 
     312   00:439F  18 03               		jr	2f
     313   00:43A1                      1:
     314   00:43A1  01 C4 FF            		ld		bc,-60			; NTSC
     315   00:43A4                      		
     316   00:43A4  09                  2:		add		hl,bc
     317   00:43A5  21 04 C0            		ld		hl,_ticxframe
     318   00:43A8  34                  		inc		(hl)
     319   00:43A9  C1                  		pop		bc
     320   00:43AA  E1                  		pop		hl
     321   00:43AB  D0                  		ret	nc
     322   00:43AC                      		
     323   00:43AC  E5                  		push	hl
     324   00:43AD  21 00 00            		ld		hl,0
     325   00:43B0  22 9E FC            		ld		(JIFFY),hl
     326   00:43B3  2A 17 C0            		ld		hl,(_nframes)
     327   00:43B6  22 15 C0            		ld		(_fps),hl
     328   00:43B9  21 00 00            		ld		hl,0
     329   00:43BC  22 17 C0            		ld		(_nframes),hl
     330   00:43BF  E1                  		pop		hl
     331   00:43C0  C9                  		ret
     332   00:43C1                      ;-------------------------------------
     333   00:43C1                      ;   Power-up routine for 32K ROM
     334   00:43C1                      ;   set pages and sub slot
     335   00:43C1                      ;-------------------------------------
     336   00:43C1                      powerup:
     337   00:43C1  CD 10 40                    call    search_slot
     338   00:43C4  CD 5B 40            		call	setrompage2
     339   00:43C7  C9                          ret
     340   00:43C8                      
     341   00:43C8                      ;-------------------------------------
     342   00:43C8                      
     343   00:43C8                      
     344   00:43C8  (00:00D5)           GTSTCK      equ 0x00D5      ;Returns the joystick status
     345   00:43C8  (00:00D8)           GTTRIG      equ 0x00D8      ;Returns current trigger status
     346   00:43C8                      
     347   00:43C8                      
     348   00:43C8                      _cursors:
     349   00:43C8                      
     350   00:43C8  AF                  	xor     a
     351   00:43C9  CD D5 00            	call	GTSTCK
     352   00:43CC  F5                  	push	af		;return the cursors
     353   00:43CD  3E 01               	ld		a,1
     354   00:43CF  CD D5 00            	call	GTSTCK
     355   00:43D2  E1                  	pop		hl		;return the joystick
     356   00:43D3  B4                  	or		h
     357   00:43D4  6F                  	ld		l,a
     358   00:43D5  C9                  	ret
     359   00:43D6                      	
     360   00:43D6                      
     361   00:43D6                      
     362   00:43D6                              
     363   00:43D6                      ;-------------------------------------
     364   00:43D6                      		
     365   00:43D6  (00:0099)           vdpport1 equ 0x99
     366   00:43D6  (00:009A)           vdpport2 equ 0x9A
     367   00:43D6                      
     368   00:43D6                      levelcolors:
     369   00:43D6  (0020)              	incbin "palette.bin"
     370   00:43F6                      
     371   00:43F6                      _SetPalet:   
     372   00:43F6  F3                  	di
     373   00:43F7  AF                  	xor a 			;Set pointer to zero.
     374   00:43F8  D3 99               	out (vdpport1),a        
     375   00:43FA  3E 90               	ld  a,16 | 010000000B
     376   00:43FC  D3 99               	out (vdpport1),a
     377   00:43FE                      
     378   00:43FE  21 D6 43            	ld  hl,levelcolors
     379   00:4401  01 9A 20            	ld bc,vdpport2+32*256
     380   00:4404  ED B3               	otir
     381   00:4406  FB                  	ei
     382   00:4407  C9                  	ret
     383   00:4408                      
     384   00:4408                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     385   00:4408                      
     386   00:4408                      	include vuitpakker.asm
       1.  00:4408                      
       2.  00:4408                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       3.  00:4408                      
       4.  00:4408                      
       5.  00:4408                      _vuitpakker:
       6.  00:4408  FD E5                   push iy
       7.  00:440A  DD E5                   push ix
       8.  00:440C                      
       9.  00:440C  CD 14 44                call  1f
      10.  00:440F                      
      11.  00:440F  DD E1                   pop ix
      12.  00:4411  FD E1                   pop iy
      13.  00:4413  C9                      ret
      14.  00:4414                      
      15.  00:4414                      1:
      16.  00:4414                      ; in de input
      17.  00:4414                      ; in bc VRAM output
      18.  00:4414                      
      19.  00:4414  62                      ld h,d
      20.  00:4415  6B                      ld l,e
      21.  00:4416  50                      ld d,b
      22.  00:4417  59                      ld e,c
      23.  00:4418                      
      24.  00:4418                      ; pletter v0.5 msx unpacker
      25.  00:4418                      
      26.  00:4418                      ;-----------------------------------------------------------
      27.  00:4418                      ; Pletter 0.5b VRAM Depacker - 64Kb version
      28.  00:4418                      ; HL = RAM/ROM source ; DE = VRAM destination
      29.  00:4418                      ;-----------------------------------------------------------
      30.  00:4418  F3                      di
      31.  00:4419                      
      32.  00:4419                      ; VRAM address setup
      33.  00:4419                      ;    ld  a,e
      34.  00:4419                      ;    out (0x99),a
      35.  00:4419                      ;    ld  a,d
      36.  00:4419                      ;    or  0x40
      37.  00:4419                      ;    out (0x99),a
      38.  00:4419  CD D9 44                call setVwrite
      39.  00:441C                      
      40.  00:441C                      ; Initialization
      41.  00:441C  7E                      ld  a,(hl)
      42.  00:441D  23                      inc hl
      43.  00:441E  D9                      exx
      44.  00:441F  11 00 00                ld  de,0
      45.  00:4422  87                      add a,a
      46.  00:4423  3C                      inc a
      47.  00:4424  CB 13                   rl  e
      48.  00:4426  87                      add a,a
      49.  00:4427  CB 13                   rl  e
      50.  00:4429  87                      add a,a
      51.  00:442A  CB 13                   rl  e
      52.  00:442C  CB 13                   rl  e
      53.  00:442E  21 F3 44                ld  hl,__modes
      54.  00:4431  19                      add hl,de
      55.  00:4432  5E                      ld  e,(hl)
      56.  00:4433  DD                      db    0xdd
      57.  00:4434  6B                      ld  l,e         ; ld ixl,e    
      58.  00:4435  23                      inc hl
      59.  00:4436  5E                      ld  e,(hl)
      60.  00:4437  DD                      db    0xdd
      61.  00:4438  63                      ld h,e          ; ld  ixh,e
      62.  00:4439  1E 01                   ld  e,1
      63.  00:443B  D9                      exx
      64.  00:443C  FD 21 45 44             ld  iy,__loop
      65.  00:4440                      
      66.  00:4440                      ; Main depack loop
      67.  00:4440  0E 98               _literal:ld  c,098h
      68.  00:4442  ED A3                   outi
      69.  00:4444  13                      inc de
      70.  00:4445  87                  __loop:   add a,a
      71.  00:4446  CC CD 44                call    z,_getbit
      72.  00:4449  30 F5                   jr  nc,_literal
      73.  00:444B                      
      74.  00:444B                      ; Compressed data
      75.  00:444B  D9                      exx
      76.  00:444C  62                      ld  h,d
      77.  00:444D  6B                      ld  l,e
      78.  00:444E  87                  _getlen: add a,a
      79.  00:444F  CC D1 44                call    z,_getbitexx
      80.  00:4452  30 1D                   jr  nc,lenok
      81.  00:4454  87                  lus:    add a,a
      82.  00:4455  CC D1 44                call    z,_getbitexx
      83.  00:4458  ED 6A                   adc hl,hl
      84.  00:445A  D8                      ret c
      85.  00:445B  87                      add a,a
      86.  00:445C  CC D1 44                call    z,_getbitexx
      87.  00:445F  30 10                   jr  nc,lenok
      88.  00:4461  87                      add a,a
      89.  00:4462  CC D1 44                call    z,_getbitexx
      90.  00:4465  ED 6A                   adc hl,hl
      91.  00:4467  DA D7 44                jp  c,Depack_out
      92.  00:446A  87                      add a,a
      93.  00:446B  CC D1 44                call    z,_getbitexx
      94.  00:446E  DA 54 44                jp  c,lus
      95.  00:4471  23                  lenok:  inc hl
      96.  00:4472  D9                      exx
      97.  00:4473  4E                      ld  c,(hl)
      98.  00:4474  23                      inc hl
      99.  00:4475  06 00                   ld  b,0
     100.  00:4477  CB 79                   bit 7,c
     101.  00:4479  CA AC 44                jp  z,offsok
     102.  00:447C  DD E9                   jp  (ix)
     103.  00:447E                      
     104.  00:447E  87                  _mode7:  add a,a
     105.  00:447F  CC CD 44                call    z,_getbit
     106.  00:4482  CB 10                   rl  b
     107.  00:4484  87                  _mode6:  add a,a
     108.  00:4485  CC CD 44                call    z,_getbit
     109.  00:4488  CB 10                   rl  b
     110.  00:448A  87                  _mode5:  add a,a
     111.  00:448B  CC CD 44                call    z,_getbit
     112.  00:448E  CB 10                   rl  b
     113.  00:4490  87                  _mode4:  add a,a
     114.  00:4491  CC CD 44                call    z,_getbit
     115.  00:4494  CB 10                   rl  b
     116.  00:4496  87                  _mode3:  add a,a
     117.  00:4497  CC CD 44                call    z,_getbit
     118.  00:449A  CB 10                   rl  b
     119.  00:449C  87                  _mode2:  add a,a
     120.  00:449D  CC CD 44                call    z,_getbit
     121.  00:44A0  CB 10                   rl  b
     122.  00:44A2  87                      add a,a
     123.  00:44A3  CC CD 44                call    z,_getbit
     124.  00:44A6  30 04                   jr  nc,offsok
     125.  00:44A8  B7                      or  a
     126.  00:44A9  04                      inc b
     127.  00:44AA  CB B9                   res 7,c
     128.  00:44AC  03                  offsok: inc bc
     129.  00:44AD  E5                      push    hl
     130.  00:44AE  D9                      exx
     131.  00:44AF  E5                      push    hl
     132.  00:44B0  D9                      exx
     133.  00:44B1  6B                      ld  l,e
     134.  00:44B2  62                      ld  h,d
     135.  00:44B3  ED 42                   sbc hl,bc
     136.  00:44B5  C1                      pop bc
     137.  00:44B6  F5                      push    af
     138.  00:44B7                      _loop: 
     139.  00:44B7                      ;    ld  a,l
     140.  00:44B7                      ;    out (0x99),a
     141.  00:44B7                      ;    ld  a,h
     142.  00:44B7                      ;    out (0x99),a
     143.  00:44B7  CD E5 44                call setVread
     144.  00:44BA                          
     145.  00:44BA  DB 98                   in  a,(0x98)
     146.  00:44BC  08                      ex  af,af'
     147.  00:44BD                      ;    ld  a,e
     148.  00:44BD                      ;    out (0x99),a
     149.  00:44BD                      ;    ld  a,d
     150.  00:44BD                      ;    or  0x40
     151.  00:44BD                      ;    out (0x99),a
     152.  00:44BD  CD D9 44                call setVwrite
     153.  00:44C0                          
     154.  00:44C0  08                      ex  af,af'
     155.  00:44C1  D3 98                   out (0x98),a
     156.  00:44C3  13                      inc de
     157.  00:44C4  ED A1                   cpi
     158.  00:44C6  EA B7 44                jp  pe,_loop
     159.  00:44C9  F1                      pop af
     160.  00:44CA  E1                      pop hl
     161.  00:44CB  FD E9                   jp  (iy)
     162.  00:44CD                      ;
     163.  00:44CD  7E                  _getbit: ld  a,(hl)
     164.  00:44CE  23                      inc hl
     165.  00:44CF  17                      rla
     166.  00:44D0  C9                      ret
     167.  00:44D1                      
     168.  00:44D1                      _getbitexx:
     169.  00:44D1  D9                      exx
     170.  00:44D2  7E                      ld  a,(hl)
     171.  00:44D3  23                      inc hl
     172.  00:44D4  D9                      exx
     173.  00:44D5  17                      rla
     174.  00:44D6  C9                      ret
     175.  00:44D7                      
     176.  00:44D7                      ; De-packer exit
     177.  00:44D7                      Depack_out:
     178.  00:44D7  FB                      ei
     179.  00:44D8  C9                      ret
     180.  00:44D9                      
     181.  00:44D9                      
     182.  00:44D9                      
     183.  00:44D9                      setVwrite:
     184.  00:44D9                      
     185.  00:44D9  D5                      push    de
     186.  00:44DA  C5                      push    bc
     187.  00:44DB  ED 4B 19 C0             ld      bc,(_vbit16)
     188.  00:44DF  CD EC 45                call    _vdpsetvramwr
     189.  00:44E2  C1                      pop     bc
     190.  00:44E3  D1                      pop     de
     191.  00:44E4                      
     192.  00:44E4  C9                      ret
     193.  00:44E5                      setVread:    
     194.  00:44E5                      
     195.  00:44E5  D5                      push    de
     196.  00:44E6  C5                      push    bc
     197.  00:44E7  5D                      ld      e,l
     198.  00:44E8  54                      ld      d,h
     199.  00:44E9  ED 4B 19 C0             ld      bc,(_vbit16)
     200.  00:44ED  CD 06 46                call    _vdpsetvramrd
     201.  00:44F0  C1                      pop     bc
     202.  00:44F1  D1                      pop     de
     203.  00:44F2                      
     204.  00:44F2  C9                      ret
     205.  00:44F3                      
     206.  00:44F3                      __modes:
     207.  00:44F3  AC 44                   dw  offsok
     208.  00:44F5  9C 44                   dw  _mode2
     209.  00:44F7  96 44                   dw  _mode3
     210.  00:44F9  90 44                   dw  _mode4
     211.  00:44FB  8A 44                   dw  _mode5
     212.  00:44FD  84 44                   dw  _mode6
     213.  00:44FF  7E 44                   dw  _mode7
     387   00:4501                      
     388   00:4501                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     389   00:4501                      
     390   00:4501                      	include plot_tile.asm
       1.  00:4501                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       2.  00:4501                      ; input
       3.  00:4501                      ; hl  configured in window map 32x24
       4.  00:4501                      ; de  tile to be plot
       5.  00:4501                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       6.  00:4501                      plot_tile:
       7.  00:4501  29                  	add		hl,hl		; now HL is aiming to uints
       8.  00:4502                      
       9.  00:4502  E5                  	push	hl
      10.  00:4503  ED 4B 1D C0         	ld		bc,(_shadowbuff)
      11.  00:4507  09                  	add		hl,bc		; HL = pointer to the shadow map
      12.  00:4508                      	
      13.  00:4508  7E                  	ld		a,(hl)		; Avoid writing the same tile
      14.  00:4509  BB                  	cp		e
      15.  00:450A  20 08               	jr		nz,1f
      16.  00:450C  23                  	inc		hl
      17.  00:450D  7E                  	ld		a,(hl)
      18.  00:450E  BA                  	cp		d
      19.  00:450F  2B                  	dec		hl
      20.  00:4510  20 02               	jr		nz,1f
      21.  00:4512                      
      22.  00:4512  E1                  	pop		hl
      23.  00:4513  C9                  	ret
      24.  00:4514                      	
      25.  00:4514  73                  1:	ld		(hl),e		; rewrite the position with the actual tile in shadowbuffer
      26.  00:4515  23                  	inc		hl
      27.  00:4516  72                  	ld		(hl),d
      28.  00:4517                      	
      29.  00:4517  E1                  	pop		hl			; HL relative position in 32x24*2
      30.  00:4518                      						; DE new 16 tile to be plotted
      31.  00:4518                      						
      32.  00:4518  CB 7A               	bit 	7,d			; test for LMMMM	
      33.  00:451A  C2 3E 45            	jp		nz,plot_trasp_tile
      34.  00:451D                      	
      35.  00:451D  7A                  	ld		a,d
      36.  00:451E  B3                  	or		e
      37.  00:451F  C2 2B 45            	jp		nz,plot_foreground
      38.  00:4522                      
      39.  00:4522                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      40.  00:4522                      ; input
      41.  00:4522                      ; hl  configured in window map 32x24
      42.  00:4522                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      43.  00:4522                      
      44.  00:4522                      ; plot_background:
      45.  00:4522                      
      46.  00:4522  E5                  	push	hl
      47.  00:4523  11 EC 4D            	ld		de,_backmap-32*4-2
      48.  00:4526  19                  	add		hl,de
      49.  00:4527  5E                  	ld		e,(hl)
      50.  00:4528  23                  	inc		hl
      51.  00:4529  56                  	ld		d,(hl)
      52.  00:452A  E1                  	pop		hl
      53.  00:452B                      	
      54.  00:452B                      	
      55.  00:452B                      plot_foreground:
      56.  00:452B  3E 40               	ld	a,low SolidTile
      57.  00:452D  BB                  	cp	e
      58.  00:452E  20 06               	jr	nz,1f
      59.  00:4530  3E 03               	ld	a,high SolidTile
      60.  00:4532  BA                  	cp	d
      61.  00:4533  CA A3 45            	jp	z,plot_solid_box
      62.  00:4536                      
      63.  00:4536  CD 56 45            1:	call 	vdp_conf
      64.  00:4539                      
      65.  00:4539  3E D0               	ld		a,11010000B
      66.  00:453B  D3 9B               	out 	(0x9B), a		; command HMMM
      67.  00:453D  C9                  	ret
      68.  00:453E                      
      69.  00:453E                      	
      70.  00:453E                      	
      71.  00:453E                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      72.  00:453E                      ; input
      73.  00:453E                      ; hl   configured in window map 32x24
      74.  00:453E                      ; de  tile to be plot
      75.  00:453E                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      76.  00:453E                      
      77.  00:453E                      plot_trasp_tile:
      78.  00:453E                      
      79.  00:453E  D5                  	push	de
      80.  00:453F  E5                  	push	hl
      81.  00:4540                      					;	plot_background
      82.  00:4540  11 EC 4D            	ld		de,_backmap-32*4-2
      83.  00:4543  19                  	add		hl,de
      84.  00:4544  5E                  	ld		e,(hl)
      85.  00:4545  23                  	inc		hl
      86.  00:4546  56                  	ld		d,(hl)
      87.  00:4547                      
      88.  00:4547  E1                  	pop		hl
      89.  00:4548  E5                  	push	hl
      90.  00:4549  CD 2B 45            	call	plot_foreground
      91.  00:454C  E1                  	pop		hl
      92.  00:454D  D1                  	pop		de
      93.  00:454E                      
      94.  00:454E  CD 56 45            	call	vdp_conf
      95.  00:4551                      
      96.  00:4551  3E 98               	ld		a,10011000B
      97.  00:4553  D3 9B               	out 	(0x9B), a		; command LMMM
      98.  00:4555  C9                  	ret
      99.  00:4556                      
     100.  00:4556                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     101.  00:4556                      ; input
     102.  00:4556                      ; hl   configured in window map 32x24
     103.  00:4556                      ; de  tile to be plot
     104.  00:4556                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     105.  00:4556                      
     106.  00:4556                      vdp_conf:	
     107.  00:4556                      	
     108.  00:4556  29 29               [2]	add		hl,hl
     109.  00:4558  4D                  	ld		c,l			; C = dx*8
     110.  00:4559  7C                  	ld		a,h
     111.  00:455A  87 87 87            [3]	add		a,a
     112.  00:455D  47                  	ld		b,a			; B = dy*8
     113.  00:455E  C5                  	push	bc			; dx*8 and dy*8 on the stack
     114.  00:455F                      	
     115.  00:455F                      	; de has the 16 bit tile
     116.  00:455F                      	; de = 10 bits = 5 bits for y and 5 bits for x
     117.  00:455F                      
     118.  00:455F  EB                  	ex		de,hl
     119.  00:4560  29 29 29            [3]	add		hl,hl
     120.  00:4563                      	
     121.  00:4563                      	; now l is sx*8 and h is sy
     122.  00:4563                      		
     123.  00:4563  7C                  	ld		a,h
     124.  00:4564  87 87 87            [3]	add		a,a
     125.  00:4567  67                  	ld		h,a
     126.  00:4568  F5                  	push	af
     127.  00:4569                      	
     128.  00:4569                      	; now h is sy*8
     129.  00:4569  F3                  	di
     130.  00:456A  3E 20               	ld 		a, 32
     131.  00:456C  D3 99               	out 	(0x99),a
     132.  00:456E  3E 91               	ld 		a, 17+128
     133.  00:4570  D3 99               	out 	(0x99),a
     134.  00:4572  FB                  	ei
     135.  00:4573                      
     136.  00:4573  0E 9B               	ld 		c, 0x9B
     137.  00:4575                      	
     138.  00:4575  CD 36 46            	call _waitvdp;
     139.  00:4578                      	
     140.  00:4578  ED 69               	out		(c), l 		; sx
     141.  00:457A  AF                  	xor a
     142.  00:457B  D3 9B               	out		(0x9B), a 	; sx (high)
     143.  00:457D                      	
     144.  00:457D  ED 61               	out		(c), h 		; sy
     145.  00:457F  F1                  	pop		af
     146.  00:4580  3E 02               	ld		a,2			; source page for tiles 32x32=1024 tiles
     147.  00:4582  CE 00               	adc		a,0
     148.  00:4584  D3 9B               	out 	(0x9B), a 	; sy (high-> page 2)
     149.  00:4586                      
     150.  00:4586  E1                  	pop		hl			; recover dx*8,dy*8
     151.  00:4587                      	
     152.  00:4587  ED 69               	out 	(c), l 		; dx
     153.  00:4589  AF                  	xor a
     154.  00:458A  D3 9B               	out 	(0x9B), a	; dx (high)
     155.  00:458C  ED 61               	out 	(c), h 		; dy
     156.  00:458E  3A 1F C0            	ld 		a,(_currentpage)	; destination page
     157.  00:4591  D3 9B               	out 	(0x9B), a	; dy (high-> page 0 or 1)
     158.  00:4593                      
     159.  00:4593  2E 08               	ld 		l,8 		; block size
     160.  00:4595                      
     161.  00:4595  ED 69               	out 	(c), l
     162.  00:4597  AF                  	xor a
     163.  00:4598  D3 9B               	out 	(0x9B), a
     164.  00:459A  ED 69               	out 	(c), l
     165.  00:459C  D3 9B               	out 	(0x9B), a
     166.  00:459E  D3 9B               	out 	(0x9B), a
     167.  00:45A0  D3 9B               	out 	(0x9B), a
     168.  00:45A2  C9                  	ret
     169.  00:45A3                      
     170.  00:45A3                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     171.  00:45A3                      ; input
     172.  00:45A3                      ; hl configured in window map 32x24
     173.  00:45A3                      ;  e color
     174.  00:45A3                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     175.  00:45A3                      
     176.  00:45A3                      plot_solid_box:
     177.  00:45A3  1E 77               	ld		e,SolidColor+16*SolidColor		; solid color
     178.  00:45A5                      
     179.  00:45A5  29 29               [2]	add		hl,hl
     180.  00:45A7  4D                  	ld		c,l			; C = dx*8
     181.  00:45A8  7C                  	ld		a,h
     182.  00:45A9  87 87 87            [3]	add		a,a
     183.  00:45AC  47                  	ld		b,a			; B = dy*8
     184.  00:45AD  C5                  	push	bc			; dx*8 and dy*8 on the stack
     185.  00:45AE                      
     186.  00:45AE  F3                  	di
     187.  00:45AF  3E 24               	ld 		a, 36
     188.  00:45B1  D3 99               	out 	(0x99),a
     189.  00:45B3  3E 91               	ld 		a, 17+128
     190.  00:45B5  D3 99               	out 	(0x99),a
     191.  00:45B7  FB                  	ei
     192.  00:45B8                      
     193.  00:45B8  0E 9B               	ld 		c, 0x9B
     194.  00:45BA                      	
     195.  00:45BA  CD 36 46            	call _waitvdp;
     196.  00:45BD  E1                  	pop		hl			; recover dx*8,dy*8
     197.  00:45BE                      	
     198.  00:45BE  ED 69               	out 	(c), l 		; dx
     199.  00:45C0  AF                  	xor a
     200.  00:45C1  D3 9B               	out 	(0x9B), a	; dx (high)
     201.  00:45C3  ED 61               	out 	(c), h 		; dy
     202.  00:45C5  3A 1F C0            	ld 		a,(_currentpage)	; destination page
     203.  00:45C8  D3 9B               	out 	(0x9B), a	; dy (high-> page 0 or 1)
     204.  00:45CA                      
     205.  00:45CA  2E 08               	ld 		l,8 		; block size
     206.  00:45CC                      
     207.  00:45CC  ED 69               	out 	(c), l
     208.  00:45CE  AF                  	xor a
     209.  00:45CF  D3 9B               	out 	(0x9B), a
     210.  00:45D1  ED 69               	out 	(c), l
     211.  00:45D3  D3 9B               	out 	(0x9B), a
     212.  00:45D5  ED 59               	out 	(c), e
     213.  00:45D7  D3 9B               	out 	(0x9B), a
     214.  00:45D9  2E C0               	ld		l,11000000B	; command HMMV
     215.  00:45DB  ED 69               	out 	(c), l
     216.  00:45DD  C9                  	ret
     391   00:45DE                      
     392   00:45DE                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     393   00:45DE                      
     394   00:45DE                      _clean_buffs:
     395   00:45DE  01 3F 0C            	ld	bc,2*WinWidth*WinWidth*2-1
     396   00:45E1  21 20 C0            	ld	hl,_shadow0
     397   00:45E4  36 FF               	ld	(hl),-1
     398   00:45E6  11 21 C0            	ld	de,_shadow0+1
     399   00:45E9  ED B0               	ldir
     400   00:45EB  C9                  	ret
     401   00:45EC                      	
     402   00:45EC                      ;Set VDP for writing at address CDE (17-bit) 
     403   00:45EC                      
     404   00:45EC                      _vdpsetvramwr:
     405   00:45EC  79                  	ld a,c
     406   00:45ED                      ;Set VDP for writing at address ADE (17-bit) ;
     407   00:45ED  CB 02               	rlc d
     408   00:45EF  17                  	rla
     409   00:45F0  CB 02               	rlc d
     410   00:45F2  17                  	rla
     411   00:45F3  CB 3A               	srl d ; primo shift, il secondo dopo la out
     412   00:45F5                      
     413   00:45F5  D3 99               	out (0x99),a ;set bits 14-16
     414   00:45F7  3E 8E               	ld a,14+128
     415   00:45F9  D3 99               	out (0x99),a
     416   00:45FB                      
     417   00:45FB  CB 3A               	srl d ; secondo shift.            
     418   00:45FD  7B                  	ld a,e ;set bits 0-7
     419   00:45FE  D3 99               	out (0x99),a
     420   00:4600  7A                  	ld a,d ;set bits 8-13
     421   00:4601  F6 40               	or 0x40 ; + write access
     422   00:4603  D3 99               	out (0x99),a
     423   00:4605  C9                  	ret
     424   00:4606                      	
     425   00:4606                      ;Set VDP port #98 to start reading at address CDE (17-bit) ;
     426   00:4606                      
     427   00:4606                      _vdpsetvramrd:
     428   00:4606  79                  	ld a,c
     429   00:4607                      ;Set VDP port #98 to start reading at address ADE (17-bit) ;
     430   00:4607  CB 02               	rlc d
     431   00:4609  17                  	rla
     432   00:460A  CB 02               	rlc d
     433   00:460C  17                  	rla
     434   00:460D  CB 3A               	srl d ; primo shift, il secondo dopo la out
     435   00:460F                      
     436   00:460F  D3 99               	out (0x99),a ;set bits 14-16
     437   00:4611  3E 8E               	ld a,14+128
     438   00:4613  D3 99               	out (0x99),a
     439   00:4615                      
     440   00:4615  CB 3A               	srl d ; secondo shift.            
     441   00:4617  7B                  	ld a,e ;set bits 0-7
     442   00:4618  D3 99               	out (0x99),a
     443   00:461A  7A                  	ld a,d ;set bits 8-13
     444   00:461B  E6 3F               	and 0x3F
     445   00:461D  D3 99               	out (0x99),a
     446   00:461F  C9                  	ret
     447   00:4620                      
     448   00:4620                      ;Display page E in screen 5
     449   00:4620                      _setpage:
     450   00:4620  7B                  	ld a,e
     451   00:4621  87                  	add a,a ;x32
     452   00:4622  87                  	add a,a
     453   00:4623  87                  	add a,a
     454   00:4624  87                  	add a,a
     455   00:4625  87                  	add a,a
     456   00:4626  C6 1F               	add a,31
     457   00:4628  F3                  	di
     458   00:4629  D3 99               	out (0x99),a
     459   00:462B  3E 82               	ld a,2+128
     460   00:462D  D3 99               	out (0x99),a
     461   00:462F  FB                  	ei            
     462   00:4630  C9                  	ret
     463   00:4631                      
     464   00:4631  (00:005F)           chgmod        equ     0x005f      ;change graphic mode
     465   00:4631  (00:000C)           RDSLT         equ     0x000c      ;read address HL in slot A
     466   00:4631  (00:0156)           KILBUF        equ     0x0156      ;clear keyboard buffer
     467   00:4631                      
     468   00:4631                      _scr:
     469   00:4631  7B                  	ld  a,e
     470   00:4632  CD 5F 00            	call	chgmod
     471   00:4635  C9                  	ret
     472   00:4636                      
     473   00:4636                      
     474   00:4636                      _waitvdp:
     475   00:4636  F3                  	di
     476   00:4637  3E 02               	ld a,2
     477   00:4639  D3 99               	out (0x99),a
     478   00:463B  3E 8F               	ld a, 0x8f
     479   00:463D  D3 99               	out (0x99),a
     480   00:463F                      
     481   00:463F  DB 99               1:  in a,(0x99)
     482   00:4641  0F                  	rrca
     483   00:4642  DA 3F 46            	jp c, 1b
     484   00:4645                      
     485   00:4645  AF                  	xor a
     486   00:4646  D3 99               	out (0x99),a
     487   00:4648  3E 8F               	ld a, 0x8f
     488   00:464A  D3 99               	out (0x99),a
     489   00:464C  FB                  	ei
     490   00:464D  C9                  	ret
     491   00:464E                      
     492   00:464E                      
     493   00:464E                      	
     494   00:464E                      _print_fps:
     495   00:464E  ED 5B 08 C0         	ld	de,(_buffer+3)
     496   00:4652  16 00               	ld	d,0
     497   00:4654  21 E0 05            	ld	hl,1024+512-'0'+16
     498   00:4657  19                  	add	hl,de
     499   00:4658  EB                  	ex	de,hl
     500   00:4659                      	
     501   00:4659  21 FC 05            	ld	hl,2*(23*32+30)
     502   00:465C  CD 2B 45            	call 	plot_foreground
     503   00:465F                      
     504   00:465F  3A 09 C0            	ld	a,(_buffer+4)
     505   00:4662  5F                  	ld	e,a
     506   00:4663  16 00               	ld	d,0
     507   00:4665  21 E0 05            	ld	hl,1024+512-'0'+16
     508   00:4668  19                  	add	hl,de
     509   00:4669  EB                  	ex	de,hl
     510   00:466A                      	
     511   00:466A  21 FE 05            	ld	hl,2*(23*32+31)
     512   00:466D  C3 2B 45            	jp 	plot_foreground
     513   00:4670                      	
     514   00:4670                      
     515   00:4670                      ;-------------------------------------
     516   00:4670                      _compute_fps:
     517   00:4670  ED 5B 15 C0         	ld	de,(_fps)
     518   00:4674  01 05 C0            	ld	bc,_buffer
     519   00:4677                      
     520   00:4677                      int2ascii:
     521   00:4677                      	
     522   00:4677                      ; in de input 
     523   00:4677                      ; in bc output
     524   00:4677                      
     525   00:4677  EB                  	ex  de,hl
     526   00:4678  59                  	ld  e,c
     527   00:4679  50                  	ld  d,b
     528   00:467A                      
     529   00:467A                      Num2asc:
     530   00:467A  01 F0 D8            	ld  bc,-10000
     531   00:467D  CD 93 46            	call    Num1
     532   00:4680  01 18 FC            	ld  bc,-1000
     533   00:4683  CD 93 46            	call    Num1
     534   00:4686  01 9C FF            	ld  bc,-100
     535   00:4689  CD 93 46            	call    Num1
     536   00:468C  0E F6               	ld  c,-10
     537   00:468E  CD 93 46            	call    Num1
     538   00:4691  0E FF               	ld  c,-1
     539   00:4693                      
     540   00:4693                      Num1:   
     541   00:4693  3E 2F               	ld  a,'0'-1  ; '0' in the tileset
     542   00:4695                      
     543   00:4695                      Num2:   
     544   00:4695  3C                  	inc a
     545   00:4696  09                  	add hl,bc
     546   00:4697  38 FC               	jr  c,Num2
     547   00:4699  ED 42               	sbc hl,bc
     548   00:469B                      
     549   00:469B  12                  	ld  (de),a
     550   00:469C  13                  	inc de
     551   00:469D  C9                  	ret
     552   00:469E                      
     553   00:469E                      _metatable:
     554   00:469E  (07D0)              	incbin "metatable.bin"
     555   00:4E6E                      _backmap:
     556   00:4E6E  (0400)              	incbin "backmap.bin"
     557   00:526E                      
     558   00:526E                      ; start
     559   00:526E                      _mballon_start
     560   00:526E  11 00 C0            	ld	de,0xc000
     561   00:5271  21 7C 52            	ld	hl,_relocate
     562   00:5274  01 0D 00            	ld	bc,_endrelocate-_relocate
     563   00:5277  ED B0               	ldir
     564   00:5279  C3 00 C0            	jp	0xc000
     565   00:527C                      _relocate:
     566   00:527C  3E 04               	ld	a,:mballon
     567   00:527E  32 00 60            	ld	(_bank1),a
     568   00:5281  3C                  	inc	a
     569   00:5282  32 00 70            	ld	(_bank2),a
     570   00:5285  2A 02 40            	ld	hl,(0x4002)
     571   00:5288  E9                  	jp	(hl)
     572   00:5289                      _endrelocate:
     573   00:5289                      
     574   00:5289                      
     575   00:5289                      	include enemies.asm
       1.  00:5289                      
       2.  00:5289  (00:0008)           nenemies 	equ	8
       3.  00:5289  (00:0080)           sprite_size	equ	8*8*2
       4.  00:5289                      
       5.  00:5289                      		struct enemy
       6.  00:5289                    < type 	db
       7.  00:5289                    < state 	db
       8.  00:5289                    < frame 	db
       9.  00:5289                    < x		dw	
      10.  00:5289                    < y		dw
      11.  00:5289                    < mappos	dw
      12.  00:5289                    < dx		dw
      13.  00:5289                    < dy		dw
      14.  00:5289                    < nx		db
      15.  00:5289                    < ny		db
      16.  00:5289                    < buf		ds	sprite_size
      17.  00:5289                    < 	endstruct
      18.  00:5289                      	
      19.  00:5289  (06)                	page 6
      20.  06:8000                      frames:
      21.  06:8000  1A 00 EB 00 AA 00   		dw 01Ah,0EBh,0AAh
      22.  06:8006  1A 00 EB 00 AA 00   		dw 01Ah,0EBh,0AAh
      23.  06:800C                      
      24.  06:800C  00 (128)            [127]	ds	sprite_size
      25.  06:BF8C                      
      26.  06:BF8C  (00)                	page 0
      27.  00:5289                      int_sprites
      28.  00:5289  DD 21 60 EC         	ld	ix,enemylist
      29.  00:528D  DD 36 03 00         	ld	(ix+enemy.x),0
      30.  00:5291  DD 36 04 00         	ld	(ix+enemy.x+1),0
      31.  00:5295                      	
      32.  00:5295  DD 36 05 00         	ld	(ix+enemy.y),0
      33.  00:5299  DD 36 06 00         	ld	(ix+enemy.y+1),0
      34.  00:529D                      	
      35.  00:529D  DD 36 0D 03         	ld	(ix+enemy.nx),3
      36.  00:52A1  DD 36 0E 02         	ld	(ix+enemy.ny),2
      37.  00:52A5                      	
      38.  00:52A5  DD 36 02 00         	ld	(ix+enemy.frame),0
      39.  00:52A9                      	
      40.  00:52A9  01 62 E0            	ld	bc,_levelmap+2+mapWidth*10*2
      41.  00:52AC  DD 71 07            	ld	(ix+enemy.mappos),c
      42.  00:52AF  DD 70 08            	ld	(ix+enemy.mappos+1),b
      43.  00:52B2  C9                  	ret
      44.  00:52B3                      
      45.  00:52B3                      move_sprites
      46.  00:52B3  DD 7E 09            	ld	a,(ix+enemy.dx)
      47.  00:52B6  3D                  	dec	a
      48.  00:52B7  E6 0F               	and	15
      49.  00:52B9  DD 77 09            	ld	(ix+enemy.dx),a
      50.  00:52BC  C0                  	ret	nz
      51.  00:52BD                      	
      52.  00:52BD  DD 6E 07            	ld	l,(ix+enemy.mappos)
      53.  00:52C0  DD 66 08            	ld	h,(ix+enemy.mappos+1)
      54.  00:52C3  23 23               [2]	inc	hl
      55.  00:52C5  DD 75 07            	ld	(ix+enemy.mappos),l
      56.  00:52C8  DD 74 08            	ld	(ix+enemy.mappos+1),h
      57.  00:52CB  C9                  	ret
      58.  00:52CC                      
      59.  00:52CC                      	; ld	bc,(ix+enemy.y)
      60.  00:52CC                      	; ld	hl,mapWidth
      61.  00:52CC                      	; call	bcxhl
      62.  00:52CC                      	; ld	bc,(ix+enemy.y)
      63.  00:52CC                      	; add	hl,bc
      64.  00:52CC                      	; ld	bc,_levelmap
      65.  00:52CC                      	; add	hl,bc	
      66.  00:52CC                      
      67.  00:52CC                      ;;;;;;;;;;;;;;;;;;;;;;;;
      68.  00:52CC                      ; save_background
      69.  00:52CC                      ; in 
      70.  00:52CC                      ;  ix destination in enemylist
      71.  00:52CC                      ;;;;;;;;;;;;;;;;;;;;;;;;
      72.  00:52CC                      
      73.  00:52CC                      save_background:
      74.  00:52CC  DD 5E 07            	ld	e,(ix+enemy.mappos)
      75.  00:52CF  DD 56 08            	ld	d,(ix+enemy.mappos+1)
      76.  00:52D2                      	
      77.  00:52D2  DD E5               	push	ix
      78.  00:52D4  E1                  	pop		hl
      79.  00:52D5  01 0F 00            	ld	bc,enemy.buf
      80.  00:52D8  09                  	add	hl,bc
      81.  00:52D9  EB                  	ex	de,hl
      82.  00:52DA                      	
      83.  00:52DA  DD 7E 0E            	ld	a,(ix+enemy.ny)
      84.  00:52DD                      
      85.  00:52DD  06 00               	ld	b,0
      86.  00:52DF                      	
      87.  00:52DF  DD 4E 0D            2:	ld	c,(ix+enemy.nx)
      88.  00:52E2  CB 21               	sla	c
      89.  00:52E4  E5                  	push	hl
      90.  00:52E5  ED B0               	ldir
      91.  00:52E7  E1                  	pop	hl
      92.  00:52E8                      	
      93.  00:52E8  24 24               [2]	inc h	; only if (mapWidth=256)
      94.  00:52EA                      	
      95.  00:52EA  3D                  	dec	a
      96.  00:52EB  C2 DF 52            	jp	nz,2b
      97.  00:52EE  C9                  	ret
      98.  00:52EF                      	
      99.  00:52EF                      ;;;;;;;;;;;;;;;;;;;;;;;;
     100.  00:52EF                      ; plot_sprite
     101.  00:52EF                      ; in 
     102.  00:52EF                      ;  ix destination in enemylist
     103.  00:52EF                      ;;;;;;;;;;;;;;;;;;;;;;;;
     104.  00:52EF                      
     105.  00:52EF                      plot_sprite:
     106.  00:52EF  DD 6E 02            	ld	l,(ix+enemy.frame)
     107.  00:52F2  26 00               	ld	h,0
     108.  00:52F4  29 29 29 29 29 29   [6]	add	hl,hl			; sprite_size = 64*2
     109.  00:52FA                      
     110.  00:52FA  3E 06               	ld	a,:frames
     111.  00:52FC  32 00 70            	ld	(_bank2),a
     112.  00:52FF  01 00 80            	ld	bc,frames
     113.  00:5302  09                  	add	hl,bc			; hl aims to the current frame to be plotted
     114.  00:5303                      
     115.  00:5303  C3 0D 53            	jp	plot_sprtite_frame
     116.  00:5306                      	
     117.  00:5306                      ;;;;;;;;;;;;;;;;;;;;;;;;
     118.  00:5306                      ; restore_background
     119.  00:5306                      ; in 
     120.  00:5306                      ;  ix source in enemylist
     121.  00:5306                      ;;;;;;;;;;;;;;;;;;;;;;;;
     122.  00:5306                      
     123.  00:5306                      restore_background:
     124.  00:5306  DD E5               	push	ix
     125.  00:5308  E1                  	pop		hl
     126.  00:5309  01 0F 00            	ld	bc,enemy.buf
     127.  00:530C  09                  	add	hl,bc			
     128.  00:530D                      
     129.  00:530D                      plot_sprtite_frame:
     130.  00:530D  DD 5E 07            	ld	e,(ix+enemy.mappos)
     131.  00:5310  DD 56 08            	ld	d,(ix+enemy.mappos+1)	; hl->buffer, de->_levelmap
     132.  00:5313                      	
     133.  00:5313  DD 7E 0E            	ld	a,(ix+enemy.ny)
     134.  00:5316  06 00               	ld	b,0
     135.  00:5318                      	
     136.  00:5318  DD 4E 0D            2:	ld	c,(ix+enemy.nx)
     137.  00:531B  CB 21               	sla	c
     138.  00:531D  D5                  	push	de
     139.  00:531E  ED B0               	ldir
     140.  00:5320  D1                  	pop	de
     141.  00:5321                      
     142.  00:5321  14 14               [2]	inc d	; only if (mapWidth=256)
     143.  00:5323                      
     144.  00:5323  3D                  	dec	a
     145.  00:5324  C2 18 53            	jp	nz,2b
     146.  00:5327  C9                  	ret
     147.  00:5328                      	
     148.  00:5328                      	
     149.  00:5328                      	
     576   00:5328                      
     577   00:5328  (01)                	page 1
     578   01:8000                      _frame:
     579   01:8000  (0951)              	incbin "frame_.bin"			
     580   01:8951                      	
     581   01:8951  (02)                	page 2
     582   02:8000                      _tiles:
     583   02:8000  (3578)              	incbin "tiles_.bin"
     584   02:B578                      
     585   02:B578  (03)                	page 3
     586   03:8000                      _level:
     587   03:8000  (0479)              	incbin "metamap_.bin"			
     588   03:8479                      
     589   03:8479  (04)                	page 4
     590   04:8000                      mballon:
     591   04:8000  (4000)              	incbin "MBALLOON.BIN",,0x4000	
     592   04:C000  (05)                	page 5
     593   05:8000  (4000)              	incbin "MBALLOON.BIN",0x4000	
     594   05:C000                      FINISH:
     595   05:C000                      
     596   05:C000                      ;---------------------------------------------------------
     597   05:C000                      ; Variables
     598   05:C000                      ;---------------------------------------------------------
     599   05:C000                      
     600   05:C000                      
     601   05:C000                      	
     602   05:C000  (C000)              	MAP 0xC000
     603   05:C000  (05:C000)           slotvar				#1
     604   05:C000  (05:C001)           slotram				#1
     605   05:C000  (05:C002)           SEL_NTSC			#1
     606   05:C000  (05:C003)           _dx					#1
     607   05:C000                      
     608   05:C000  (05:C004)           _ticxframe			#1
     609   05:C000                      
     610   05:C000  (05:C005)           _buffer:			#16
     611   05:C000  (05:C015)           _fps:				#2
     612   05:C000  (05:C017)           _nframes:			#2
     613   05:C000  (05:C019)           _vbit16:			#2
     614   05:C000  (05:C01B)           _levelmappos:		#2
     615   05:C000                      
     616   05:C000  (05:C01D)           _shadowbuff:		#2
     617   05:C000  (05:C01F)           _currentpage:		#1
     618   05:C000                      
     619   05:C000  (05:C020)           _shadow0:			#WinWidth*WinWidth*2
     620   05:C000  (05:C640)           _shadow1:			#WinWidth*WinWidth*2
     621   05:C000                      
     622   05:C000  (05:CC60)           _levelmap:			#mapWidth*mapHeight*2	
     623   05:C000                      
     624   05:C000  (05:EC60)           enemylist:			#enemy*nenemies
     625   05:C000  (0000)              	ENDMAP

    LABELS
-------------------------------------------------
00:00006000   _bank1
00:00007000   _bank2
00:0000037C X n_tiles
00:00000100   mapWidth
00:00000010   mapHeight
00:0000001C   WinWidth
00:00000010   WinHeight
00:00000000 X Transp
00:00000340   SolidTile
00:00000007   SolidColor
00:00000024 X ENASLT
00:00000138   RSLREG
00:0000FCC1   EXPTBL
00:00004010   search_slot
00:0000402F X search_slotram
00:00004050   search_slotram0
00:00004055 X setrompage0
00:0000405B   setrompage2
00:00004061 X setrampage2
00:00004067 X setrompage3
00:0000406D X setrampage3
00:00004073 X recbios
00:00004076   setslotpage0
00:000040AD X setslotpage1
00:000040EC   setslotpage2
00:00004133   setslotpage3
00:0000000C X rdslt
00:0000001C X CALSLT
00:00000180   chgcpu
00:0000FCC1 X exttbl
00:00004172   _set_r800
00:00004193   set_turbo_tr
00:0000419B   checkkbd
00:000041A6   plot_frame
00:000041F3   START
00:0000420B   _ntsc
00:000042ED   main_loop
00:00004355   up
00:00004362   dwn
00:0000436F   right
00:0000437F   left
00:0000FC9E   JIFFY
00:00004391   _isr
00:000043C1   powerup
00:000000D5   GTSTCK
00:000000D8 X GTTRIG
00:000043C8   _cursors
00:00000099   vdpport1
00:0000009A   vdpport2
00:000043D6   levelcolors
00:000043F6   _SetPalet
00:00004408   _vuitpakker
00:00004440   _literal
00:00004445   __loop
00:0000444E X _getlen
00:00004454   lus
00:00004471   lenok
00:0000447E   _mode7
00:00004484   _mode6
00:0000448A   _mode5
00:00004490   _mode4
00:00004496   _mode3
00:0000449C   _mode2
00:000044AC   offsok
00:000044B7   _loop
00:000044CD   _getbit
00:000044D1   _getbitexx
00:000044D7   Depack_out
00:000044D9   setVwrite
00:000044E5   setVread
00:000044F3   __modes
00:00004501   plot_tile
00:0000452B   plot_foreground
00:0000453E   plot_trasp_tile
00:00004556   vdp_conf
00:000045A3   plot_solid_box
00:000045DE   _clean_buffs
00:000045EC   _vdpsetvramwr
00:00004606   _vdpsetvramrd
00:00004620   _setpage
00:0000005F   chgmod
00:0000000C X RDSLT
00:00000156 X KILBUF
00:00004631   _scr
00:00004636   _waitvdp
00:0000464E   _print_fps
00:00004670   _compute_fps
00:00004677 X int2ascii
00:0000467A X Num2asc
00:00004693   Num1
00:00004695   Num2
00:0000469E   _metatable
00:00004E6E   _backmap
00:0000526E   _mballon_start
00:0000527C   _relocate
00:00005289   _endrelocate
00:00000008   nenemies
00:00000080   sprite_size
00:00000000 X enemy.type
00:00000001 X enemy.state
00:00000002   enemy.frame
00:00000003   enemy.x
00:00000005   enemy.y
00:00000007   enemy.mappos
00:00000009   enemy.dx
00:0000000B X enemy.dy
00:0000000D   enemy.nx
00:0000000E   enemy.ny
00:0000000F   enemy.buf
00:0000008F   enemy
06:00008000   frames
00:00005289   int_sprites
00:000052B3   move_sprites
00:000052CC   save_background
00:000052EF   plot_sprite
00:00005306   restore_background
00:0000530D   plot_sprtite_frame
01:00008000   _frame
02:00008000   _tiles
03:00008000   _level
04:00008000   mballon
05:0000C000 X FINISH
05:0000C000   slotvar
05:0000C001   slotram
05:0000C002   SEL_NTSC
05:0000C003   _dx
05:0000C004   _ticxframe
05:0000C005   _buffer
05:0000C015   _fps
05:0000C017   _nframes
05:0000C019   _vbit16
05:0000C01B   _levelmappos
05:0000C01D   _shadowbuff
05:0000C01F   _currentpage
05:0000C020   _shadow0
05:0000C640   _shadow1
05:0000CC60   _levelmap
05:0000EC60   enemylist


 Output: main.out
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: *  Used: 00000000

    No output

 Output: maneldem.rom
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: 00004000  Used: 00001328

   Address   Length Align   Label
   00004000    4745         search_slot
   00005289     159         int_sprites
   00005328   11480       <empty>

 Page: 01
  Org: 00008000  Size: 00004000  Used: 00000951

   Address   Length Align   Label
   00008000    2385         _frame
   00008951   13999       <empty>

 Page: 02
  Org: 00008000  Size: 00004000  Used: 00003578

   Address   Length Align   Label
   00008000   13688         _tiles
   0000B578    2696       <empty>

 Page: 03
  Org: 00008000  Size: 00004000  Used: 00000479

   Address   Length Align   Label
   00008000    1145         _level
   00008479   15239       <empty>

 Page: 04
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         mballon

 Page: 05
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         FINISH

 Page: 06
  Org: 00008000  Size: 00004000  Used: 00003F8C

   Address   Length Align   Label
   00008000   16268         frames
   0000BF8C     116       <empty>

 Page: 07
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 08
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 09
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0A
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0B
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0C
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0D
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0E
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0F
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>
