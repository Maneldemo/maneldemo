Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2015.02.27 - 22:48:56]

main.asm
Errors: 0

       1   00:0000                      ;----------------------------------------------------------------------------
       2   00:0000                      ;----------------------------------------------------------------------------
       3   00:0000                      
       4   00:0000                              output "maneldem.rom"
       5   00:0000                      
       6   00:0000                      		defpage	0,0x4000, 0x4000		; page 0 main code + far call routines
       7   00:0000                      		defpage	1,0x8000, 0x4000		; swapped data 
       8   00:0000                      		defpage	2..15
       9   00:0000                      	
      10   00:0000  (00:6000)           _bank1	equ	0x6000
      11   00:0000  (00:7000)           _bank2	equ	0x7000
      12   00:0000                      		
      13   00:0000  (00)                		page 0
      14   00:4000                      		
      15   00:4000                              org 4000h
      16   00:4000                              dw  4241h,START,0,0,0,0,0,0
      16   00:4000  41 42 A6 41 00 00 00 00 00 00 00 00 00 00 00 00 
      17   00:4010                      
      18   00:4010                      
      19   00:4010                      		include "header.asm"
       1.  00:4010  (00:037C)           n_tiles: equ 892
       2.  00:4010  (00:0100)           mapWidth:	equ	256
       3.  00:4010  (00:0010)           mapHeight:	equ	 16
       4.  00:4010  (00:001C)           WinWidth:	equ	 28
       5.  00:4010  (00:0010)           WinHeight:	equ	 16
       6.  00:4010  (00:0000)           Transp:	equ	  0
       7.  00:4010  (00:0340)           SolidTile:	equ	832
       8.  00:4010  (00:0007)           SolidColor:	equ	  7
      20   00:4010                      	
      21   00:4010                      		include "rominit64.asm"
       1.  00:4010                      
       2.  00:4010                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       3.  00:4010                      ; set pages and subslot
       4.  00:4010                      ;
       5.  00:4010                      
       6.  00:4010                      
       7.  00:4010  (00:0024)           ENASLT:			equ		024h
       8.  00:4010  (00:0138)           RSLREG:			equ		0138h
       9.  00:4010  (00:FCC1)           EXPTBL:			equ		0FCC1h	; Bios Slot / Expansion Slot
      10.  00:4010                      
      11.  00:4010                      
      12.  00:4010                      ; ----------------------------
      13.  00:4010                      ; pre-set main slot for page 3
      14.  00:4010                      ; and set sub-slot for page 3
      15.  00:4010                      ; ----------------------------
      16.  00:4010                      	macro	mainslot_setup n
      17.  00:4010                    < 	and		3
      18.  00:4010                    < [2]	rrca
      19.  00:4010                    < 	and		0xC0
      20.  00:4010                    < 	ld		c,a
      21.  00:4010                    < 	ld		a,d
      22.  00:4010                    < 	and		0x3F
      23.  00:4010                    < 	or		c
      24.  00:4010                    < 	ld		c,a					; Primary slot value with main slot in page 3
      25.  00:4010                    < 
      26.  00:4010                    < 	ld		a,b
      27.  00:4010                    < 	and		0x0C
      28.  00:4010                    < [2]	rrca
      29.  00:4010                    < 	and		3
      30.  00:4010                    < 	ld		b,a					; B = Expanded slot in page 3
      31.  00:4010                    < 	ld		a,c
      32.  00:4010                    < 	out		(0A8h),a			; Slot : Main Slot, xx, xx, Main slot
      33.  00:4010                    < 	ld		a,(0FFFFh)
      34.  00:4010                    < 	cpl
      35.  00:4010                    < 	if (n<=4)
      36.  00:4010                    < [n]	RLCA
      37.  00:4010                    < 	else
      38.  00:4010                    < [8-n] RRCA	
      39.  00:4010                    < 	endif
      40.  00:4010                    < 	and		0xFC
      41.  00:4010                    < 	or		b
      42.  00:4010                    < 	if (n<=4)
      43.  00:4010                    < [n]	RRCA
      44.  00:4010                    < 	else
      45.  00:4010                    < [8-n] RLCA
      46.  00:4010                    < 	endif
      47.  00:4010                    < 	ld		(0FFFFh),a		; Expanded slot selected
      48.  00:4010                    < 	ld		b,a				; save for later	
      49.  00:4010                    < 	endmacro
      50.  00:4010                      		
      51.  00:4010                      
      52.  00:4010                      ; ------------------------------
      53.  00:4010                      ; SEARCH_SLOT
      54.  00:4010                      ; look for the slot of our rom
      55.  00:4010                      ; active in page 1
      56.  00:4010                      ; ------------------------------
      57.  00:4010                      
      58.  00:4010                      search_slot:
      59.  00:4010  CD 38 01            	call	RSLREG
      60.  00:4013  0F 0F               [2]	rrca
      61.  00:4015  E6 03               	and		3
      62.  00:4017  4F                  	ld		c,a
      63.  00:4018  06 00               	ld		b,0
      64.  00:401A  21 C1 FC            	ld		hl,EXPTBL
      65.  00:401D  09                  	add		hl,bc
      66.  00:401E  7E                  	ld		a,(hl)
      67.  00:401F  E6 80               	and		080h
      68.  00:4021  B1                  	or		c
      69.  00:4022  4F                  	ld		c,a
      70.  00:4023  23 23 23 23         [4]	inc		hl
      71.  00:4027  7E                  	ld		a,(hl)
      72.  00:4028  E6 0C               	and		0Ch
      73.  00:402A  B1                  	or		c
      74.  00:402B  32 00 C0            	ld		(slotvar),a
      75.  00:402E  C9                  	ret
      76.  00:402F                      	
      77.  00:402F                      ; ------------------------------
      78.  00:402F                      ; look for the slot of ram
      79.  00:402F                      ; active in page 3
      80.  00:402F                      ; ------------------------------
      81.  00:402F                      
      82.  00:402F                      search_slotram:
      83.  00:402F  F3                  	di
      84.  00:4030  CD 38 01            	call	RSLREG
      85.  00:4033  07 07               [2]	rlca
      86.  00:4035  E6 03               	and		3
      87.  00:4037  4F                  	ld		c,a
      88.  00:4038  06 00               	ld		b,0
      89.  00:403A  21 C1 FC            	ld		hl,EXPTBL
      90.  00:403D  09                  	add		hl,bc
      91.  00:403E  7E                  	ld		a,(hl)
      92.  00:403F  E6 80               	and		080h
      93.  00:4041  28 0D               	jr		z,search_slotram0
      94.  00:4043  B1                  	or		c
      95.  00:4044  4F                  	ld		c,a
      96.  00:4045  23 23 23 23         [4]	inc		hl
      97.  00:4049  7E                  	ld		a,(hl)
      98.  00:404A  07 07 07 07         [4]	rlca
      99.  00:404E  E6 0C               	and		0Ch
     100.  00:4050                      search_slotram0:
     101.  00:4050  B1                  	or		c
     102.  00:4051  32 01 C0            	ld		(slotram),a
     103.  00:4054  C9                  	ret
     104.  00:4055                      	
     105.  00:4055                      ; ------------------------------
     106.  00:4055                      ; SETROMPAGE0
     107.  00:4055                      ; Set the chart in
     108.  00:4055                      ; Page 0
     109.  00:4055                      ; -----------------------------
     110.  00:4055                      
     111.  00:4055                      setrompage0:
     112.  00:4055  3A 00 C0            	ld		a,(slotvar)
     113.  00:4058  C3 76 40            	jp		setslotpage0
     114.  00:405B                      
     115.  00:405B                      setrompage2:
     116.  00:405B  3A 00 C0            	ld		a,(slotvar)
     117.  00:405E  C3 EC 40            	jp		setslotpage2
     118.  00:4061                      
     119.  00:4061                      setrampage2:
     120.  00:4061  3A 01 C0            	ld		a,(slotram)
     121.  00:4064  C3 EC 40            	jp		setslotpage2
     122.  00:4067                      	
     123.  00:4067                      setrompage3:
     124.  00:4067  3A 00 C0            	ld		a,(slotvar)
     125.  00:406A  C3 33 41            	jp		setslotpage3
     126.  00:406D                      
     127.  00:406D                      setrampage3:
     128.  00:406D  3A 01 C0            	ld		a,(slotram)
     129.  00:4070  C3 33 41            	jp		setslotpage3
     130.  00:4073                      	
     131.  00:4073                      ; ------------------------------
     132.  00:4073                      ; RECBIOS
     133.  00:4073                      ; set the bios ROM
     134.  00:4073                      ; -------------------------------
     135.  00:4073                      recbios:
     136.  00:4073  3A C1 FC            	ld		a,(EXPTBL)
     137.  00:4076                      
     138.  00:4076                      ; ---------------------------
     139.  00:4076                      ; SETSLOTPAGE0
     140.  00:4076                      ; Set the slot passed in A
     141.  00:4076                      ; at page 0 in the Z80 address space
     142.  00:4076                      ; A: Format FxxxSSPP
     143.  00:4076                      ; ----------------------------
     144.  00:4076                      
     145.  00:4076                      setslotpage0:
     146.  00:4076  F3                  	di
     147.  00:4077  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     148.  00:4078  DB A8               	in		a,(0A8h)
     149.  00:407A  E6 FC               	and		0xFC
     150.  00:407C  57                  	ld		d,a					; D = Primary slot value
     151.  00:407D  78                  	ld		a,b
     152.  00:407E  E6 03               	and		3
     153.  00:4080  B2                  	or		d
     154.  00:4081  57                  	ld		d,a		; D = Final Value for primary slot
     155.  00:4082  78                  	ld		a,b		; Check if expanded
     156.  00:4083  CB 7F               	bit		7,a
     157.  00:4085  28 22               	jr		z,1f	; Not Expanded
     158.  00:4087                      	mainslot_setup	0
     158.  00:4087  E6 03             >  and  3
     158.  00:4089  0F 0F             > [2] rrca
     158.  00:408B  E6 C0             >  and  0xC0
     158.  00:408D  4F                >  ld  c,a
     158.  00:408E  7A                >  ld  a,d
     158.  00:408F  E6 3F             >  and  0x3F
     158.  00:4091  B1                >  or  c
     158.  00:4092  4F                >  ld  c,a
     158.  00:4093                    > 
     158.  00:4093  78                >  ld  a,b
     158.  00:4094  E6 0C             >  and  0x0C
     158.  00:4096  0F 0F             > [2] rrca
     158.  00:4098  E6 03             >  and  3
     158.  00:409A  47                >  ld  b,a
     158.  00:409B  79                >  ld  a,c
     158.  00:409C  D3 A8             >  out  (0A8h),a
     158.  00:409E  3A FF FF          >  ld  a,(0FFFFh)
     158.  00:40A1  2F                >  cpl
     158.  00:40A2                    >  if (n<=4)
     158.  00:40A2                    > [n] RLCA
     158.  00:40A2                    >  else
     158.  00:40A2                    ~ [8-n] RRCA
     158.  00:40A2                    ~  endif
     158.  00:40A2  E6 FC             >  and  0xFC
     158.  00:40A4  B0                >  or  b
     158.  00:40A5                    >  if (n<=4)
     158.  00:40A5                    > [n] RRCA
     158.  00:40A5                    >  else
     158.  00:40A5                    ~ [8-n] RLCA
     158.  00:40A5                    ~  endif
     158.  00:40A5  32 FF FF          >  ld  (0FFFFh),a
     158.  00:40A8  47                >  ld  b,a
     159.  00:40A9  7A                  1:	ld		a,d				; A = Final value
     160.  00:40AA  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     161.  00:40AC  C9                  	ret
     162.  00:40AD                      
     163.  00:40AD                      ; ---------------------------
     164.  00:40AD                      ; SETSLOTPAGE1
     165.  00:40AD                      ; Set the slot passed in A
     166.  00:40AD                      ; at page 1 in the Z80 address space
     167.  00:40AD                      ; A: Format FxxxSSPP
     168.  00:40AD                      ; ----------------------------
     169.  00:40AD                      
     170.  00:40AD                      setslotpage1:
     171.  00:40AD  F3                  	di
     172.  00:40AE  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     173.  00:40AF  DB A8               	in		a,(0A8h)
     174.  00:40B1  0F 0F               [2]	RRCA
     175.  00:40B3  E6 FC               	and		0xFC
     176.  00:40B5  57                  	ld		d,a					; D = Primary slot value
     177.  00:40B6  78                  	ld		a,b
     178.  00:40B7  E6 03               	and		3
     179.  00:40B9  B2                  	or		d
     180.  00:40BA  07 07               [2]	RLCA
     181.  00:40BC  57                  	ld		d,a		; D = Final Value for primary slot
     182.  00:40BD  78                  	ld		a,b		; Check if expanded
     183.  00:40BE  CB 7F               	bit		7,a
     184.  00:40C0  28 26               	jr		z,1f	; Not Expanded
     185.  00:40C2                      	mainslot_setup	6
     185.  00:40C2  E6 03             >  and  3
     185.  00:40C4  0F 0F             > [2] rrca
     185.  00:40C6  E6 C0             >  and  0xC0
     185.  00:40C8  4F                >  ld  c,a
     185.  00:40C9  7A                >  ld  a,d
     185.  00:40CA  E6 3F             >  and  0x3F
     185.  00:40CC  B1                >  or  c
     185.  00:40CD  4F                >  ld  c,a
     185.  00:40CE                    > 
     185.  00:40CE  78                >  ld  a,b
     185.  00:40CF  E6 0C             >  and  0x0C
     185.  00:40D1  0F 0F             > [2] rrca
     185.  00:40D3  E6 03             >  and  3
     185.  00:40D5  47                >  ld  b,a
     185.  00:40D6  79                >  ld  a,c
     185.  00:40D7  D3 A8             >  out  (0A8h),a
     185.  00:40D9  3A FF FF          >  ld  a,(0FFFFh)
     185.  00:40DC  2F                >  cpl
     185.  00:40DD                    >  if (n<=4)
     185.  00:40DD                    ~ [n] RLCA
     185.  00:40DD                    ~  else
     185.  00:40DD  0F 0F             > [8-n] RRCA
     185.  00:40DF                    >  endif
     185.  00:40DF  E6 FC             >  and  0xFC
     185.  00:40E1  B0                >  or  b
     185.  00:40E2                    >  if (n<=4)
     185.  00:40E2                    ~ [n] RRCA
     185.  00:40E2                    ~  else
     185.  00:40E2  07 07             > [8-n] RLCA
     185.  00:40E4                    >  endif
     185.  00:40E4  32 FF FF          >  ld  (0FFFFh),a
     185.  00:40E7  47                >  ld  b,a
     186.  00:40E8  7A                  1:	ld		a,d				; A = Final value
     187.  00:40E9  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     188.  00:40EB  C9                  	ret
     189.  00:40EC                      	
     190.  00:40EC                      
     191.  00:40EC                      ; ---------------------------
     192.  00:40EC                      ; SETSLOTPAGE2
     193.  00:40EC                      ; Set the slot passed in A
     194.  00:40EC                      ; at page 2 in the Z80 address space
     195.  00:40EC                      ; A: Format FxxxSSPP
     196.  00:40EC                      ; ----------------------------
     197.  00:40EC                      
     198.  00:40EC                      setslotpage2:
     199.  00:40EC  F3                  	di
     200.  00:40ED  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     201.  00:40EE  DB A8               	in		a,(0A8h)
     202.  00:40F0  07 07 07 07         [4]	RLCA
     203.  00:40F4  E6 FC               	and		0xFC
     204.  00:40F6  57                  	ld		d,a					; D = Primary slot value
     205.  00:40F7  78                  	ld		a,b
     206.  00:40F8  E6 03               	and		3
     207.  00:40FA  B2                  	or		d
     208.  00:40FB  0F 0F 0F 0F         [4]	RRCA
     209.  00:40FF  57                  	ld		d,a		; D = Final Value for primary slot
     210.  00:4100  78                  	ld		a,b		; Check if expanded
     211.  00:4101  CB 7F               	bit		7,a
     212.  00:4103  28 2A               	jr		z,1f	; Not Expanded
     213.  00:4105                      	mainslot_setup	4
     213.  00:4105  E6 03             >  and  3
     213.  00:4107  0F 0F             > [2] rrca
     213.  00:4109  E6 C0             >  and  0xC0
     213.  00:410B  4F                >  ld  c,a
     213.  00:410C  7A                >  ld  a,d
     213.  00:410D  E6 3F             >  and  0x3F
     213.  00:410F  B1                >  or  c
     213.  00:4110  4F                >  ld  c,a
     213.  00:4111                    > 
     213.  00:4111  78                >  ld  a,b
     213.  00:4112  E6 0C             >  and  0x0C
     213.  00:4114  0F 0F             > [2] rrca
     213.  00:4116  E6 03             >  and  3
     213.  00:4118  47                >  ld  b,a
     213.  00:4119  79                >  ld  a,c
     213.  00:411A  D3 A8             >  out  (0A8h),a
     213.  00:411C  3A FF FF          >  ld  a,(0FFFFh)
     213.  00:411F  2F                >  cpl
     213.  00:4120                    >  if (n<=4)
     213.  00:4120  07 07 07 07       > [n] RLCA
     213.  00:4124                    >  else
     213.  00:4124                    ~ [8-n] RRCA
     213.  00:4124                    ~  endif
     213.  00:4124  E6 FC             >  and  0xFC
     213.  00:4126  B0                >  or  b
     213.  00:4127                    >  if (n<=4)
     213.  00:4127  0F 0F 0F 0F       > [n] RRCA
     213.  00:412B                    >  else
     213.  00:412B                    ~ [8-n] RLCA
     213.  00:412B                    ~  endif
     213.  00:412B  32 FF FF          >  ld  (0FFFFh),a
     213.  00:412E  47                >  ld  b,a
     214.  00:412F  7A                  1:	ld		a,d				; A = Final value
     215.  00:4130  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     216.  00:4132  C9                  	ret
     217.  00:4133                      	
     218.  00:4133                      ; ---------------------------
     219.  00:4133                      ; SETSLOTPAGE3
     220.  00:4133                      ; Set the slot passed in A
     221.  00:4133                      ; at page 3 in the Z80 address space
     222.  00:4133                      ; A: Format FxxxSSPP
     223.  00:4133                      ; ----------------------------
     224.  00:4133                      	
     225.  00:4133                      setslotpage3:
     226.  00:4133  F3                  	di
     227.  00:4134  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     228.  00:4135  DB A8               	in		a,(0A8h)
     229.  00:4137  07 07               [2]	RLCA
     230.  00:4139  E6 FC               	and		0xFC
     231.  00:413B  57                  	ld		d,a					; D = Primary slot value
     232.  00:413C  78                  	ld		a,b
     233.  00:413D  E6 03               	and		3
     234.  00:413F  B2                  	or		d
     235.  00:4140  0F 0F               [2]	RRCA	
     236.  00:4142  57                  	ld		d,a		; D = Final Value for primary slot
     237.  00:4143  78                  	ld		a,b		; Check if expanded
     238.  00:4144  CB 7F               	bit		7,a
     239.  00:4146  28 26               	jr		z,1f	; Not Expanded
     240.  00:4148                      	mainslot_setup	2
     240.  00:4148  E6 03             >  and  3
     240.  00:414A  0F 0F             > [2] rrca
     240.  00:414C  E6 C0             >  and  0xC0
     240.  00:414E  4F                >  ld  c,a
     240.  00:414F  7A                >  ld  a,d
     240.  00:4150  E6 3F             >  and  0x3F
     240.  00:4152  B1                >  or  c
     240.  00:4153  4F                >  ld  c,a
     240.  00:4154                    > 
     240.  00:4154  78                >  ld  a,b
     240.  00:4155  E6 0C             >  and  0x0C
     240.  00:4157  0F 0F             > [2] rrca
     240.  00:4159  E6 03             >  and  3
     240.  00:415B  47                >  ld  b,a
     240.  00:415C  79                >  ld  a,c
     240.  00:415D  D3 A8             >  out  (0A8h),a
     240.  00:415F  3A FF FF          >  ld  a,(0FFFFh)
     240.  00:4162  2F                >  cpl
     240.  00:4163                    >  if (n<=4)
     240.  00:4163  07 07             > [n] RLCA
     240.  00:4165                    >  else
     240.  00:4165                    ~ [8-n] RRCA
     240.  00:4165                    ~  endif
     240.  00:4165  E6 FC             >  and  0xFC
     240.  00:4167  B0                >  or  b
     240.  00:4168                    >  if (n<=4)
     240.  00:4168  0F 0F             > [n] RRCA
     240.  00:416A                    >  else
     240.  00:416A                    ~ [8-n] RLCA
     240.  00:416A                    ~  endif
     240.  00:416A  32 FF FF          >  ld  (0FFFFh),a
     240.  00:416D  47                >  ld  b,a
     241.  00:416E  7A                  1:	ld		a,d				; A = Final value
     242.  00:416F  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     243.  00:4171  C9                  	ret
     244.  00:4172                      
     245.  00:4172                      	
      22   00:4172                      
      23   00:4172  (00:000C)           rdslt	equ	0x000c
      24   00:4172  (00:001C)           CALSLT	equ	0x001c
      25   00:4172  (00:0180)           chgcpu	equ	0x0180	; change cpu mode
      26   00:4172  (00:FCC1)           exttbl	equ	0xfcc1	; main rom slot
      27   00:4172                      
      28   00:4172                      
      29   00:4172                      ; Switch to r800 rom mode
      30   00:4172                      	
      31   00:4172                      _set_r800:
      32   00:4172  DB AA               		in	a,(0aah)
      33   00:4174  E6 F0               		and 011110000B			; upper 4 bits contain info to preserve
      34   00:4176  F6 06               		or	6
      35   00:4178  D3 AA               		out (0aah),a
      36   00:417A  DB A9               		in	a,(0a9h)
      37   00:417C  6F                  		ld	l,a
      38   00:417D                      
      39   00:417D  3A 2D 00            		ld	a,(0x002d)
      40   00:4180  FE 03               		cp	3					; this is a TR
      41   00:4182  7D                  		ld	a,l
      42   00:4183  28 0E               		jr	z,set_turbo_tr
      43   00:4185                      								; this is anything else
      44   00:4185  E6 02               		and	0x02				; CTR
      45   00:4187  C0                  		ret	nz					; if NZ, CTR is not pressed set the turbo
      46   00:4188                      
      47   00:4188  3A 80 01            		ld	A,(chgcpu)
      48   00:418B  FE C3               		cp	0C3h
      49   00:418D  3E 81               		ld	a,81h              ; R800 ROM mode or any other turbo
      50   00:418F  CC 80 01            		call	z,chgcpu
      51   00:4192  C9                  		ret
      52   00:4193                      
      53   00:4193                      set_turbo_tr
      54   00:4193  E6 02               		and	0x02				; CTR
      55   00:4195  C8                  		ret	z					; if Z, CTR is pressed -> do not set the turbo
      56   00:4196  3E 81               		ld	a,81h              	; R800 ROM mode
      57   00:4198  C3 80 01            		jp chgcpu
      58   00:419B                      		
      59   00:419B                      	
      60   00:419B                      checkkbd:
      61   00:419B  DB AA               	in	a,(0aah)
      62   00:419D  E6 F0               	and 011110000B			; upper 4 bits contain info to preserve
      63   00:419F  B3                  	or	e
      64   00:41A0  D3 AA               	out (0aah),a
      65   00:41A2  DB A9               	in	a,(0a9h)
      66   00:41A4  6F                  	ld	l,a
      67   00:41A5  C9                  	ret
      68   00:41A6                      ;-------------------------------------
      69   00:41A6                      ; Entry point
      70   00:41A6                      ;-------------------------------------
      71   00:41A6                      START:
      72   00:41A6  1E 05                       ld		e,5
      73   00:41A8  CD 0E 46            		call	_scr
      74   00:41AB                      
      75   00:41AB  CD 72 41            		call 	_set_r800
      76   00:41AE  CD 9E 43                    call    powerup
      77   00:41B1                      
      78   00:41B1  1E 06               		ld e,6
      79   00:41B3  CD 9B 41            		call	checkkbd
      80   00:41B6  3E 01               		ld	a,1
      81   00:41B8  CB 0D               		rrc	l				; shift
      82   00:41BA  D2 BE 41            		jp	nc,_ntsc
      83   00:41BD  AF                  		xor	a
      84   00:41BE  32 02 C0            _ntsc:	ld	(SEL_NTSC),a	; if set NSTC, if reset PAL
      85   00:41C1                      		
      86   00:41C1  1E 07               		ld	e,7
      87   00:41C3  CD 9B 41            		call	checkkbd
      88   00:41C6  E6 04               		and	0x04				; ESC
      89   00:41C8  CA 4B 52            		jp 	z,_mballon_start
      90   00:41CB                      		
      91   00:41CB  11 00 00            		ld		de,0
      92   00:41CE  4B                  		ld		c,e
      93   00:41CF  F3                  		di
      94   00:41D0  CD C9 45            		call	_vdpsetvramwr
      95   00:41D3  01 00 00            		ld		bc,0x0000
      96   00:41D6  AF                  1:		xor		a
      97   00:41D7  D3 98               		out		(0x98),a
      98   00:41D9  0B                  		dec		bc
      99   00:41DA  78                  		ld		a,b
     100   00:41DB  B1                  		or		c
     101   00:41DC  20 F8               		jr	nz,1b
     102   00:41DE                      		
     103   00:41DE  F3                  		di
     104   00:41DF                      		// border color
     105   00:41DF  3E 55               		ld		a,0x55
     106   00:41E1  D3 99               		out		(0x99),a
     107   00:41E3  3E 87               		ld		a,128+7
     108   00:41E5  D3 99               		out		(0x99),a
     109   00:41E7                      		
     110   00:41E7                      		// Disable sprites + TP
     111   00:41E7  3A E7 FF            		ld		a,(0xFFE7)
     112   00:41EA  F6 22               		or		2+32
     113   00:41EC  32 E7 FF            		ld		(0xFFE7),a
     114   00:41EF  D3 99               		out		(0x99),a
     115   00:41F1  3E 88               		ld		a,128+8
     116   00:41F3  D3 99               		out		(0x99),a
     117   00:41F5                      		
     118   00:41F5                      		// Set 192 lines @50Hz (PAL assumed!)
     119   00:41F5  3A 02 C0            		ld	a,(SEL_NTSC)
     120   00:41F8  A7                  		and 	a
     121   00:41F9  20 0C               		jr		nz,1f
     122   00:41FB                      		
     123   00:41FB  3A E8 FF            		ld		a,(0xFFE8)		; PAL
     124   00:41FE  E6 7F               		and		127
     125   00:4200  F6 02               		or		2
     126   00:4202  32 E8 FF            		ld		(0xFFE8),a
     127   00:4205  18 0C               		jr	2f
     128   00:4207  3A E8 FF            1:		ld		a,(0xFFE8)		; NTSC
     129   00:420A  E6 7F               		and		127
     130   00:420C  F6 02               		or		2
     131   00:420E  EE 02               		xor		2
     132   00:4210  32 E8 FF            		ld		(0xFFE8),a
     133   00:4213                      2:	
     134   00:4213  D3 99               		out		(0x99),a
     135   00:4215  3E 89               		ld		a,128+9
     136   00:4217  D3 99               		out		(0x99),a
     137   00:4219  FB                  		ei
     138   00:421A                      			
     139   00:421A  3E C3               		LD	A,0xC3
     140   00:421C  21 6E 43            		LD	HL,_isr
     141   00:421F  F3                  		DI
     142   00:4220  32 9F FD            		LD	(0xFD9F),A
     143   00:4223  22 A0 FD            		LD	(0xFDA0),HL
     144   00:4226  FB                  		EI
     145   00:4227                      
     146   00:4227  CD BB 45            		call	_clean_buffs
     147   00:422A                      
     148   00:422A  CD D3 43            		call	_SetPalet
     149   00:422D  1E 00               		ld		e,0
     150   00:422F  CD FD 45                    call	_setpage
     151   00:4232                      		
     152   00:4232                      		; unpack level map (meta_tiles)
     153   00:4232  3E 03               		ld	a, :_level
     154   00:4234  32 00 70            		ld	(_bank2),a
     155   00:4237                      		
     156   00:4237  AF                  		xor	a
     157   00:4238  32 19 C0            		ld		(_vbit16 ),a
     158   00:423B  11 00 80            		ld		de,	_level
     159   00:423E  01 00 00            		ld		bc,0
     160   00:4241  CD E5 43            		call	_vuitpakker 
     161   00:4244                      		
     162   00:4244  11 00 00            		ld		de,0
     163   00:4247  4B                  		ld		c,e
     164   00:4248  CD E3 45            		call	_vdpsetvramrd
     165   00:424B  21 60 CC            		ld		hl,_levelmap
     166   00:424E  11 00 20            		ld		de,mapWidth*mapHeight*2
     167   00:4251  0E 98               		ld		c,0x98
     168   00:4253  ED A2               1:		ini
     169   00:4255  1B                  		dec	de
     170   00:4256  7A                  		ld	a,d
     171   00:4257  B3                  		or	e
     172   00:4258  20 F9               		jr	nz,1b
     173   00:425A                      
     174   00:425A                      		; unpack frame
     175   00:425A  3E 01               		ld		a, :_frame
     176   00:425C  32 00 70            		ld		(_bank2),a
     177   00:425F                      		
     178   00:425F  AF                  		xor	a
     179   00:4260  32 19 C0            		ld		(_vbit16 ),a
     180   00:4263  11 00 80            		ld		de,	_frame
     181   00:4266  01 00 00            		ld		bc,0
     182   00:4269  CD E5 43            		call	_vuitpakker 
     183   00:426C                      
     184   00:426C  11 00 80            		ld		de,	_frame
     185   00:426F  01 00 80            		ld		bc,0x8000
     186   00:4272  CD E5 43            		call	_vuitpakker 
     187   00:4275                      		
     188   00:4275  1E 02               		ld		e,2
     189   00:4277  CD FD 45                    call	_setpage
     190   00:427A                      
     191   00:427A                      		; unpack tileset
     192   00:427A  3E 02               		ld		a, :_tiles
     193   00:427C  32 00 70            		ld		(_bank2),a
     194   00:427F                      		
     195   00:427F  3E 01               		ld		a,1
     196   00:4281  32 19 C0            		ld		(_vbit16 ),a
     197   00:4284  11 00 80            		ld		de,	_tiles
     198   00:4287  01 00 00            		ld		bc,0
     199   00:428A  CD E5 43            		call	_vuitpakker 
     200   00:428D                      
     201   00:428D                      		; main init
     202   00:428D                      			
     203   00:428D  21 00 00            		ld		hl,0
     204   00:4290  22 1B C0            		ld		(_levelmappos),hl
     205   00:4293  22 17 C0            		ld		(_nframes),hl
     206   00:4296  7C                  		ld		a,h
     207   00:4297  32 1F C0            		ld		(_currentpage),a
     208   00:429A  32 03 C0            		ld		(_dx),a
     209   00:429D                      		
     210   00:429D                      main_loop:
     211   00:429D  AF                  		xor		a
     212   00:429E  32 04 C0            		ld		(_ticxframe),a
     213   00:42A1                      
     214   00:42A1  3A 1F C0            		ld		a,(_currentpage)
     215   00:42A4  EE 01               		xor		1
     216   00:42A6  32 1F C0            		ld		(_currentpage),a
     217   00:42A9  EE 01               		xor		1
     218   00:42AB  5F                  		ld		e,a
     219   00:42AC  76                  		halt
     220   00:42AD  CD FD 45                    call	_setpage
     221   00:42B0  CB 43               		bit		0,e
     222   00:42B2  21 40 C6            		ld		hl,_shadow1
     223   00:42B5  20 03               		jr		nz,1f
     224   00:42B7  21 20 C0            		ld		hl,_shadow0
     225   00:42BA  22 1D C0            1:		ld		(_shadowbuff),hl
     226   00:42BD                      
     227   00:42BD  0E 10               		ld		c,WinHeight
     228   00:42BF                      		
     229   00:42BF  2A 1B C0            		ld		hl,(_levelmappos)
     230   00:42C2                      		repeat 2
     231   00:42C2                    < 		srl		h
     232   00:42C2                    < 		rr		l
     233   00:42C2                    < 		endrepeat
     233   00:42C2  CB 3C CB 1D CB 3C CB 1D 
     234   00:42CA  CB 85               		res		0,l
     235   00:42CC  11 60 CC            		ld		de,_levelmap
     236   00:42CF  19                  		add		hl,de
     237   00:42D0  EB                  		ex		de,hl			; de -> levelmap
     238   00:42D1  21 42 00            		ld		hl,2*32+2		; hl -> screen 
     239   00:42D4                      		
     240   00:42D4  06 1C               2:		ld		b,WinWidth
     241   00:42D6  D5                  		push	de
     242   00:42D7                      
     243   00:42D7  D5                  3:		push	de
     244   00:42D8  E5                  		push	hl
     245   00:42D9                      		
     246   00:42D9  EB                  		ex		de,hl
     247   00:42DA  5E                  		ld		e,(hl)
     248   00:42DB  23                  		inc		hl
     249   00:42DC  56                  		ld		d,(hl)		; DE = meta tile
     250   00:42DD                      		
     251   00:42DD  EB                  		ex		de,hl
     252   00:42DE  29 29 29            [3]		add		hl,hl
     253   00:42E1                      		
     254   00:42E1  11 7B 46            		ld		de,_metatable
     255   00:42E4  19                  		add		hl,de
     256   00:42E5  3A 1B C0            		ld		a,(_levelmappos)
     257   00:42E8  E6 06               		and		00000110B
     258   00:42EA  16 00               		ld		d,0
     259   00:42EC  5F                  		ld		e,a
     260   00:42ED  19                  		add		hl,de
     261   00:42EE  5E                  		ld		e,(hl)
     262   00:42EF  23                  		inc		hl
     263   00:42F0  56                  		ld		d,(hl)		; DE = tile
     264   00:42F1                      
     265   00:42F1  E1                  		pop		hl			; HL = screen position
     266   00:42F2  E5                  		push	hl
     267   00:42F3                      
     268   00:42F3  C5                  		push	bc
     269   00:42F4  CD DE 44            		call	plot_tile
     270   00:42F7  C1                  		pop		bc
     271   00:42F8  E1                  		pop		hl
     272   00:42F9  D1                  		pop		de
     273   00:42FA                      		
     274   00:42FA  23                  		inc		hl			; the screen in WinWidthxWinHeight
     275   00:42FB                      		
     276   00:42FB  13 13               [2]		inc		de			; the levelmap is int
     277   00:42FD  10 D8               		djnz	3b
     278   00:42FF                      		
     279   00:42FF                      		if (WinWidth<32)
     280   00:42FF  11 04 00            			ld	de,32-WinWidth	; only if WinWidth<32
     281   00:4302  19                  			add	hl,de
     282   00:4303                      		endif
     283   00:4303                      		
     284   00:4303  D1                  		pop		de
     285   00:4304                      		
     286   00:4304                      		if (mapWidth=256)
     287   00:4304  14 14               [2]			inc d
     288   00:4306                      		else
     289   00:4306                    ~ 			push	hl
     290   00:4306                    ~ 			ld		hl,mapWidth*2
     291   00:4306                    ~ 			add		hl,de
     292   00:4306                    ~ 			ex		de,hl
     293   00:4306                    ~ 			pop		hl
     294   00:4306                    ~ 		endif
     295   00:4306                      		
     296   00:4306  0D                  		dec		c
     297   00:4307  20 CB               		jr	nz,2b
     298   00:4309                      		
     299   00:4309  CD 4D 46            		call	_compute_fps
     300   00:430C  CD 2B 46            		call	_print_fps
     301   00:430F                      
     302   00:430F  2A 17 C0            		ld		hl,(_nframes)
     303   00:4312  23                  		inc		hl
     304   00:4313  22 17 C0            		ld		(_nframes),hl
     305   00:4316                      
     306   00:4316                      		
     307   00:4316  CD A5 43            		call	_cursors
     308   00:4319  7D                  		ld		a,l
     309   00:431A  FE 01               		cp		1
     310   00:431C  CA 32 43            		jp		z,up
     311   00:431F  FE 03               		cp		3
     312   00:4321  CA 4C 43            		jp		z,right
     313   00:4324  FE 05               		cp		5
     314   00:4326  CA 3F 43            		jp		z,dwn
     315   00:4329  FE 07               		cp		7
     316   00:432B  CA 5C 43            		jp		z,left
     317   00:432E                      		
     318   00:432E  C3 9D 42            		jp      main_loop
     319   00:4331                      
     320   00:4331  C9                          ret
     321   00:4332                      
     322   00:4332  2A 1B C0            up:		ld		hl,(_levelmappos)
     323   00:4335  01 00 F8            		ld		bc,-mapWidth*8
     324   00:4338  09                  		add		hl,bc
     325   00:4339  22 1B C0            		ld		(_levelmappos),hl
     326   00:433C  C3 9D 42            		jp      main_loop
     327   00:433F                      
     328   00:433F  2A 1B C0            dwn:	ld		hl,(_levelmappos)
     329   00:4342  01 00 08            		ld		bc,mapWidth*8
     330   00:4345  09                  		add		hl,bc
     331   00:4346  22 1B C0            		ld		(_levelmappos),hl
     332   00:4349  C3 9D 42            		jp      main_loop
     333   00:434C                      		
     334   00:434C  2A 1B C0            right:	ld		hl,(_levelmappos)
     335   00:434F  3A 04 C0            		ld		a,(_ticxframe)
     336   00:4352  4F                  		ld		c,a					; compensate frame rate
     337   00:4353  06 00               		ld		b,0
     338   00:4355  09                  		add		hl,bc
     339   00:4356  22 1B C0            		ld		(_levelmappos),hl
     340   00:4359  C3 9D 42            		jp      main_loop
     341   00:435C                      
     342   00:435C  2A 1B C0            left:	ld		hl,(_levelmappos)
     343   00:435F  3A 04 C0            		ld		a,(_ticxframe)
     344   00:4362  ED 44               		neg
     345   00:4364  4F                  		ld		c,a					; compensate frame rate
     346   00:4365  06 FF               		ld		b,-1
     347   00:4367  09                  		add		hl,bc
     348   00:4368  22 1B C0            		ld		(_levelmappos),hl
     349   00:436B  C3 9D 42            		jp      main_loop
     350   00:436E                      
     351   00:436E                      ;-------------------------------------
     352   00:436E  (00:FC9E)           JIFFY: equ 0xFC9E 
     353   00:436E                      ;-------------------------------------
     354   00:436E  E5                  _isr:	push	hl
     355   00:436F  C5                  		push	bc
     356   00:4370  2A 9E FC            		ld		hl,(JIFFY)
     357   00:4373                      
     358   00:4373  3A 02 C0            		ld	a,(SEL_NTSC)
     359   00:4376  A7                  		and 	a
     360   00:4377  20 05               		jr		nz,1f
     361   00:4379                      		
     362   00:4379  01 CE FF            		ld		bc,-50			; PAL 
     363   00:437C  18 03               		jr	2f
     364   00:437E                      1:
     365   00:437E  01 C4 FF            		ld		bc,-60			; NTSC
     366   00:4381                      		
     367   00:4381  09                  2:		add		hl,bc
     368   00:4382  21 04 C0            		ld		hl,_ticxframe
     369   00:4385  34                  		inc		(hl)
     370   00:4386  C1                  		pop		bc
     371   00:4387  E1                  		pop		hl
     372   00:4388  D0                  		ret	nc
     373   00:4389                      		
     374   00:4389  E5                  		push	hl
     375   00:438A  21 00 00            		ld		hl,0
     376   00:438D  22 9E FC            		ld		(JIFFY),hl
     377   00:4390  2A 17 C0            		ld		hl,(_nframes)
     378   00:4393  22 15 C0            		ld		(_fps),hl
     379   00:4396  21 00 00            		ld		hl,0
     380   00:4399  22 17 C0            		ld		(_nframes),hl
     381   00:439C  E1                  		pop		hl
     382   00:439D  C9                  		ret
     383   00:439E                      ;-------------------------------------
     384   00:439E                      ;   Power-up routine for 32K ROM
     385   00:439E                      ;   set pages and sub slot
     386   00:439E                      ;-------------------------------------
     387   00:439E                      powerup:
     388   00:439E  CD 10 40                    call    search_slot
     389   00:43A1  CD 5B 40            		call	setrompage2
     390   00:43A4  C9                          ret
     391   00:43A5                      
     392   00:43A5                      ;-------------------------------------
     393   00:43A5                      
     394   00:43A5                      
     395   00:43A5  (00:00D5)           GTSTCK      equ 0x00D5      ;Returns the joystick status
     396   00:43A5  (00:00D8)           GTTRIG      equ 0x00D8      ;Returns current trigger status
     397   00:43A5                      
     398   00:43A5                      
     399   00:43A5                      _cursors:
     400   00:43A5                      
     401   00:43A5  AF                  	xor     a
     402   00:43A6  CD D5 00            	call	GTSTCK
     403   00:43A9  F5                  	push	af		;return the cursors
     404   00:43AA  3E 01               	ld		a,1
     405   00:43AC  CD D5 00            	call	GTSTCK
     406   00:43AF  E1                  	pop		hl		;return the joystick
     407   00:43B0  B4                  	or		h
     408   00:43B1  6F                  	ld		l,a
     409   00:43B2  C9                  	ret
     410   00:43B3                      	
     411   00:43B3                      
     412   00:43B3                      
     413   00:43B3                              
     414   00:43B3                      ;-------------------------------------
     415   00:43B3                      		
     416   00:43B3  (00:0099)           vdpport1 equ 0x99
     417   00:43B3  (00:009A)           vdpport2 equ 0x9A
     418   00:43B3                      
     419   00:43B3                      levelcolors:
     420   00:43B3  (0020)              	incbin "palette.bin"
     421   00:43D3                      
     422   00:43D3                      _SetPalet:   
     423   00:43D3  F3                  	di
     424   00:43D4  AF                  	xor a 			;Set pointer to zero.
     425   00:43D5  D3 99               	out (vdpport1),a        
     426   00:43D7  3E 90               	ld  a,16 | 010000000B
     427   00:43D9  D3 99               	out (vdpport1),a
     428   00:43DB                      
     429   00:43DB  21 B3 43            	ld  hl,levelcolors
     430   00:43DE  01 9A 20            	ld bc,vdpport2+32*256
     431   00:43E1  ED B3               	otir
     432   00:43E3  FB                  	ei
     433   00:43E4  C9                  	ret
     434   00:43E5                      
     435   00:43E5                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     436   00:43E5                      
     437   00:43E5                      	include vuitpakker.asm
       1.  00:43E5                      
       2.  00:43E5                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       3.  00:43E5                      
       4.  00:43E5                      
       5.  00:43E5                      _vuitpakker:
       6.  00:43E5  FD E5                   push iy
       7.  00:43E7  DD E5                   push ix
       8.  00:43E9                      
       9.  00:43E9  CD F1 43                call  1f
      10.  00:43EC                      
      11.  00:43EC  DD E1                   pop ix
      12.  00:43EE  FD E1                   pop iy
      13.  00:43F0  C9                      ret
      14.  00:43F1                      
      15.  00:43F1                      1:
      16.  00:43F1                      ; in de input
      17.  00:43F1                      ; in bc VRAM output
      18.  00:43F1                      
      19.  00:43F1  62                      ld h,d
      20.  00:43F2  6B                      ld l,e
      21.  00:43F3  50                      ld d,b
      22.  00:43F4  59                      ld e,c
      23.  00:43F5                      
      24.  00:43F5                      ; pletter v0.5 msx unpacker
      25.  00:43F5                      
      26.  00:43F5                      ;-----------------------------------------------------------
      27.  00:43F5                      ; Pletter 0.5b VRAM Depacker - 64Kb version
      28.  00:43F5                      ; HL = RAM/ROM source ; DE = VRAM destination
      29.  00:43F5                      ;-----------------------------------------------------------
      30.  00:43F5  F3                      di
      31.  00:43F6                      
      32.  00:43F6                      ; VRAM address setup
      33.  00:43F6                      ;    ld  a,e
      34.  00:43F6                      ;    out (0x99),a
      35.  00:43F6                      ;    ld  a,d
      36.  00:43F6                      ;    or  0x40
      37.  00:43F6                      ;    out (0x99),a
      38.  00:43F6  CD B6 44                call setVwrite
      39.  00:43F9                      
      40.  00:43F9                      ; Initialization
      41.  00:43F9  7E                      ld  a,(hl)
      42.  00:43FA  23                      inc hl
      43.  00:43FB  D9                      exx
      44.  00:43FC  11 00 00                ld  de,0
      45.  00:43FF  87                      add a,a
      46.  00:4400  3C                      inc a
      47.  00:4401  CB 13                   rl  e
      48.  00:4403  87                      add a,a
      49.  00:4404  CB 13                   rl  e
      50.  00:4406  87                      add a,a
      51.  00:4407  CB 13                   rl  e
      52.  00:4409  CB 13                   rl  e
      53.  00:440B  21 D0 44                ld  hl,__modes
      54.  00:440E  19                      add hl,de
      55.  00:440F  5E                      ld  e,(hl)
      56.  00:4410  DD                      db    0xdd
      57.  00:4411  6B                      ld  l,e         ; ld ixl,e    
      58.  00:4412  23                      inc hl
      59.  00:4413  5E                      ld  e,(hl)
      60.  00:4414  DD                      db    0xdd
      61.  00:4415  63                      ld h,e          ; ld  ixh,e
      62.  00:4416  1E 01                   ld  e,1
      63.  00:4418  D9                      exx
      64.  00:4419  FD 21 22 44             ld  iy,__loop
      65.  00:441D                      
      66.  00:441D                      ; Main depack loop
      67.  00:441D  0E 98               _literal:ld  c,098h
      68.  00:441F  ED A3                   outi
      69.  00:4421  13                      inc de
      70.  00:4422  87                  __loop:   add a,a
      71.  00:4423  CC AA 44                call    z,_getbit
      72.  00:4426  30 F5                   jr  nc,_literal
      73.  00:4428                      
      74.  00:4428                      ; Compressed data
      75.  00:4428  D9                      exx
      76.  00:4429  62                      ld  h,d
      77.  00:442A  6B                      ld  l,e
      78.  00:442B  87                  _getlen: add a,a
      79.  00:442C  CC AE 44                call    z,_getbitexx
      80.  00:442F  30 1D                   jr  nc,lenok
      81.  00:4431  87                  lus:    add a,a
      82.  00:4432  CC AE 44                call    z,_getbitexx
      83.  00:4435  ED 6A                   adc hl,hl
      84.  00:4437  D8                      ret c
      85.  00:4438  87                      add a,a
      86.  00:4439  CC AE 44                call    z,_getbitexx
      87.  00:443C  30 10                   jr  nc,lenok
      88.  00:443E  87                      add a,a
      89.  00:443F  CC AE 44                call    z,_getbitexx
      90.  00:4442  ED 6A                   adc hl,hl
      91.  00:4444  DA B4 44                jp  c,Depack_out
      92.  00:4447  87                      add a,a
      93.  00:4448  CC AE 44                call    z,_getbitexx
      94.  00:444B  DA 31 44                jp  c,lus
      95.  00:444E  23                  lenok:  inc hl
      96.  00:444F  D9                      exx
      97.  00:4450  4E                      ld  c,(hl)
      98.  00:4451  23                      inc hl
      99.  00:4452  06 00                   ld  b,0
     100.  00:4454  CB 79                   bit 7,c
     101.  00:4456  CA 89 44                jp  z,offsok
     102.  00:4459  DD E9                   jp  (ix)
     103.  00:445B                      
     104.  00:445B  87                  _mode7:  add a,a
     105.  00:445C  CC AA 44                call    z,_getbit
     106.  00:445F  CB 10                   rl  b
     107.  00:4461  87                  _mode6:  add a,a
     108.  00:4462  CC AA 44                call    z,_getbit
     109.  00:4465  CB 10                   rl  b
     110.  00:4467  87                  _mode5:  add a,a
     111.  00:4468  CC AA 44                call    z,_getbit
     112.  00:446B  CB 10                   rl  b
     113.  00:446D  87                  _mode4:  add a,a
     114.  00:446E  CC AA 44                call    z,_getbit
     115.  00:4471  CB 10                   rl  b
     116.  00:4473  87                  _mode3:  add a,a
     117.  00:4474  CC AA 44                call    z,_getbit
     118.  00:4477  CB 10                   rl  b
     119.  00:4479  87                  _mode2:  add a,a
     120.  00:447A  CC AA 44                call    z,_getbit
     121.  00:447D  CB 10                   rl  b
     122.  00:447F  87                      add a,a
     123.  00:4480  CC AA 44                call    z,_getbit
     124.  00:4483  30 04                   jr  nc,offsok
     125.  00:4485  B7                      or  a
     126.  00:4486  04                      inc b
     127.  00:4487  CB B9                   res 7,c
     128.  00:4489  03                  offsok: inc bc
     129.  00:448A  E5                      push    hl
     130.  00:448B  D9                      exx
     131.  00:448C  E5                      push    hl
     132.  00:448D  D9                      exx
     133.  00:448E  6B                      ld  l,e
     134.  00:448F  62                      ld  h,d
     135.  00:4490  ED 42                   sbc hl,bc
     136.  00:4492  C1                      pop bc
     137.  00:4493  F5                      push    af
     138.  00:4494                      _loop: 
     139.  00:4494                      ;    ld  a,l
     140.  00:4494                      ;    out (0x99),a
     141.  00:4494                      ;    ld  a,h
     142.  00:4494                      ;    out (0x99),a
     143.  00:4494  CD C2 44                call setVread
     144.  00:4497                          
     145.  00:4497  DB 98                   in  a,(0x98)
     146.  00:4499  08                      ex  af,af'
     147.  00:449A                      ;    ld  a,e
     148.  00:449A                      ;    out (0x99),a
     149.  00:449A                      ;    ld  a,d
     150.  00:449A                      ;    or  0x40
     151.  00:449A                      ;    out (0x99),a
     152.  00:449A  CD B6 44                call setVwrite
     153.  00:449D                          
     154.  00:449D  08                      ex  af,af'
     155.  00:449E  D3 98                   out (0x98),a
     156.  00:44A0  13                      inc de
     157.  00:44A1  ED A1                   cpi
     158.  00:44A3  EA 94 44                jp  pe,_loop
     159.  00:44A6  F1                      pop af
     160.  00:44A7  E1                      pop hl
     161.  00:44A8  FD E9                   jp  (iy)
     162.  00:44AA                      ;
     163.  00:44AA  7E                  _getbit: ld  a,(hl)
     164.  00:44AB  23                      inc hl
     165.  00:44AC  17                      rla
     166.  00:44AD  C9                      ret
     167.  00:44AE                      
     168.  00:44AE                      _getbitexx:
     169.  00:44AE  D9                      exx
     170.  00:44AF  7E                      ld  a,(hl)
     171.  00:44B0  23                      inc hl
     172.  00:44B1  D9                      exx
     173.  00:44B2  17                      rla
     174.  00:44B3  C9                      ret
     175.  00:44B4                      
     176.  00:44B4                      ; De-packer exit
     177.  00:44B4                      Depack_out:
     178.  00:44B4  FB                      ei
     179.  00:44B5  C9                      ret
     180.  00:44B6                      
     181.  00:44B6                      
     182.  00:44B6                      
     183.  00:44B6                      setVwrite:
     184.  00:44B6                      
     185.  00:44B6  D5                      push    de
     186.  00:44B7  C5                      push    bc
     187.  00:44B8  ED 4B 19 C0             ld      bc,(_vbit16)
     188.  00:44BC  CD C9 45                call    _vdpsetvramwr
     189.  00:44BF  C1                      pop     bc
     190.  00:44C0  D1                      pop     de
     191.  00:44C1                      
     192.  00:44C1  C9                      ret
     193.  00:44C2                      setVread:    
     194.  00:44C2                      
     195.  00:44C2  D5                      push    de
     196.  00:44C3  C5                      push    bc
     197.  00:44C4  5D                      ld      e,l
     198.  00:44C5  54                      ld      d,h
     199.  00:44C6  ED 4B 19 C0             ld      bc,(_vbit16)
     200.  00:44CA  CD E3 45                call    _vdpsetvramrd
     201.  00:44CD  C1                      pop     bc
     202.  00:44CE  D1                      pop     de
     203.  00:44CF                      
     204.  00:44CF  C9                      ret
     205.  00:44D0                      
     206.  00:44D0                      __modes:
     207.  00:44D0  89 44                   dw  offsok
     208.  00:44D2  79 44                   dw  _mode2
     209.  00:44D4  73 44                   dw  _mode3
     210.  00:44D6  6D 44                   dw  _mode4
     211.  00:44D8  67 44                   dw  _mode5
     212.  00:44DA  61 44                   dw  _mode6
     213.  00:44DC  5B 44                   dw  _mode7
     438   00:44DE                      
     439   00:44DE                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     440   00:44DE                      
     441   00:44DE                      	include plot_tile.asm
       1.  00:44DE                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       2.  00:44DE                      ; input
       3.  00:44DE                      ; hl  configured in window map 32x24
       4.  00:44DE                      ; de  tile to be plot
       5.  00:44DE                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       6.  00:44DE                      plot_tile:
       7.  00:44DE  29                  	add		hl,hl		; now HL is aiming to uints
       8.  00:44DF                      
       9.  00:44DF  E5                  	push	hl
      10.  00:44E0  ED 4B 1D C0         	ld		bc,(_shadowbuff)
      11.  00:44E4  09                  	add		hl,bc		; HL = pointer to the shadow map
      12.  00:44E5                      	
      13.  00:44E5  7E                  	ld		a,(hl)		; Avoid writing the same tile
      14.  00:44E6  BB                  	cp		e
      15.  00:44E7  20 08               	jr		nz,1f
      16.  00:44E9  23                  	inc		hl
      17.  00:44EA  7E                  	ld		a,(hl)
      18.  00:44EB  BA                  	cp		d
      19.  00:44EC  2B                  	dec		hl
      20.  00:44ED  20 02               	jr		nz,1f
      21.  00:44EF                      
      22.  00:44EF  E1                  	pop		hl
      23.  00:44F0  C9                  	ret
      24.  00:44F1                      	
      25.  00:44F1  73                  1:	ld		(hl),e		; rewrite the position with the actual tile in shadowbuffer
      26.  00:44F2  23                  	inc		hl
      27.  00:44F3  72                  	ld		(hl),d
      28.  00:44F4                      	
      29.  00:44F4  E1                  	pop		hl			; HL relative position in 32x24*2
      30.  00:44F5                      						; DE new 16 tile to be plotted
      31.  00:44F5                      						
      32.  00:44F5  CB 7A               	bit 	7,d			; test for LMMMM	
      33.  00:44F7  C2 1B 45            	jp		nz,plot_trasp_tile
      34.  00:44FA                      	
      35.  00:44FA  7A                  	ld		a,d
      36.  00:44FB  B3                  	or		e
      37.  00:44FC  C2 08 45            	jp		nz,plot_foreground
      38.  00:44FF                      
      39.  00:44FF                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      40.  00:44FF                      ; input
      41.  00:44FF                      ; hl  configured in window map 32x24
      42.  00:44FF                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      43.  00:44FF                      
      44.  00:44FF                      ; plot_background:
      45.  00:44FF                      
      46.  00:44FF  E5                  	push	hl
      47.  00:4500  11 C9 4D            	ld		de,_backmap-32*4-2
      48.  00:4503  19                  	add		hl,de
      49.  00:4504  5E                  	ld		e,(hl)
      50.  00:4505  23                  	inc		hl
      51.  00:4506  56                  	ld		d,(hl)
      52.  00:4507  E1                  	pop		hl
      53.  00:4508                      	
      54.  00:4508                      	
      55.  00:4508                      plot_foreground:
      56.  00:4508  3E 40               	ld	a,low SolidTile
      57.  00:450A  BB                  	cp	e
      58.  00:450B  20 06               	jr	nz,1f
      59.  00:450D  3E 03               	ld	a,high SolidTile
      60.  00:450F  BA                  	cp	d
      61.  00:4510  CA 80 45            	jp	z,plot_solid_box
      62.  00:4513                      
      63.  00:4513  CD 33 45            1:	call 	vdp_conf
      64.  00:4516                      
      65.  00:4516  3E D0               	ld		a,11010000B
      66.  00:4518  D3 9B               	out 	(0x9B), a		; command HMMM
      67.  00:451A  C9                  	ret
      68.  00:451B                      
      69.  00:451B                      	
      70.  00:451B                      	
      71.  00:451B                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      72.  00:451B                      ; input
      73.  00:451B                      ; hl   configured in window map 32x24
      74.  00:451B                      ; de  tile to be plot
      75.  00:451B                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      76.  00:451B                      
      77.  00:451B                      plot_trasp_tile:
      78.  00:451B                      
      79.  00:451B  D5                  	push	de
      80.  00:451C  E5                  	push	hl
      81.  00:451D                      					;	plot_background
      82.  00:451D  11 C9 4D            	ld		de,_backmap-32*4-2
      83.  00:4520  19                  	add		hl,de
      84.  00:4521  5E                  	ld		e,(hl)
      85.  00:4522  23                  	inc		hl
      86.  00:4523  56                  	ld		d,(hl)
      87.  00:4524                      
      88.  00:4524  E1                  	pop		hl
      89.  00:4525  E5                  	push	hl
      90.  00:4526  CD 08 45            	call	plot_foreground
      91.  00:4529  E1                  	pop		hl
      92.  00:452A  D1                  	pop		de
      93.  00:452B                      
      94.  00:452B  CD 33 45            	call	vdp_conf
      95.  00:452E                      
      96.  00:452E  3E 98               	ld		a,10011000B
      97.  00:4530  D3 9B               	out 	(0x9B), a		; command LMMM
      98.  00:4532  C9                  	ret
      99.  00:4533                      
     100.  00:4533                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     101.  00:4533                      ; input
     102.  00:4533                      ; hl   configured in window map 32x24
     103.  00:4533                      ; de  tile to be plot
     104.  00:4533                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     105.  00:4533                      
     106.  00:4533                      vdp_conf:	
     107.  00:4533                      	
     108.  00:4533  29 29               [2]	add		hl,hl
     109.  00:4535  4D                  	ld		c,l			; C = dx*8
     110.  00:4536  7C                  	ld		a,h
     111.  00:4537  87 87 87            [3]	add		a,a
     112.  00:453A  47                  	ld		b,a			; B = dy*8
     113.  00:453B  C5                  	push	bc			; dx*8 and dy*8 on the stack
     114.  00:453C                      	
     115.  00:453C                      	; de has the 16 bit tile
     116.  00:453C                      	; de = 10 bits = 5 bits for y and 5 bits for x
     117.  00:453C                      
     118.  00:453C  EB                  	ex		de,hl
     119.  00:453D  29 29 29            [3]	add		hl,hl
     120.  00:4540                      	
     121.  00:4540                      	; now l is sx*8 and h is sy
     122.  00:4540                      		
     123.  00:4540  7C                  	ld		a,h
     124.  00:4541  87 87 87            [3]	add		a,a
     125.  00:4544  67                  	ld		h,a
     126.  00:4545  F5                  	push	af
     127.  00:4546                      	
     128.  00:4546                      	; now h is sy*8
     129.  00:4546  F3                  	di
     130.  00:4547  3E 20               	ld 		a, 32
     131.  00:4549  D3 99               	out 	(0x99),a
     132.  00:454B  3E 91               	ld 		a, 17+128
     133.  00:454D  D3 99               	out 	(0x99),a
     134.  00:454F  FB                  	ei
     135.  00:4550                      
     136.  00:4550  0E 9B               	ld 		c, 0x9B
     137.  00:4552                      	
     138.  00:4552  CD 13 46            	call _waitvdp;
     139.  00:4555                      	
     140.  00:4555  ED 69               	out		(c), l 		; sx
     141.  00:4557  AF                  	xor a
     142.  00:4558  D3 9B               	out		(0x9B), a 	; sx (high)
     143.  00:455A                      	
     144.  00:455A  ED 61               	out		(c), h 		; sy
     145.  00:455C  F1                  	pop		af
     146.  00:455D  3E 02               	ld		a,2			; source page for tiles 32x32=1024 tiles
     147.  00:455F  CE 00               	adc		a,0
     148.  00:4561  D3 9B               	out 	(0x9B), a 	; sy (high-> page 2)
     149.  00:4563                      
     150.  00:4563  E1                  	pop		hl			; recover dx*8,dy*8
     151.  00:4564                      	
     152.  00:4564  ED 69               	out 	(c), l 		; dx
     153.  00:4566  AF                  	xor a
     154.  00:4567  D3 9B               	out 	(0x9B), a	; dx (high)
     155.  00:4569  ED 61               	out 	(c), h 		; dy
     156.  00:456B  3A 1F C0            	ld 		a,(_currentpage)	; destination page
     157.  00:456E  D3 9B               	out 	(0x9B), a	; dy (high-> page 0 or 1)
     158.  00:4570                      
     159.  00:4570  2E 08               	ld 		l,8 		; block size
     160.  00:4572                      
     161.  00:4572  ED 69               	out 	(c), l
     162.  00:4574  AF                  	xor a
     163.  00:4575  D3 9B               	out 	(0x9B), a
     164.  00:4577  ED 69               	out 	(c), l
     165.  00:4579  D3 9B               	out 	(0x9B), a
     166.  00:457B  D3 9B               	out 	(0x9B), a
     167.  00:457D  D3 9B               	out 	(0x9B), a
     168.  00:457F  C9                  	ret
     169.  00:4580                      
     170.  00:4580                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     171.  00:4580                      ; input
     172.  00:4580                      ; hl configured in window map 32x24
     173.  00:4580                      ;  e color
     174.  00:4580                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     175.  00:4580                      
     176.  00:4580                      plot_solid_box:
     177.  00:4580  1E 77               	ld		e,SolidColor+16*SolidColor		; solid color
     178.  00:4582                      
     179.  00:4582  29 29               [2]	add		hl,hl
     180.  00:4584  4D                  	ld		c,l			; C = dx*8
     181.  00:4585  7C                  	ld		a,h
     182.  00:4586  87 87 87            [3]	add		a,a
     183.  00:4589  47                  	ld		b,a			; B = dy*8
     184.  00:458A  C5                  	push	bc			; dx*8 and dy*8 on the stack
     185.  00:458B                      
     186.  00:458B  F3                  	di
     187.  00:458C  3E 24               	ld 		a, 36
     188.  00:458E  D3 99               	out 	(0x99),a
     189.  00:4590  3E 91               	ld 		a, 17+128
     190.  00:4592  D3 99               	out 	(0x99),a
     191.  00:4594  FB                  	ei
     192.  00:4595                      
     193.  00:4595  0E 9B               	ld 		c, 0x9B
     194.  00:4597                      	
     195.  00:4597  CD 13 46            	call _waitvdp;
     196.  00:459A  E1                  	pop		hl			; recover dx*8,dy*8
     197.  00:459B                      	
     198.  00:459B  ED 69               	out 	(c), l 		; dx
     199.  00:459D  AF                  	xor a
     200.  00:459E  D3 9B               	out 	(0x9B), a	; dx (high)
     201.  00:45A0  ED 61               	out 	(c), h 		; dy
     202.  00:45A2  3A 1F C0            	ld 		a,(_currentpage)	; destination page
     203.  00:45A5  D3 9B               	out 	(0x9B), a	; dy (high-> page 0 or 1)
     204.  00:45A7                      
     205.  00:45A7  2E 08               	ld 		l,8 		; block size
     206.  00:45A9                      
     207.  00:45A9  ED 69               	out 	(c), l
     208.  00:45AB  AF                  	xor a
     209.  00:45AC  D3 9B               	out 	(0x9B), a
     210.  00:45AE  ED 69               	out 	(c), l
     211.  00:45B0  D3 9B               	out 	(0x9B), a
     212.  00:45B2  ED 59               	out 	(c), e
     213.  00:45B4  D3 9B               	out 	(0x9B), a
     214.  00:45B6  2E C0               	ld		l,11000000B	; command HMMV
     215.  00:45B8  ED 69               	out 	(c), l
     216.  00:45BA  C9                  	ret
     442   00:45BB                      
     443   00:45BB                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     444   00:45BB                      
     445   00:45BB                      _clean_buffs:
     446   00:45BB  01 3F 0C            	ld	bc,2*WinWidth*WinWidth*2-1
     447   00:45BE  21 20 C0            	ld	hl,_shadow0
     448   00:45C1  36 FF               	ld	(hl),-1
     449   00:45C3  11 21 C0            	ld	de,_shadow0+1
     450   00:45C6  ED B0               	ldir
     451   00:45C8  C9                  	ret
     452   00:45C9                      	
     453   00:45C9                      ;Set VDP for writing at address CDE (17-bit) 
     454   00:45C9                      
     455   00:45C9                      _vdpsetvramwr:
     456   00:45C9  79                  	ld a,c
     457   00:45CA                      ;Set VDP for writing at address ADE (17-bit) ;
     458   00:45CA  CB 02               	rlc d
     459   00:45CC  17                  	rla
     460   00:45CD  CB 02               	rlc d
     461   00:45CF  17                  	rla
     462   00:45D0  CB 3A               	srl d ; primo shift, il secondo dopo la out
     463   00:45D2                      
     464   00:45D2  D3 99               	out (0x99),a ;set bits 14-16
     465   00:45D4  3E 8E               	ld a,14+128
     466   00:45D6  D3 99               	out (0x99),a
     467   00:45D8                      
     468   00:45D8  CB 3A               	srl d ; secondo shift.            
     469   00:45DA  7B                  	ld a,e ;set bits 0-7
     470   00:45DB  D3 99               	out (0x99),a
     471   00:45DD  7A                  	ld a,d ;set bits 8-13
     472   00:45DE  F6 40               	or 0x40 ; + write access
     473   00:45E0  D3 99               	out (0x99),a
     474   00:45E2  C9                  	ret
     475   00:45E3                      	
     476   00:45E3                      ;Set VDP port #98 to start reading at address CDE (17-bit) ;
     477   00:45E3                      
     478   00:45E3                      _vdpsetvramrd:
     479   00:45E3  79                  	ld a,c
     480   00:45E4                      ;Set VDP port #98 to start reading at address ADE (17-bit) ;
     481   00:45E4  CB 02               	rlc d
     482   00:45E6  17                  	rla
     483   00:45E7  CB 02               	rlc d
     484   00:45E9  17                  	rla
     485   00:45EA  CB 3A               	srl d ; primo shift, il secondo dopo la out
     486   00:45EC                      
     487   00:45EC  D3 99               	out (0x99),a ;set bits 14-16
     488   00:45EE  3E 8E               	ld a,14+128
     489   00:45F0  D3 99               	out (0x99),a
     490   00:45F2                      
     491   00:45F2  CB 3A               	srl d ; secondo shift.            
     492   00:45F4  7B                  	ld a,e ;set bits 0-7
     493   00:45F5  D3 99               	out (0x99),a
     494   00:45F7  7A                  	ld a,d ;set bits 8-13
     495   00:45F8  E6 3F               	and 0x3F
     496   00:45FA  D3 99               	out (0x99),a
     497   00:45FC  C9                  	ret
     498   00:45FD                      
     499   00:45FD                      ;Display page E in screen 5
     500   00:45FD                      _setpage:
     501   00:45FD  7B                  	ld a,e
     502   00:45FE  87                  	add a,a ;x32
     503   00:45FF  87                  	add a,a
     504   00:4600  87                  	add a,a
     505   00:4601  87                  	add a,a
     506   00:4602  87                  	add a,a
     507   00:4603  C6 1F               	add a,31
     508   00:4605  F3                  	di
     509   00:4606  D3 99               	out (0x99),a
     510   00:4608  3E 82               	ld a,2+128
     511   00:460A  D3 99               	out (0x99),a
     512   00:460C  FB                  	ei            
     513   00:460D  C9                  	ret
     514   00:460E                      
     515   00:460E  (00:005F)           chgmod        equ     0x005f      ;change graphic mode
     516   00:460E  (00:000C)           RDSLT         equ     0x000c      ;read address HL in slot A
     517   00:460E  (00:0156)           KILBUF        equ     0x0156      ;clear keyboard buffer
     518   00:460E                      
     519   00:460E                      _scr:
     520   00:460E  7B                  	ld  a,e
     521   00:460F  CD 5F 00            	call	chgmod
     522   00:4612  C9                  	ret
     523   00:4613                      
     524   00:4613                      
     525   00:4613                      _waitvdp:
     526   00:4613  F3                  	di
     527   00:4614  3E 02               	ld a,2
     528   00:4616  D3 99               	out (0x99),a
     529   00:4618  3E 8F               	ld a, 0x8f
     530   00:461A  D3 99               	out (0x99),a
     531   00:461C                      
     532   00:461C  DB 99               1:  in a,(0x99)
     533   00:461E  0F                  	rrca
     534   00:461F  DA 1C 46            	jp c, 1b
     535   00:4622                      
     536   00:4622  AF                  	xor a
     537   00:4623  D3 99               	out (0x99),a
     538   00:4625  3E 8F               	ld a, 0x8f
     539   00:4627  D3 99               	out (0x99),a
     540   00:4629  FB                  	ei
     541   00:462A  C9                  	ret
     542   00:462B                      
     543   00:462B                      
     544   00:462B                      	
     545   00:462B                      _print_fps:
     546   00:462B  ED 5B 08 C0         	ld	de,(_buffer+3)
     547   00:462F  16 00               	ld	d,0
     548   00:4631  21 E0 05            	ld	hl,1024+512-'0'+16
     549   00:4634  19                  	add	hl,de
     550   00:4635  EB                  	ex	de,hl
     551   00:4636                      	
     552   00:4636  21 FC 05            	ld	hl,2*(23*32+30)
     553   00:4639  CD 08 45            	call 	plot_foreground
     554   00:463C                      
     555   00:463C  3A 09 C0            	ld	a,(_buffer+4)
     556   00:463F  5F                  	ld	e,a
     557   00:4640  16 00               	ld	d,0
     558   00:4642  21 E0 05            	ld	hl,1024+512-'0'+16
     559   00:4645  19                  	add	hl,de
     560   00:4646  EB                  	ex	de,hl
     561   00:4647                      	
     562   00:4647  21 FE 05            	ld	hl,2*(23*32+31)
     563   00:464A  C3 08 45            	jp 	plot_foreground
     564   00:464D                      	
     565   00:464D                      
     566   00:464D                      ;-------------------------------------
     567   00:464D                      _compute_fps:
     568   00:464D  ED 5B 15 C0         	ld	de,(_fps)
     569   00:4651  01 05 C0            	ld	bc,_buffer
     570   00:4654                      
     571   00:4654                      int2ascii:
     572   00:4654                      	
     573   00:4654                      ; in de input 
     574   00:4654                      ; in bc output
     575   00:4654                      
     576   00:4654  EB                  	ex  de,hl
     577   00:4655  59                  	ld  e,c
     578   00:4656  50                  	ld  d,b
     579   00:4657                      
     580   00:4657                      Num2asc:
     581   00:4657  01 F0 D8            	ld  bc,-10000
     582   00:465A  CD 70 46            	call    Num1
     583   00:465D  01 18 FC            	ld  bc,-1000
     584   00:4660  CD 70 46            	call    Num1
     585   00:4663  01 9C FF            	ld  bc,-100
     586   00:4666  CD 70 46            	call    Num1
     587   00:4669  0E F6               	ld  c,-10
     588   00:466B  CD 70 46            	call    Num1
     589   00:466E  0E FF               	ld  c,-1
     590   00:4670                      
     591   00:4670                      Num1:   
     592   00:4670  3E 2F               	ld  a,'0'-1  ; '0' in the tileset
     593   00:4672                      
     594   00:4672                      Num2:   
     595   00:4672  3C                  	inc a
     596   00:4673  09                  	add hl,bc
     597   00:4674  38 FC               	jr  c,Num2
     598   00:4676  ED 42               	sbc hl,bc
     599   00:4678                      
     600   00:4678  12                  	ld  (de),a
     601   00:4679  13                  	inc de
     602   00:467A  C9                  	ret
     603   00:467B                      
     604   00:467B                      _metatable:
     605   00:467B  (07D0)              	incbin "metatable.bin"
     606   00:4E4B                      _backmap:
     607   00:4E4B  (0400)              	incbin "backmap.bin"
     608   00:524B                      
     609   00:524B                      ; start
     610   00:524B                      _mballon_start
     611   00:524B  11 00 C0            	ld	de,0xc000
     612   00:524E  21 59 52            	ld	hl,_relocate
     613   00:5251  01 0D 00            	ld	bc,_endrelocate-_relocate
     614   00:5254  ED B0               	ldir
     615   00:5256  C3 00 C0            	jp	0xc000
     616   00:5259                      _relocate:
     617   00:5259  3E 04               	ld	a,:mballon
     618   00:525B  32 00 60            	ld	(_bank1),a
     619   00:525E  3C                  	inc	a
     620   00:525F  32 00 70            	ld	(_bank2),a
     621   00:5262  2A 02 40            	ld	hl,(0x4002)
     622   00:5265  E9                  	jp	(hl)
     623   00:5266                      _endrelocate:
     624   00:5266                      
     625   00:5266                      
     626   00:5266                      	include enemies.asm
       1.  00:5266                      
       2.  00:5266                      
       3.  00:5266                      		struct enemy
       4.  00:5266                    < type 	db
       5.  00:5266                    < state 	db
       6.  00:5266                    < x		dw	
       7.  00:5266                    < y		dw
       8.  00:5266                    < dx		dw
       9.  00:5266                    < dy		dw
      10.  00:5266                    < nx		db
      11.  00:5266                    < ny		db
      12.  00:5266                    < buf		ds	8*8
      13.  00:5266                    < 	endstruct
      14.  00:5266                      
      15.  00:5266  (00:0008)           nenemies equ	8
      16.  00:5266                      
      17.  00:5266                      
      18.  00:5266                      ;;;;;;;;;;;;;;;;;;;;;;;;
      19.  00:5266                      ; in 
      20.  00:5266                      ;  de source in a WinHeight*WinWidth buffer of uints
      21.  00:5266                      ;  hl destination in enemylist
      22.  00:5266                      ;;;;;;;;;;;;;;;;;;;;;;;;
      23.  00:5266                      
      24.  00:5266                      save_background:
      25.  00:5266  E5                  	push	hl
      26.  00:5267  DD E1               	pop		ix
      27.  00:5269  01 0C 00            	ld	bc,enemy.buf
      28.  00:526C  09                  	add	hl,bc
      29.  00:526D                      	
      30.  00:526D  DD 7E 0B            	ld	a,(ix+enemy.ny)
      31.  00:5270  EB                  	ex	de,hl
      32.  00:5271  06 00               	ld	b,0
      33.  00:5273                      	
      34.  00:5273  DD 4E 0A            2:	ld	c,(ix+enemy.nx)
      35.  00:5276  CB 31               	sll	c
      36.  00:5278  D5                  	push	de
      37.  00:5279  ED B0               	ldir
      38.  00:527B  D1                  	pop	de
      39.  00:527C                      
      40.  00:527C  0E 1C               	ld	c,WinWidth
      41.  00:527E  EB                  	ex	de,hl
      42.  00:527F  09                  	add	hl,bc
      43.  00:5280  EB                  	ex	de,hl
      44.  00:5281  3D                  	dec	a
      45.  00:5282  C2 73 52            	jp	nz,2b
      46.  00:5285  C9                  	ret
      47.  00:5286                      	
      48.  00:5286                      ;;;;;;;;;;;;;;;;;;;;;;;;
      49.  00:5286                      ; in 
      50.  00:5286                      ;  de destination in a WinHeight*WinWidth buffer of uints
      51.  00:5286                      ;  hl source in enemylist
      52.  00:5286                      ;;;;;;;;;;;;;;;;;;;;;;;;
      53.  00:5286                      
      54.  00:5286                      restore_background:
      55.  00:5286  E5                  	push	hl
      56.  00:5287  DD E1               	pop		ix
      57.  00:5289  01 0C 00            	ld	bc,enemy.buf
      58.  00:528C  09                  	add	hl,bc
      59.  00:528D                      	
      60.  00:528D  DD 7E 0B            	ld	a,(ix+enemy.ny)
      61.  00:5290  06 00               	ld	b,0
      62.  00:5292                      	
      63.  00:5292  DD 4E 0A            2:	ld	c,(ix+enemy.nx)
      64.  00:5295  CB 31               	sll	c
      65.  00:5297  D5                  	push	de
      66.  00:5298  ED B0               	ldir
      67.  00:529A  D1                  	pop	de
      68.  00:529B                      
      69.  00:529B  0E 1C               	ld	c,WinWidth
      70.  00:529D  EB                  	ex	de,hl
      71.  00:529E  09                  	add	hl,bc
      72.  00:529F  EB                  	ex	de,hl
      73.  00:52A0  3D                  	dec	a
      74.  00:52A1  C2 92 52            	jp	nz,2b
      75.  00:52A4  C9                  	ret
      76.  00:52A5                      	
      77.  00:52A5                      	
      78.  00:52A5                      	
     627   00:52A5                      
     628   00:52A5  (01)                	page 1
     629   01:8000                      _frame:
     630   01:8000  (0951)              	incbin "frame_.bin"			
     631   01:8951                      	
     632   01:8951  (02)                	page 2
     633   02:8000                      _tiles:
     634   02:8000  (3582)              	incbin "tiles_.bin"
     635   02:B582                      
     636   02:B582  (03)                	page 3
     637   03:8000                      _level:
     638   03:8000  (0479)              	incbin "metamap_.bin"			
     639   03:8479                      
     640   03:8479  (04)                	page 4
     641   04:8000                      mballon:
     642   04:8000  (4000)              	incbin "MBALLOON.BIN",,0x4000	
     643   04:C000  (05)                	page 5
     644   05:8000  (4000)              	incbin "MBALLOON.BIN",0x4000	
     645   05:C000                      FINISH:
     646   05:C000                      
     647   05:C000                      ;---------------------------------------------------------
     648   05:C000                      ; Variables
     649   05:C000                      ;---------------------------------------------------------
     650   05:C000                      
     651   05:C000                      
     652   05:C000                      	
     653   05:C000  (C000)              	MAP 0xC000
     654   05:C000  (05:C000)           slotvar				#1
     655   05:C000  (05:C001)           slotram				#1
     656   05:C000  (05:C002)           SEL_NTSC			#1
     657   05:C000  (05:C003)           _dx					#1
     658   05:C000                      
     659   05:C000  (05:C004)           _ticxframe			#1
     660   05:C000                      
     661   05:C000  (05:C005)           _buffer:			#16
     662   05:C000  (05:C015)           _fps:				#2
     663   05:C000  (05:C017)           _nframes:			#2
     664   05:C000  (05:C019)           _vbit16:			#2
     665   05:C000  (05:C01B)           _levelmappos:		#2
     666   05:C000                      
     667   05:C000  (05:C01D)           _shadowbuff:		#2
     668   05:C000  (05:C01F)           _currentpage:		#1
     669   05:C000                      
     670   05:C000  (05:C020)           _shadow0:			#WinWidth*WinWidth*2
     671   05:C000  (05:C640)           _shadow1:			#WinWidth*WinWidth*2
     672   05:C000                      
     673   05:C000  (05:CC60)           _levelmap:			#mapWidth*mapHeight*2	
     674   05:C000                      
     675   05:C000  (05:EC60)           enemylist:			#enemy*nenemies
     676   05:C000  (0000)              	ENDMAP

    LABELS
-------------------------------------------------
00:00006000   _bank1
00:00007000   _bank2
00:0000037C X n_tiles
00:00000100   mapWidth
00:00000010   mapHeight
00:0000001C   WinWidth
00:00000010   WinHeight
00:00000000 X Transp
00:00000340   SolidTile
00:00000007   SolidColor
00:00000024 X ENASLT
00:00000138   RSLREG
00:0000FCC1   EXPTBL
00:00004010   search_slot
00:0000402F X search_slotram
00:00004050   search_slotram0
00:00004055 X setrompage0
00:0000405B   setrompage2
00:00004061 X setrampage2
00:00004067 X setrompage3
00:0000406D X setrampage3
00:00004073 X recbios
00:00004076   setslotpage0
00:000040AD X setslotpage1
00:000040EC   setslotpage2
00:00004133   setslotpage3
00:0000000C X rdslt
00:0000001C X CALSLT
00:00000180   chgcpu
00:0000FCC1 X exttbl
00:00004172   _set_r800
00:00004193   set_turbo_tr
00:0000419B   checkkbd
00:000041A6   START
00:000041BE   _ntsc
00:0000429D   main_loop
00:00004332   up
00:0000433F   dwn
00:0000434C   right
00:0000435C   left
00:0000FC9E   JIFFY
00:0000436E   _isr
00:0000439E   powerup
00:000000D5   GTSTCK
00:000000D8 X GTTRIG
00:000043A5   _cursors
00:00000099   vdpport1
00:0000009A   vdpport2
00:000043B3   levelcolors
00:000043D3   _SetPalet
00:000043E5   _vuitpakker
00:0000441D   _literal
00:00004422   __loop
00:0000442B X _getlen
00:00004431   lus
00:0000444E   lenok
00:0000445B   _mode7
00:00004461   _mode6
00:00004467   _mode5
00:0000446D   _mode4
00:00004473   _mode3
00:00004479   _mode2
00:00004489   offsok
00:00004494   _loop
00:000044AA   _getbit
00:000044AE   _getbitexx
00:000044B4   Depack_out
00:000044B6   setVwrite
00:000044C2   setVread
00:000044D0   __modes
00:000044DE   plot_tile
00:00004508   plot_foreground
00:0000451B   plot_trasp_tile
00:00004533   vdp_conf
00:00004580   plot_solid_box
00:000045BB   _clean_buffs
00:000045C9   _vdpsetvramwr
00:000045E3   _vdpsetvramrd
00:000045FD   _setpage
00:0000005F   chgmod
00:0000000C X RDSLT
00:00000156 X KILBUF
00:0000460E   _scr
00:00004613   _waitvdp
00:0000462B   _print_fps
00:0000464D   _compute_fps
00:00004654 X int2ascii
00:00004657 X Num2asc
00:00004670   Num1
00:00004672   Num2
00:0000467B   _metatable
00:00004E4B   _backmap
00:0000524B   _mballon_start
00:00005259   _relocate
00:00005266   _endrelocate
00:00000000 X enemy.type
00:00000001 X enemy.state
00:00000002 X enemy.x
00:00000004 X enemy.y
00:00000006 X enemy.dx
00:00000008 X enemy.dy
00:0000000A   enemy.nx
00:0000000B   enemy.ny
00:0000000C   enemy.buf
00:0000004C   enemy
00:00000008   nenemies
00:00005266 X save_background
00:00005286 X restore_background
01:00008000   _frame
02:00008000   _tiles
03:00008000   _level
04:00008000   mballon
05:0000C000 X FINISH
05:0000C000   slotvar
05:0000C001   slotram
05:0000C002   SEL_NTSC
05:0000C003   _dx
05:0000C004   _ticxframe
05:0000C005   _buffer
05:0000C015   _fps
05:0000C017   _nframes
05:0000C019   _vbit16
05:0000C01B   _levelmappos
05:0000C01D   _shadowbuff
05:0000C01F   _currentpage
05:0000C020   _shadow0
05:0000C640   _shadow1
05:0000CC60   _levelmap
05:0000EC60 X enemylist


 Output: main.out
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: *  Used: 00000000

    No output

 Output: maneldem.rom
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: 00004000  Used: 000012A5

   Address   Length Align   Label
   00004000    4773         search_slot
   000052A5   11611       <empty>

 Page: 01
  Org: 00008000  Size: 00004000  Used: 00000951

   Address   Length Align   Label
   00008000    2385         _frame
   00008951   13999       <empty>

 Page: 02
  Org: 00008000  Size: 00004000  Used: 00003582

   Address   Length Align   Label
   00008000   13698         _tiles
   0000B582    2686       <empty>

 Page: 03
  Org: 00008000  Size: 00004000  Used: 00000479

   Address   Length Align   Label
   00008000    1145         _level
   00008479   15239       <empty>

 Page: 04
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         mballon

 Page: 05
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         FINISH

 Page: 06
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 07
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 08
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 09
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0A
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0B
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0C
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0D
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0E
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0F
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>
