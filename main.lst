Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2015.02.26 - 23:34:37]

main.asm
Errors: 0

       1   00:0000                      ;----------------------------------------------------------------------------
       2   00:0000                      ;----------------------------------------------------------------------------
       3   00:0000                      
       4   00:0000                              output "maneldem.rom"
       5   00:0000                      
       6   00:0000                      		defpage	0,0x4000, 0x4000		; page 0 main code + far call routines
       7   00:0000                      		defpage	1,0x8000, 0x4000		; swapped data 
       8   00:0000                      		defpage	2..15
       9   00:0000                      	
      10   00:0000  (00:6000)           _bank1	equ	0x6000
      11   00:0000  (00:7000)           _bank2	equ	0x7000
      12   00:0000                      		
      13   00:0000  (00)                		page 0
      14   00:4000                      		
      15   00:4000                              org 4000h
      16   00:4000                              dw  4241h,START,0,0,0,0,0,0
      16   00:4000  41 42 A6 41 00 00 00 00 00 00 00 00 00 00 00 00 
      17   00:4010                      
      18   00:4010                      
      19   00:4010                      		include "header.asm"
       1.  00:4010  (00:037C)           n_tiles: equ 892
       2.  00:4010  (00:0100)           mapWidth:	equ	256
       3.  00:4010  (00:0010)           mapHeight:	equ	 16
       4.  00:4010  (00:001C)           WinWidth:	equ	 28
       5.  00:4010  (00:0010)           WinHeight:	equ	 16
       6.  00:4010  (00:0000)           Transp:	equ	  0
       7.  00:4010  (00:0340)           SolidTile:	equ	832
       8.  00:4010  (00:0007)           SolidColor:	equ	  7
      20   00:4010                      	
      21   00:4010                      		include "rominit64.asm"
       1.  00:4010                      
       2.  00:4010                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       3.  00:4010                      ; set pages and subslot
       4.  00:4010                      ;
       5.  00:4010                      
       6.  00:4010                      
       7.  00:4010  (00:0024)           ENASLT:			equ		024h
       8.  00:4010  (00:0138)           RSLREG:			equ		0138h
       9.  00:4010  (00:FCC1)           EXPTBL:			equ		0FCC1h	; Bios Slot / Expansion Slot
      10.  00:4010                      
      11.  00:4010                      
      12.  00:4010                      ; ----------------------------
      13.  00:4010                      ; pre-set main slot for page 3
      14.  00:4010                      ; and set sub-slot for page 3
      15.  00:4010                      ; ----------------------------
      16.  00:4010                      	macro	mainslot_setup n
      17.  00:4010                    < 	and		3
      18.  00:4010                    < [2]	rrca
      19.  00:4010                    < 	and		0xC0
      20.  00:4010                    < 	ld		c,a
      21.  00:4010                    < 	ld		a,d
      22.  00:4010                    < 	and		0x3F
      23.  00:4010                    < 	or		c
      24.  00:4010                    < 	ld		c,a					; Primary slot value with main slot in page 3
      25.  00:4010                    < 
      26.  00:4010                    < 	ld		a,b
      27.  00:4010                    < 	and		0x0C
      28.  00:4010                    < [2]	rrca
      29.  00:4010                    < 	and		3
      30.  00:4010                    < 	ld		b,a					; B = Expanded slot in page 3
      31.  00:4010                    < 	ld		a,c
      32.  00:4010                    < 	out		(0A8h),a			; Slot : Main Slot, xx, xx, Main slot
      33.  00:4010                    < 	ld		a,(0FFFFh)
      34.  00:4010                    < 	cpl
      35.  00:4010                    < 	if (n<=4)
      36.  00:4010                    < [n]	RLCA
      37.  00:4010                    < 	else
      38.  00:4010                    < [8-n] RRCA	
      39.  00:4010                    < 	endif
      40.  00:4010                    < 	and		0xFC
      41.  00:4010                    < 	or		b
      42.  00:4010                    < 	if (n<=4)
      43.  00:4010                    < [n]	RRCA
      44.  00:4010                    < 	else
      45.  00:4010                    < [8-n] RLCA
      46.  00:4010                    < 	endif
      47.  00:4010                    < 	ld		(0FFFFh),a		; Expanded slot selected
      48.  00:4010                    < 	ld		b,a				; save for later	
      49.  00:4010                    < 	endmacro
      50.  00:4010                      		
      51.  00:4010                      
      52.  00:4010                      ; ------------------------------
      53.  00:4010                      ; SEARCH_SLOT
      54.  00:4010                      ; look for the slot of our rom
      55.  00:4010                      ; active in page 1
      56.  00:4010                      ; ------------------------------
      57.  00:4010                      
      58.  00:4010                      search_slot:
      59.  00:4010  CD 38 01            	call	RSLREG
      60.  00:4013  0F 0F               [2]	rrca
      61.  00:4015  E6 03               	and		3
      62.  00:4017  4F                  	ld		c,a
      63.  00:4018  06 00               	ld		b,0
      64.  00:401A  21 C1 FC            	ld		hl,EXPTBL
      65.  00:401D  09                  	add		hl,bc
      66.  00:401E  7E                  	ld		a,(hl)
      67.  00:401F  E6 80               	and		080h
      68.  00:4021  B1                  	or		c
      69.  00:4022  4F                  	ld		c,a
      70.  00:4023  23 23 23 23         [4]	inc		hl
      71.  00:4027  7E                  	ld		a,(hl)
      72.  00:4028  E6 0C               	and		0Ch
      73.  00:402A  B1                  	or		c
      74.  00:402B  32 00 C0            	ld		(slotvar),a
      75.  00:402E  C9                  	ret
      76.  00:402F                      	
      77.  00:402F                      ; ------------------------------
      78.  00:402F                      ; look for the slot of ram
      79.  00:402F                      ; active in page 3
      80.  00:402F                      ; ------------------------------
      81.  00:402F                      
      82.  00:402F                      search_slotram:
      83.  00:402F  F3                  	di
      84.  00:4030  CD 38 01            	call	RSLREG
      85.  00:4033  07 07               [2]	rlca
      86.  00:4035  E6 03               	and		3
      87.  00:4037  4F                  	ld		c,a
      88.  00:4038  06 00               	ld		b,0
      89.  00:403A  21 C1 FC            	ld		hl,EXPTBL
      90.  00:403D  09                  	add		hl,bc
      91.  00:403E  7E                  	ld		a,(hl)
      92.  00:403F  E6 80               	and		080h
      93.  00:4041  28 0D               	jr		z,search_slotram0
      94.  00:4043  B1                  	or		c
      95.  00:4044  4F                  	ld		c,a
      96.  00:4045  23 23 23 23         [4]	inc		hl
      97.  00:4049  7E                  	ld		a,(hl)
      98.  00:404A  07 07 07 07         [4]	rlca
      99.  00:404E  E6 0C               	and		0Ch
     100.  00:4050                      search_slotram0:
     101.  00:4050  B1                  	or		c
     102.  00:4051  32 01 C0            	ld		(slotram),a
     103.  00:4054  C9                  	ret
     104.  00:4055                      	
     105.  00:4055                      ; ------------------------------
     106.  00:4055                      ; SETROMPAGE0
     107.  00:4055                      ; Set the chart in
     108.  00:4055                      ; Page 0
     109.  00:4055                      ; -----------------------------
     110.  00:4055                      
     111.  00:4055                      setrompage0:
     112.  00:4055  3A 00 C0            	ld		a,(slotvar)
     113.  00:4058  C3 76 40            	jp		setslotpage0
     114.  00:405B                      
     115.  00:405B                      setrompage2:
     116.  00:405B  3A 00 C0            	ld		a,(slotvar)
     117.  00:405E  C3 EC 40            	jp		setslotpage2
     118.  00:4061                      
     119.  00:4061                      setrampage2:
     120.  00:4061  3A 01 C0            	ld		a,(slotram)
     121.  00:4064  C3 EC 40            	jp		setslotpage2
     122.  00:4067                      	
     123.  00:4067                      setrompage3:
     124.  00:4067  3A 00 C0            	ld		a,(slotvar)
     125.  00:406A  C3 33 41            	jp		setslotpage3
     126.  00:406D                      
     127.  00:406D                      setrampage3:
     128.  00:406D  3A 01 C0            	ld		a,(slotram)
     129.  00:4070  C3 33 41            	jp		setslotpage3
     130.  00:4073                      	
     131.  00:4073                      ; ------------------------------
     132.  00:4073                      ; RECBIOS
     133.  00:4073                      ; set the bios ROM
     134.  00:4073                      ; -------------------------------
     135.  00:4073                      recbios:
     136.  00:4073  3A C1 FC            	ld		a,(EXPTBL)
     137.  00:4076                      
     138.  00:4076                      ; ---------------------------
     139.  00:4076                      ; SETSLOTPAGE0
     140.  00:4076                      ; Set the slot passed in A
     141.  00:4076                      ; at page 0 in the Z80 address space
     142.  00:4076                      ; A: Format FxxxSSPP
     143.  00:4076                      ; ----------------------------
     144.  00:4076                      
     145.  00:4076                      setslotpage0:
     146.  00:4076  F3                  	di
     147.  00:4077  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     148.  00:4078  DB A8               	in		a,(0A8h)
     149.  00:407A  E6 FC               	and		0xFC
     150.  00:407C  57                  	ld		d,a					; D = Primary slot value
     151.  00:407D  78                  	ld		a,b
     152.  00:407E  E6 03               	and		3
     153.  00:4080  B2                  	or		d
     154.  00:4081  57                  	ld		d,a		; D = Final Value for primary slot
     155.  00:4082  78                  	ld		a,b		; Check if expanded
     156.  00:4083  CB 7F               	bit		7,a
     157.  00:4085  28 22               	jr		z,1f	; Not Expanded
     158.  00:4087                      	mainslot_setup	0
     158.  00:4087  E6 03             >  and  3
     158.  00:4089  0F 0F             > [2] rrca
     158.  00:408B  E6 C0             >  and  0xC0
     158.  00:408D  4F                >  ld  c,a
     158.  00:408E  7A                >  ld  a,d
     158.  00:408F  E6 3F             >  and  0x3F
     158.  00:4091  B1                >  or  c
     158.  00:4092  4F                >  ld  c,a
     158.  00:4093                    > 
     158.  00:4093  78                >  ld  a,b
     158.  00:4094  E6 0C             >  and  0x0C
     158.  00:4096  0F 0F             > [2] rrca
     158.  00:4098  E6 03             >  and  3
     158.  00:409A  47                >  ld  b,a
     158.  00:409B  79                >  ld  a,c
     158.  00:409C  D3 A8             >  out  (0A8h),a
     158.  00:409E  3A FF FF          >  ld  a,(0FFFFh)
     158.  00:40A1  2F                >  cpl
     158.  00:40A2                    >  if (n<=4)
     158.  00:40A2                    > [n] RLCA
     158.  00:40A2                    >  else
     158.  00:40A2                    ~ [8-n] RRCA
     158.  00:40A2                    ~  endif
     158.  00:40A2  E6 FC             >  and  0xFC
     158.  00:40A4  B0                >  or  b
     158.  00:40A5                    >  if (n<=4)
     158.  00:40A5                    > [n] RRCA
     158.  00:40A5                    >  else
     158.  00:40A5                    ~ [8-n] RLCA
     158.  00:40A5                    ~  endif
     158.  00:40A5  32 FF FF          >  ld  (0FFFFh),a
     158.  00:40A8  47                >  ld  b,a
     159.  00:40A9  7A                  1:	ld		a,d				; A = Final value
     160.  00:40AA  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     161.  00:40AC  C9                  	ret
     162.  00:40AD                      
     163.  00:40AD                      ; ---------------------------
     164.  00:40AD                      ; SETSLOTPAGE1
     165.  00:40AD                      ; Set the slot passed in A
     166.  00:40AD                      ; at page 1 in the Z80 address space
     167.  00:40AD                      ; A: Format FxxxSSPP
     168.  00:40AD                      ; ----------------------------
     169.  00:40AD                      
     170.  00:40AD                      setslotpage1:
     171.  00:40AD  F3                  	di
     172.  00:40AE  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     173.  00:40AF  DB A8               	in		a,(0A8h)
     174.  00:40B1  0F 0F               [2]	RRCA
     175.  00:40B3  E6 FC               	and		0xFC
     176.  00:40B5  57                  	ld		d,a					; D = Primary slot value
     177.  00:40B6  78                  	ld		a,b
     178.  00:40B7  E6 03               	and		3
     179.  00:40B9  B2                  	or		d
     180.  00:40BA  07 07               [2]	RLCA
     181.  00:40BC  57                  	ld		d,a		; D = Final Value for primary slot
     182.  00:40BD  78                  	ld		a,b		; Check if expanded
     183.  00:40BE  CB 7F               	bit		7,a
     184.  00:40C0  28 26               	jr		z,1f	; Not Expanded
     185.  00:40C2                      	mainslot_setup	6
     185.  00:40C2  E6 03             >  and  3
     185.  00:40C4  0F 0F             > [2] rrca
     185.  00:40C6  E6 C0             >  and  0xC0
     185.  00:40C8  4F                >  ld  c,a
     185.  00:40C9  7A                >  ld  a,d
     185.  00:40CA  E6 3F             >  and  0x3F
     185.  00:40CC  B1                >  or  c
     185.  00:40CD  4F                >  ld  c,a
     185.  00:40CE                    > 
     185.  00:40CE  78                >  ld  a,b
     185.  00:40CF  E6 0C             >  and  0x0C
     185.  00:40D1  0F 0F             > [2] rrca
     185.  00:40D3  E6 03             >  and  3
     185.  00:40D5  47                >  ld  b,a
     185.  00:40D6  79                >  ld  a,c
     185.  00:40D7  D3 A8             >  out  (0A8h),a
     185.  00:40D9  3A FF FF          >  ld  a,(0FFFFh)
     185.  00:40DC  2F                >  cpl
     185.  00:40DD                    >  if (n<=4)
     185.  00:40DD                    ~ [n] RLCA
     185.  00:40DD                    ~  else
     185.  00:40DD  0F 0F             > [8-n] RRCA
     185.  00:40DF                    >  endif
     185.  00:40DF  E6 FC             >  and  0xFC
     185.  00:40E1  B0                >  or  b
     185.  00:40E2                    >  if (n<=4)
     185.  00:40E2                    ~ [n] RRCA
     185.  00:40E2                    ~  else
     185.  00:40E2  07 07             > [8-n] RLCA
     185.  00:40E4                    >  endif
     185.  00:40E4  32 FF FF          >  ld  (0FFFFh),a
     185.  00:40E7  47                >  ld  b,a
     186.  00:40E8  7A                  1:	ld		a,d				; A = Final value
     187.  00:40E9  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     188.  00:40EB  C9                  	ret
     189.  00:40EC                      	
     190.  00:40EC                      
     191.  00:40EC                      ; ---------------------------
     192.  00:40EC                      ; SETSLOTPAGE2
     193.  00:40EC                      ; Set the slot passed in A
     194.  00:40EC                      ; at page 2 in the Z80 address space
     195.  00:40EC                      ; A: Format FxxxSSPP
     196.  00:40EC                      ; ----------------------------
     197.  00:40EC                      
     198.  00:40EC                      setslotpage2:
     199.  00:40EC  F3                  	di
     200.  00:40ED  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     201.  00:40EE  DB A8               	in		a,(0A8h)
     202.  00:40F0  07 07 07 07         [4]	RLCA
     203.  00:40F4  E6 FC               	and		0xFC
     204.  00:40F6  57                  	ld		d,a					; D = Primary slot value
     205.  00:40F7  78                  	ld		a,b
     206.  00:40F8  E6 03               	and		3
     207.  00:40FA  B2                  	or		d
     208.  00:40FB  0F 0F 0F 0F         [4]	RRCA
     209.  00:40FF  57                  	ld		d,a		; D = Final Value for primary slot
     210.  00:4100  78                  	ld		a,b		; Check if expanded
     211.  00:4101  CB 7F               	bit		7,a
     212.  00:4103  28 2A               	jr		z,1f	; Not Expanded
     213.  00:4105                      	mainslot_setup	4
     213.  00:4105  E6 03             >  and  3
     213.  00:4107  0F 0F             > [2] rrca
     213.  00:4109  E6 C0             >  and  0xC0
     213.  00:410B  4F                >  ld  c,a
     213.  00:410C  7A                >  ld  a,d
     213.  00:410D  E6 3F             >  and  0x3F
     213.  00:410F  B1                >  or  c
     213.  00:4110  4F                >  ld  c,a
     213.  00:4111                    > 
     213.  00:4111  78                >  ld  a,b
     213.  00:4112  E6 0C             >  and  0x0C
     213.  00:4114  0F 0F             > [2] rrca
     213.  00:4116  E6 03             >  and  3
     213.  00:4118  47                >  ld  b,a
     213.  00:4119  79                >  ld  a,c
     213.  00:411A  D3 A8             >  out  (0A8h),a
     213.  00:411C  3A FF FF          >  ld  a,(0FFFFh)
     213.  00:411F  2F                >  cpl
     213.  00:4120                    >  if (n<=4)
     213.  00:4120  07 07 07 07       > [n] RLCA
     213.  00:4124                    >  else
     213.  00:4124                    ~ [8-n] RRCA
     213.  00:4124                    ~  endif
     213.  00:4124  E6 FC             >  and  0xFC
     213.  00:4126  B0                >  or  b
     213.  00:4127                    >  if (n<=4)
     213.  00:4127  0F 0F 0F 0F       > [n] RRCA
     213.  00:412B                    >  else
     213.  00:412B                    ~ [8-n] RLCA
     213.  00:412B                    ~  endif
     213.  00:412B  32 FF FF          >  ld  (0FFFFh),a
     213.  00:412E  47                >  ld  b,a
     214.  00:412F  7A                  1:	ld		a,d				; A = Final value
     215.  00:4130  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     216.  00:4132  C9                  	ret
     217.  00:4133                      	
     218.  00:4133                      ; ---------------------------
     219.  00:4133                      ; SETSLOTPAGE3
     220.  00:4133                      ; Set the slot passed in A
     221.  00:4133                      ; at page 3 in the Z80 address space
     222.  00:4133                      ; A: Format FxxxSSPP
     223.  00:4133                      ; ----------------------------
     224.  00:4133                      	
     225.  00:4133                      setslotpage3:
     226.  00:4133  F3                  	di
     227.  00:4134  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     228.  00:4135  DB A8               	in		a,(0A8h)
     229.  00:4137  07 07               [2]	RLCA
     230.  00:4139  E6 FC               	and		0xFC
     231.  00:413B  57                  	ld		d,a					; D = Primary slot value
     232.  00:413C  78                  	ld		a,b
     233.  00:413D  E6 03               	and		3
     234.  00:413F  B2                  	or		d
     235.  00:4140  0F 0F               [2]	RRCA	
     236.  00:4142  57                  	ld		d,a		; D = Final Value for primary slot
     237.  00:4143  78                  	ld		a,b		; Check if expanded
     238.  00:4144  CB 7F               	bit		7,a
     239.  00:4146  28 26               	jr		z,1f	; Not Expanded
     240.  00:4148                      	mainslot_setup	2
     240.  00:4148  E6 03             >  and  3
     240.  00:414A  0F 0F             > [2] rrca
     240.  00:414C  E6 C0             >  and  0xC0
     240.  00:414E  4F                >  ld  c,a
     240.  00:414F  7A                >  ld  a,d
     240.  00:4150  E6 3F             >  and  0x3F
     240.  00:4152  B1                >  or  c
     240.  00:4153  4F                >  ld  c,a
     240.  00:4154                    > 
     240.  00:4154  78                >  ld  a,b
     240.  00:4155  E6 0C             >  and  0x0C
     240.  00:4157  0F 0F             > [2] rrca
     240.  00:4159  E6 03             >  and  3
     240.  00:415B  47                >  ld  b,a
     240.  00:415C  79                >  ld  a,c
     240.  00:415D  D3 A8             >  out  (0A8h),a
     240.  00:415F  3A FF FF          >  ld  a,(0FFFFh)
     240.  00:4162  2F                >  cpl
     240.  00:4163                    >  if (n<=4)
     240.  00:4163  07 07             > [n] RLCA
     240.  00:4165                    >  else
     240.  00:4165                    ~ [8-n] RRCA
     240.  00:4165                    ~  endif
     240.  00:4165  E6 FC             >  and  0xFC
     240.  00:4167  B0                >  or  b
     240.  00:4168                    >  if (n<=4)
     240.  00:4168  0F 0F             > [n] RRCA
     240.  00:416A                    >  else
     240.  00:416A                    ~ [8-n] RLCA
     240.  00:416A                    ~  endif
     240.  00:416A  32 FF FF          >  ld  (0FFFFh),a
     240.  00:416D  47                >  ld  b,a
     241.  00:416E  7A                  1:	ld		a,d				; A = Final value
     242.  00:416F  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     243.  00:4171  C9                  	ret
     244.  00:4172                      
     245.  00:4172                      	
      22   00:4172                      
      23   00:4172  (00:000C)           rdslt	equ	0x000c
      24   00:4172  (00:001C)           CALSLT	equ	0x001c
      25   00:4172  (00:0180)           chgcpu	equ	0x0180	; change cpu mode
      26   00:4172  (00:FCC1)           exttbl	equ	0xfcc1	; main rom slot
      27   00:4172                      
      28   00:4172                      
      29   00:4172                      ; Switch to r800 rom mode
      30   00:4172                      	
      31   00:4172                      _set_r800:
      32   00:4172  DB AA               		in	a,(0aah)
      33   00:4174  E6 F0               		and 011110000B			; upper 4 bits contain info to preserve
      34   00:4176  F6 06               		or	6
      35   00:4178  D3 AA               		out (0aah),a
      36   00:417A  DB A9               		in	a,(0a9h)
      37   00:417C  6F                  		ld	l,a
      38   00:417D                      
      39   00:417D  3A 2D 00            		ld	a,(0x002d)
      40   00:4180  FE 03               		cp	3					; this is a TR
      41   00:4182  7D                  		ld	a,l
      42   00:4183  28 0E               		jr	z,set_turbo_tr
      43   00:4185                      								; this is anything else
      44   00:4185  E6 02               		and	0x02				; CTR
      45   00:4187  C0                  		ret	nz					; if NZ, CTR is not pressed set the turbo
      46   00:4188                      
      47   00:4188  3A 80 01            		ld	A,(chgcpu)
      48   00:418B  FE C3               		cp	0C3h
      49   00:418D  3E 81               		ld	a,81h              ; R800 ROM mode or any other turbo
      50   00:418F  CC 80 01            		call	z,chgcpu
      51   00:4192  C9                  		ret
      52   00:4193                      
      53   00:4193                      set_turbo_tr
      54   00:4193  E6 02               		and	0x02				; CTR
      55   00:4195  C8                  		ret	z					; if Z, CTR is pressed -> do not set the turbo
      56   00:4196  3E 81               		ld	a,81h              	; R800 ROM mode
      57   00:4198  C3 80 01            		jp chgcpu
      58   00:419B                      		
      59   00:419B                      	
      60   00:419B                      checkkbd:
      61   00:419B  DB AA               	in	a,(0aah)
      62   00:419D  E6 F0               	and 011110000B			; upper 4 bits contain info to preserve
      63   00:419F  B3                  	or	e
      64   00:41A0  D3 AA               	out (0aah),a
      65   00:41A2  DB A9               	in	a,(0a9h)
      66   00:41A4  6F                  	ld	l,a
      67   00:41A5  C9                  	ret
      68   00:41A6                      ;-------------------------------------
      69   00:41A6                      ; Entry point
      70   00:41A6                      ;-------------------------------------
      71   00:41A6                      START:
      72   00:41A6  1E 05                       ld		e,5
      73   00:41A8  CD DF 45            		call	_scr
      74   00:41AB                      
      75   00:41AB  CD 72 41            		call 	_set_r800
      76   00:41AE  CD 6F 43                    call    powerup
      77   00:41B1                      
      78   00:41B1  1E 07               		ld	e,7
      79   00:41B3  CD 9B 41            		call	checkkbd
      80   00:41B6  E6 04               		and	0x04
      81   00:41B8  CA 1C 52            		jp 	z,_mballon_start
      82   00:41BB                      		
      83   00:41BB  11 00 00            		ld		de,0
      84   00:41BE  4B                  		ld		c,e
      85   00:41BF  F3                  		di
      86   00:41C0  CD 9A 45            		call	_vdpsetvramwr
      87   00:41C3  01 00 00            		ld		bc,0x0000
      88   00:41C6  AF                  1:		xor		a
      89   00:41C7  D3 98               		out		(0x98),a
      90   00:41C9  0B                  		dec		bc
      91   00:41CA  78                  		ld		a,b
      92   00:41CB  B1                  		or		c
      93   00:41CC  20 F8               		jr	nz,1b
      94   00:41CE                      		
      95   00:41CE  F3                  		di
      96   00:41CF                      		// border color
      97   00:41CF  3E 55               		ld		a,0x55
      98   00:41D1  D3 99               		out		(0x99),a
      99   00:41D3  3E 87               		ld		a,128+7
     100   00:41D5  D3 99               		out		(0x99),a
     101   00:41D7                      		
     102   00:41D7                      		// Disable sprites + TP
     103   00:41D7  3A E7 FF            		ld		a,(0xFFE7)
     104   00:41DA  F6 22               		or		2+32
     105   00:41DC  32 E7 FF            		ld		(0xFFE7),a
     106   00:41DF  D3 99               		out		(0x99),a
     107   00:41E1  3E 88               		ld		a,128+8
     108   00:41E3  D3 99               		out		(0x99),a
     109   00:41E5                      		
     110   00:41E5                      		// Set 192 lines @50Hz (PAL assumed!)
     111   00:41E5  3A E8 FF            		ld		a,(0xFFE8)
     112   00:41E8  E6 7F               		and		127
     113   00:41EA  F6 02               		or		2
     114   00:41EC  32 E8 FF            		ld		(0xFFE8),a
     115   00:41EF  D3 99               		out		(0x99),a
     116   00:41F1  3E 89               		ld		a,128+9
     117   00:41F3  D3 99               		out		(0x99),a
     118   00:41F5  FB                  		ei
     119   00:41F6                      			
     120   00:41F6  3E C3               		LD	A,0xC3
     121   00:41F8  21 4A 43            		LD	HL,_isr
     122   00:41FB  F3                  		DI
     123   00:41FC  32 9F FD            		LD	(0xFD9F),A
     124   00:41FF  22 A0 FD            		LD	(0xFDA0),HL
     125   00:4202  FB                  		EI
     126   00:4203                      
     127   00:4203  CD 8C 45            		call	_clean_buffs
     128   00:4206                      
     129   00:4206  CD A4 43            		call	_SetPalet
     130   00:4209  1E 00               		ld		e,0
     131   00:420B  CD CE 45                    call	_setpage
     132   00:420E                      		
     133   00:420E                      		; unpack level map (meta_tiles)
     134   00:420E  3E 03               		ld	a, :_level
     135   00:4210  32 00 70            		ld	(_bank2),a
     136   00:4213                      		
     137   00:4213  AF                  		xor	a
     138   00:4214  32 18 C0            		ld		(_vbit16 ),a
     139   00:4217  11 00 80            		ld		de,	_level
     140   00:421A  01 00 00            		ld		bc,0
     141   00:421D  CD B6 43            		call	_vuitpakker 
     142   00:4220                      		
     143   00:4220  11 00 00            		ld		de,0
     144   00:4223  4B                  		ld		c,e
     145   00:4224  CD B4 45            		call	_vdpsetvramrd
     146   00:4227  21 5F CC            		ld		hl,_levelmap
     147   00:422A  11 00 20            		ld		de,mapWidth*mapHeight*2
     148   00:422D  0E 98               		ld		c,0x98
     149   00:422F  ED A2               1:		ini
     150   00:4231  1B                  		dec	de
     151   00:4232  7A                  		ld	a,d
     152   00:4233  B3                  		or	e
     153   00:4234  20 F9               		jr	nz,1b
     154   00:4236                      
     155   00:4236                      		; unpack frame
     156   00:4236  3E 01               		ld		a, :_frame
     157   00:4238  32 00 70            		ld		(_bank2),a
     158   00:423B                      		
     159   00:423B  AF                  		xor	a
     160   00:423C  32 18 C0            		ld		(_vbit16 ),a
     161   00:423F  11 00 80            		ld		de,	_frame
     162   00:4242  01 00 00            		ld		bc,0
     163   00:4245  CD B6 43            		call	_vuitpakker 
     164   00:4248                      
     165   00:4248  11 00 80            		ld		de,	_frame
     166   00:424B  01 00 80            		ld		bc,0x8000
     167   00:424E  CD B6 43            		call	_vuitpakker 
     168   00:4251                      		
     169   00:4251  1E 02               		ld		e,2
     170   00:4253  CD CE 45                    call	_setpage
     171   00:4256                      
     172   00:4256                      		; unpack tileset
     173   00:4256  3E 02               		ld		a, :_tiles
     174   00:4258  32 00 70            		ld		(_bank2),a
     175   00:425B                      		
     176   00:425B  3E 01               		ld		a,1
     177   00:425D  32 18 C0            		ld		(_vbit16 ),a
     178   00:4260  11 00 80            		ld		de,	_tiles
     179   00:4263  01 00 00            		ld		bc,0
     180   00:4266  CD B6 43            		call	_vuitpakker 
     181   00:4269                      
     182   00:4269                      		; main init
     183   00:4269                      			
     184   00:4269  21 00 00            		ld		hl,0
     185   00:426C  22 1A C0            		ld		(_levelmappos),hl
     186   00:426F  22 16 C0            		ld		(_nframes),hl
     187   00:4272  7C                  		ld		a,h
     188   00:4273  32 1E C0            		ld		(_currentpage),a
     189   00:4276  32 02 C0            		ld		(_dx),a
     190   00:4279                      		
     191   00:4279                      main_loop:
     192   00:4279  AF                  		xor		a
     193   00:427A  32 03 C0            		ld		(_ticxframe),a
     194   00:427D                      
     195   00:427D  3A 1E C0            		ld		a,(_currentpage)
     196   00:4280  EE 01               		xor		1
     197   00:4282  32 1E C0            		ld		(_currentpage),a
     198   00:4285  EE 01               		xor		1
     199   00:4287  5F                  		ld		e,a
     200   00:4288  76                  		halt
     201   00:4289  CD CE 45                    call	_setpage
     202   00:428C  CB 43               		bit		0,e
     203   00:428E  21 3F C6            		ld		hl,_shadow1
     204   00:4291  20 03               		jr		nz,1f
     205   00:4293  21 1F C0            		ld		hl,_shadow0
     206   00:4296  22 1C C0            1:		ld		(_shadowbuff),hl
     207   00:4299                      
     208   00:4299  0E 10               		ld		c,WinHeight
     209   00:429B                      		
     210   00:429B  2A 1A C0            		ld		hl,(_levelmappos)
     211   00:429E                      		repeat 2
     212   00:429E                    < 		srl		h
     213   00:429E                    < 		rr		l
     214   00:429E                    < 		endrepeat
     214   00:429E  CB 3C CB 1D CB 3C CB 1D 
     215   00:42A6  CB 85               		res		0,l
     216   00:42A8  11 5F CC            		ld		de,_levelmap
     217   00:42AB  19                  		add		hl,de
     218   00:42AC  EB                  		ex		de,hl			; de -> levelmap
     219   00:42AD  21 42 00            		ld		hl,2*32+2		; hl -> screen 
     220   00:42B0                      		
     221   00:42B0  06 1C               2:		ld		b,WinWidth
     222   00:42B2  D5                  		push	de
     223   00:42B3                      
     224   00:42B3  D5                  3:		push	de
     225   00:42B4  E5                  		push	hl
     226   00:42B5                      		
     227   00:42B5  EB                  		ex		de,hl
     228   00:42B6  5E                  		ld		e,(hl)
     229   00:42B7  23                  		inc		hl
     230   00:42B8  56                  		ld		d,(hl)		; DE = meta tile
     231   00:42B9                      		
     232   00:42B9  EB                  		ex		de,hl
     233   00:42BA  29 29 29            [3]		add		hl,hl
     234   00:42BD                      		
     235   00:42BD  11 4C 46            		ld		de,_metatable
     236   00:42C0  19                  		add		hl,de
     237   00:42C1  3A 1A C0            		ld		a,(_levelmappos)
     238   00:42C4  E6 06               		and		00000110B
     239   00:42C6  16 00               		ld		d,0
     240   00:42C8  5F                  		ld		e,a
     241   00:42C9  19                  		add		hl,de
     242   00:42CA  5E                  		ld		e,(hl)
     243   00:42CB  23                  		inc		hl
     244   00:42CC  56                  		ld		d,(hl)		; DE = tile
     245   00:42CD                      
     246   00:42CD  E1                  		pop		hl			; HL = screen position
     247   00:42CE  E5                  		push	hl
     248   00:42CF                      
     249   00:42CF  C5                  		push	bc
     250   00:42D0  CD AF 44            		call	plot_tile
     251   00:42D3  C1                  		pop		bc
     252   00:42D4  E1                  		pop		hl
     253   00:42D5  D1                  		pop		de
     254   00:42D6                      		
     255   00:42D6  23                  		inc		hl			; the screen in WinWidthxWinHeight
     256   00:42D7                      		
     257   00:42D7  13 13               [2]		inc		de			; the levelmap is int
     258   00:42D9  10 D8               		djnz	3b
     259   00:42DB                      		
     260   00:42DB                      		if (WinWidth<32)
     261   00:42DB  11 04 00            			ld	de,32-WinWidth	; only if WinWidth<32
     262   00:42DE  19                  			add	hl,de
     263   00:42DF                      		endif
     264   00:42DF                      		
     265   00:42DF  D1                  		pop		de
     266   00:42E0                      		
     267   00:42E0                      		if (mapWidth=256)
     268   00:42E0  14 14               [2]			inc d
     269   00:42E2                      		else
     270   00:42E2                    ~ 			push	hl
     271   00:42E2                    ~ 			ld		hl,mapWidth*2
     272   00:42E2                    ~ 			add		hl,de
     273   00:42E2                    ~ 			ex		de,hl
     274   00:42E2                    ~ 			pop		hl
     275   00:42E2                    ~ 		endif
     276   00:42E2                      		
     277   00:42E2  0D                  		dec		c
     278   00:42E3  20 CB               		jr	nz,2b
     279   00:42E5                      		
     280   00:42E5  CD 1E 46            		call	_compute_fps
     281   00:42E8  CD FC 45            		call	_print_fps
     282   00:42EB                      
     283   00:42EB  2A 16 C0            		ld		hl,(_nframes)
     284   00:42EE  23                  		inc		hl
     285   00:42EF  22 16 C0            		ld		(_nframes),hl
     286   00:42F2                      
     287   00:42F2                      		
     288   00:42F2  CD 76 43            		call	_cursors
     289   00:42F5  7D                  		ld		a,l
     290   00:42F6  FE 01               		cp		1
     291   00:42F8  CA 0E 43            		jp		z,up
     292   00:42FB  FE 03               		cp		3
     293   00:42FD  CA 28 43            		jp		z,right
     294   00:4300  FE 05               		cp		5
     295   00:4302  CA 1B 43            		jp		z,dwn
     296   00:4305  FE 07               		cp		7
     297   00:4307  CA 38 43            		jp		z,left
     298   00:430A                      		
     299   00:430A  C3 79 42            		jp      main_loop
     300   00:430D                      
     301   00:430D  C9                          ret
     302   00:430E                      
     303   00:430E  2A 1A C0            up:		ld		hl,(_levelmappos)
     304   00:4311  01 00 F8            		ld		bc,-mapWidth*8
     305   00:4314  09                  		add		hl,bc
     306   00:4315  22 1A C0            		ld		(_levelmappos),hl
     307   00:4318  C3 79 42            		jp      main_loop
     308   00:431B                      
     309   00:431B  2A 1A C0            dwn:	ld		hl,(_levelmappos)
     310   00:431E  01 00 08            		ld		bc,mapWidth*8
     311   00:4321  09                  		add		hl,bc
     312   00:4322  22 1A C0            		ld		(_levelmappos),hl
     313   00:4325  C3 79 42            		jp      main_loop
     314   00:4328                      		
     315   00:4328  2A 1A C0            right:	ld		hl,(_levelmappos)
     316   00:432B  3A 03 C0            		ld		a,(_ticxframe)
     317   00:432E  4F                  		ld		c,a					; compensate frame rate
     318   00:432F  06 00               		ld		b,0
     319   00:4331  09                  		add		hl,bc
     320   00:4332  22 1A C0            		ld		(_levelmappos),hl
     321   00:4335  C3 79 42            		jp      main_loop
     322   00:4338                      
     323   00:4338  2A 1A C0            left:	ld		hl,(_levelmappos)
     324   00:433B  3A 03 C0            		ld		a,(_ticxframe)
     325   00:433E  ED 44               		neg
     326   00:4340  4F                  		ld		c,a					; compensate frame rate
     327   00:4341  06 FF               		ld		b,-1
     328   00:4343  09                  		add		hl,bc
     329   00:4344  22 1A C0            		ld		(_levelmappos),hl
     330   00:4347  C3 79 42            		jp      main_loop
     331   00:434A                      
     332   00:434A                      ;-------------------------------------
     333   00:434A  (00:FC9E)           JIFFY: equ 0xFC9E 
     334   00:434A                      ;-------------------------------------
     335   00:434A  E5                  _isr:	push	hl
     336   00:434B  C5                  		push	bc
     337   00:434C  2A 9E FC            		ld		hl,(JIFFY)
     338   00:434F  01 CE FF            		ld		bc,-50			; PAL assumed
     339   00:4352  09                  		add		hl,bc
     340   00:4353  21 03 C0            		ld		hl,_ticxframe
     341   00:4356  34                  		inc		(hl)
     342   00:4357  C1                  		pop		bc
     343   00:4358  E1                  		pop		hl
     344   00:4359  D0                  		ret	nc
     345   00:435A                      		
     346   00:435A  E5                  		push	hl
     347   00:435B  21 00 00            		ld		hl,0
     348   00:435E  22 9E FC            		ld		(JIFFY),hl
     349   00:4361  2A 16 C0            		ld		hl,(_nframes)
     350   00:4364  22 14 C0            		ld		(_fps),hl
     351   00:4367  21 00 00            		ld		hl,0
     352   00:436A  22 16 C0            		ld		(_nframes),hl
     353   00:436D  E1                  		pop		hl
     354   00:436E  C9                  		ret
     355   00:436F                      ;-------------------------------------
     356   00:436F                      ;   Power-up routine for 32K ROM
     357   00:436F                      ;   set pages and sub slot
     358   00:436F                      ;-------------------------------------
     359   00:436F                      powerup:
     360   00:436F  CD 10 40                    call    search_slot
     361   00:4372  CD 5B 40            		call	setrompage2
     362   00:4375  C9                          ret
     363   00:4376                      
     364   00:4376                      ;-------------------------------------
     365   00:4376                      
     366   00:4376                      
     367   00:4376  (00:00D5)           GTSTCK      equ 0x00D5      ;Returns the joystick status
     368   00:4376  (00:00D8)           GTTRIG      equ 0x00D8      ;Returns current trigger status
     369   00:4376                      
     370   00:4376                      
     371   00:4376                      _cursors:
     372   00:4376                      
     373   00:4376  AF                  	xor     a
     374   00:4377  CD D5 00            	call	GTSTCK
     375   00:437A  F5                  	push	af		;return the cursors
     376   00:437B  3E 01               	ld		a,1
     377   00:437D  CD D5 00            	call	GTSTCK
     378   00:4380  E1                  	pop		hl		;return the joystick
     379   00:4381  B4                  	or		h
     380   00:4382  6F                  	ld		l,a
     381   00:4383  C9                  	ret
     382   00:4384                      	
     383   00:4384                      
     384   00:4384                      
     385   00:4384                              
     386   00:4384                      ;-------------------------------------
     387   00:4384                      		
     388   00:4384  (00:0099)           vdpport1 equ 0x99
     389   00:4384  (00:009A)           vdpport2 equ 0x9A
     390   00:4384                      
     391   00:4384                      levelcolors:
     392   00:4384  (0020)              	incbin "palette.bin"
     393   00:43A4                      
     394   00:43A4                      _SetPalet:   
     395   00:43A4  F3                  	di
     396   00:43A5  AF                  	xor a 			;Set pointer to zero.
     397   00:43A6  D3 99               	out (vdpport1),a        
     398   00:43A8  3E 90               	ld  a,16 | 010000000B
     399   00:43AA  D3 99               	out (vdpport1),a
     400   00:43AC                      
     401   00:43AC  21 84 43            	ld  hl,levelcolors
     402   00:43AF  01 9A 20            	ld bc,vdpport2+32*256
     403   00:43B2  ED B3               	otir
     404   00:43B4  FB                  	ei
     405   00:43B5  C9                  	ret
     406   00:43B6                      
     407   00:43B6                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     408   00:43B6                      
     409   00:43B6                      	include vuitpakker.asm
       1.  00:43B6                      
       2.  00:43B6                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       3.  00:43B6                      
       4.  00:43B6                      
       5.  00:43B6                      _vuitpakker:
       6.  00:43B6  FD E5                   push iy
       7.  00:43B8  DD E5                   push ix
       8.  00:43BA                      
       9.  00:43BA  CD C2 43                call  1f
      10.  00:43BD                      
      11.  00:43BD  DD E1                   pop ix
      12.  00:43BF  FD E1                   pop iy
      13.  00:43C1  C9                      ret
      14.  00:43C2                      
      15.  00:43C2                      1:
      16.  00:43C2                      ; in de input
      17.  00:43C2                      ; in bc VRAM output
      18.  00:43C2                      
      19.  00:43C2  62                      ld h,d
      20.  00:43C3  6B                      ld l,e
      21.  00:43C4  50                      ld d,b
      22.  00:43C5  59                      ld e,c
      23.  00:43C6                      
      24.  00:43C6                      ; pletter v0.5 msx unpacker
      25.  00:43C6                      
      26.  00:43C6                      ;-----------------------------------------------------------
      27.  00:43C6                      ; Pletter 0.5b VRAM Depacker - 64Kb version
      28.  00:43C6                      ; HL = RAM/ROM source ; DE = VRAM destination
      29.  00:43C6                      ;-----------------------------------------------------------
      30.  00:43C6  F3                      di
      31.  00:43C7                      
      32.  00:43C7                      ; VRAM address setup
      33.  00:43C7                      ;    ld  a,e
      34.  00:43C7                      ;    out (0x99),a
      35.  00:43C7                      ;    ld  a,d
      36.  00:43C7                      ;    or  0x40
      37.  00:43C7                      ;    out (0x99),a
      38.  00:43C7  CD 87 44                call setVwrite
      39.  00:43CA                      
      40.  00:43CA                      ; Initialization
      41.  00:43CA  7E                      ld  a,(hl)
      42.  00:43CB  23                      inc hl
      43.  00:43CC  D9                      exx
      44.  00:43CD  11 00 00                ld  de,0
      45.  00:43D0  87                      add a,a
      46.  00:43D1  3C                      inc a
      47.  00:43D2  CB 13                   rl  e
      48.  00:43D4  87                      add a,a
      49.  00:43D5  CB 13                   rl  e
      50.  00:43D7  87                      add a,a
      51.  00:43D8  CB 13                   rl  e
      52.  00:43DA  CB 13                   rl  e
      53.  00:43DC  21 A1 44                ld  hl,__modes
      54.  00:43DF  19                      add hl,de
      55.  00:43E0  5E                      ld  e,(hl)
      56.  00:43E1  DD                      db    0xdd
      57.  00:43E2  6B                      ld  l,e         ; ld ixl,e    
      58.  00:43E3  23                      inc hl
      59.  00:43E4  5E                      ld  e,(hl)
      60.  00:43E5  DD                      db    0xdd
      61.  00:43E6  63                      ld h,e          ; ld  ixh,e
      62.  00:43E7  1E 01                   ld  e,1
      63.  00:43E9  D9                      exx
      64.  00:43EA  FD 21 F3 43             ld  iy,__loop
      65.  00:43EE                      
      66.  00:43EE                      ; Main depack loop
      67.  00:43EE  0E 98               _literal:ld  c,098h
      68.  00:43F0  ED A3                   outi
      69.  00:43F2  13                      inc de
      70.  00:43F3  87                  __loop:   add a,a
      71.  00:43F4  CC 7B 44                call    z,_getbit
      72.  00:43F7  30 F5                   jr  nc,_literal
      73.  00:43F9                      
      74.  00:43F9                      ; Compressed data
      75.  00:43F9  D9                      exx
      76.  00:43FA  62                      ld  h,d
      77.  00:43FB  6B                      ld  l,e
      78.  00:43FC  87                  _getlen: add a,a
      79.  00:43FD  CC 7F 44                call    z,_getbitexx
      80.  00:4400  30 1D                   jr  nc,lenok
      81.  00:4402  87                  lus:    add a,a
      82.  00:4403  CC 7F 44                call    z,_getbitexx
      83.  00:4406  ED 6A                   adc hl,hl
      84.  00:4408  D8                      ret c
      85.  00:4409  87                      add a,a
      86.  00:440A  CC 7F 44                call    z,_getbitexx
      87.  00:440D  30 10                   jr  nc,lenok
      88.  00:440F  87                      add a,a
      89.  00:4410  CC 7F 44                call    z,_getbitexx
      90.  00:4413  ED 6A                   adc hl,hl
      91.  00:4415  DA 85 44                jp  c,Depack_out
      92.  00:4418  87                      add a,a
      93.  00:4419  CC 7F 44                call    z,_getbitexx
      94.  00:441C  DA 02 44                jp  c,lus
      95.  00:441F  23                  lenok:  inc hl
      96.  00:4420  D9                      exx
      97.  00:4421  4E                      ld  c,(hl)
      98.  00:4422  23                      inc hl
      99.  00:4423  06 00                   ld  b,0
     100.  00:4425  CB 79                   bit 7,c
     101.  00:4427  CA 5A 44                jp  z,offsok
     102.  00:442A  DD E9                   jp  (ix)
     103.  00:442C                      
     104.  00:442C  87                  _mode7:  add a,a
     105.  00:442D  CC 7B 44                call    z,_getbit
     106.  00:4430  CB 10                   rl  b
     107.  00:4432  87                  _mode6:  add a,a
     108.  00:4433  CC 7B 44                call    z,_getbit
     109.  00:4436  CB 10                   rl  b
     110.  00:4438  87                  _mode5:  add a,a
     111.  00:4439  CC 7B 44                call    z,_getbit
     112.  00:443C  CB 10                   rl  b
     113.  00:443E  87                  _mode4:  add a,a
     114.  00:443F  CC 7B 44                call    z,_getbit
     115.  00:4442  CB 10                   rl  b
     116.  00:4444  87                  _mode3:  add a,a
     117.  00:4445  CC 7B 44                call    z,_getbit
     118.  00:4448  CB 10                   rl  b
     119.  00:444A  87                  _mode2:  add a,a
     120.  00:444B  CC 7B 44                call    z,_getbit
     121.  00:444E  CB 10                   rl  b
     122.  00:4450  87                      add a,a
     123.  00:4451  CC 7B 44                call    z,_getbit
     124.  00:4454  30 04                   jr  nc,offsok
     125.  00:4456  B7                      or  a
     126.  00:4457  04                      inc b
     127.  00:4458  CB B9                   res 7,c
     128.  00:445A  03                  offsok: inc bc
     129.  00:445B  E5                      push    hl
     130.  00:445C  D9                      exx
     131.  00:445D  E5                      push    hl
     132.  00:445E  D9                      exx
     133.  00:445F  6B                      ld  l,e
     134.  00:4460  62                      ld  h,d
     135.  00:4461  ED 42                   sbc hl,bc
     136.  00:4463  C1                      pop bc
     137.  00:4464  F5                      push    af
     138.  00:4465                      _loop: 
     139.  00:4465                      ;    ld  a,l
     140.  00:4465                      ;    out (0x99),a
     141.  00:4465                      ;    ld  a,h
     142.  00:4465                      ;    out (0x99),a
     143.  00:4465  CD 93 44                call setVread
     144.  00:4468                          
     145.  00:4468  DB 98                   in  a,(0x98)
     146.  00:446A  08                      ex  af,af'
     147.  00:446B                      ;    ld  a,e
     148.  00:446B                      ;    out (0x99),a
     149.  00:446B                      ;    ld  a,d
     150.  00:446B                      ;    or  0x40
     151.  00:446B                      ;    out (0x99),a
     152.  00:446B  CD 87 44                call setVwrite
     153.  00:446E                          
     154.  00:446E  08                      ex  af,af'
     155.  00:446F  D3 98                   out (0x98),a
     156.  00:4471  13                      inc de
     157.  00:4472  ED A1                   cpi
     158.  00:4474  EA 65 44                jp  pe,_loop
     159.  00:4477  F1                      pop af
     160.  00:4478  E1                      pop hl
     161.  00:4479  FD E9                   jp  (iy)
     162.  00:447B                      ;
     163.  00:447B  7E                  _getbit: ld  a,(hl)
     164.  00:447C  23                      inc hl
     165.  00:447D  17                      rla
     166.  00:447E  C9                      ret
     167.  00:447F                      
     168.  00:447F                      _getbitexx:
     169.  00:447F  D9                      exx
     170.  00:4480  7E                      ld  a,(hl)
     171.  00:4481  23                      inc hl
     172.  00:4482  D9                      exx
     173.  00:4483  17                      rla
     174.  00:4484  C9                      ret
     175.  00:4485                      
     176.  00:4485                      ; De-packer exit
     177.  00:4485                      Depack_out:
     178.  00:4485  FB                      ei
     179.  00:4486  C9                      ret
     180.  00:4487                      
     181.  00:4487                      
     182.  00:4487                      
     183.  00:4487                      setVwrite:
     184.  00:4487                      
     185.  00:4487  D5                      push    de
     186.  00:4488  C5                      push    bc
     187.  00:4489  ED 4B 18 C0             ld      bc,(_vbit16)
     188.  00:448D  CD 9A 45                call    _vdpsetvramwr
     189.  00:4490  C1                      pop     bc
     190.  00:4491  D1                      pop     de
     191.  00:4492                      
     192.  00:4492  C9                      ret
     193.  00:4493                      setVread:    
     194.  00:4493                      
     195.  00:4493  D5                      push    de
     196.  00:4494  C5                      push    bc
     197.  00:4495  5D                      ld      e,l
     198.  00:4496  54                      ld      d,h
     199.  00:4497  ED 4B 18 C0             ld      bc,(_vbit16)
     200.  00:449B  CD B4 45                call    _vdpsetvramrd
     201.  00:449E  C1                      pop     bc
     202.  00:449F  D1                      pop     de
     203.  00:44A0                      
     204.  00:44A0  C9                      ret
     205.  00:44A1                      
     206.  00:44A1                      __modes:
     207.  00:44A1  5A 44                   dw  offsok
     208.  00:44A3  4A 44                   dw  _mode2
     209.  00:44A5  44 44                   dw  _mode3
     210.  00:44A7  3E 44                   dw  _mode4
     211.  00:44A9  38 44                   dw  _mode5
     212.  00:44AB  32 44                   dw  _mode6
     213.  00:44AD  2C 44                   dw  _mode7
     410   00:44AF                      
     411   00:44AF                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     412   00:44AF                      
     413   00:44AF                      	include plot_tile.asm
       1.  00:44AF                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       2.  00:44AF                      ; input
       3.  00:44AF                      ; hl  configured in window map 32x24
       4.  00:44AF                      ; de  tile to be plot
       5.  00:44AF                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       6.  00:44AF                      plot_tile:
       7.  00:44AF  29                  	add		hl,hl		; now HL is aiming to uints
       8.  00:44B0                      
       9.  00:44B0  E5                  	push	hl
      10.  00:44B1  ED 4B 1C C0         	ld		bc,(_shadowbuff)
      11.  00:44B5  09                  	add		hl,bc		; HL = pointer to the shadow map
      12.  00:44B6                      	
      13.  00:44B6  7E                  	ld		a,(hl)		; Avoid writing the same tile
      14.  00:44B7  BB                  	cp		e
      15.  00:44B8  20 08               	jr		nz,1f
      16.  00:44BA  23                  	inc		hl
      17.  00:44BB  7E                  	ld		a,(hl)
      18.  00:44BC  BA                  	cp		d
      19.  00:44BD  2B                  	dec		hl
      20.  00:44BE  20 02               	jr		nz,1f
      21.  00:44C0                      
      22.  00:44C0  E1                  	pop		hl
      23.  00:44C1  C9                  	ret
      24.  00:44C2                      	
      25.  00:44C2  73                  1:	ld		(hl),e		; rewrite the position with the actual tile in shadowbuffer
      26.  00:44C3  23                  	inc		hl
      27.  00:44C4  72                  	ld		(hl),d
      28.  00:44C5                      	
      29.  00:44C5  E1                  	pop		hl			; HL relative position in 32x24*2
      30.  00:44C6                      						; DE new 16 tile to be plotted
      31.  00:44C6                      						
      32.  00:44C6  CB 7A               	bit 	7,d			; test for LMMMM	
      33.  00:44C8  C2 EC 44            	jp		nz,plot_trasp_tile
      34.  00:44CB                      	
      35.  00:44CB  7A                  	ld		a,d
      36.  00:44CC  B3                  	or		e
      37.  00:44CD  C2 D9 44            	jp		nz,plot_foreground
      38.  00:44D0                      
      39.  00:44D0                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      40.  00:44D0                      ; input
      41.  00:44D0                      ; hl  configured in window map 32x24
      42.  00:44D0                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      43.  00:44D0                      
      44.  00:44D0                      ; plot_background:
      45.  00:44D0                      
      46.  00:44D0  E5                  	push	hl
      47.  00:44D1  11 9A 4D            	ld		de,_backmap-32*4-2
      48.  00:44D4  19                  	add		hl,de
      49.  00:44D5  5E                  	ld		e,(hl)
      50.  00:44D6  23                  	inc		hl
      51.  00:44D7  56                  	ld		d,(hl)
      52.  00:44D8  E1                  	pop		hl
      53.  00:44D9                      	
      54.  00:44D9                      	
      55.  00:44D9                      plot_foreground:
      56.  00:44D9  3E 40               	ld	a,low SolidTile
      57.  00:44DB  BB                  	cp	e
      58.  00:44DC  20 06               	jr	nz,1f
      59.  00:44DE  3E 03               	ld	a,high SolidTile
      60.  00:44E0  BA                  	cp	d
      61.  00:44E1  CA 51 45            	jp	z,plot_solid_box
      62.  00:44E4                      
      63.  00:44E4  CD 04 45            1:	call 	vdp_conf
      64.  00:44E7                      
      65.  00:44E7  3E D0               	ld		a,0xD0
      66.  00:44E9  D3 9B               	out 	(0x9B), a		; command
      67.  00:44EB  C9                  	ret
      68.  00:44EC                      
      69.  00:44EC                      	
      70.  00:44EC                      	
      71.  00:44EC                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      72.  00:44EC                      ; input
      73.  00:44EC                      ; hl   configured in window map 32x24
      74.  00:44EC                      ; de  tile to be plot
      75.  00:44EC                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      76.  00:44EC                      
      77.  00:44EC                      plot_trasp_tile:
      78.  00:44EC                      
      79.  00:44EC  D5                  	push	de
      80.  00:44ED  E5                  	push	hl
      81.  00:44EE                      					;	plot_background
      82.  00:44EE  11 9A 4D            	ld		de,_backmap-32*4-2
      83.  00:44F1  19                  	add		hl,de
      84.  00:44F2  5E                  	ld		e,(hl)
      85.  00:44F3  23                  	inc		hl
      86.  00:44F4  56                  	ld		d,(hl)
      87.  00:44F5                      
      88.  00:44F5  E1                  	pop		hl
      89.  00:44F6  E5                  	push	hl
      90.  00:44F7  CD D9 44            	call	plot_foreground
      91.  00:44FA  E1                  	pop		hl
      92.  00:44FB  D1                  	pop		de
      93.  00:44FC                      
      94.  00:44FC  CD 04 45            	call	vdp_conf
      95.  00:44FF                      
      96.  00:44FF  3E 98               	ld		a,0x98
      97.  00:4501  D3 9B               	out 	(0x9B), a		; command
      98.  00:4503  C9                  	ret
      99.  00:4504                      
     100.  00:4504                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     101.  00:4504                      ; input
     102.  00:4504                      ; hl   configured in window map 32x24
     103.  00:4504                      ; de  tile to be plot
     104.  00:4504                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     105.  00:4504                      
     106.  00:4504                      vdp_conf:	
     107.  00:4504                      	
     108.  00:4504  29 29               [2]	add		hl,hl
     109.  00:4506  4D                  	ld		c,l			; C = dx*8
     110.  00:4507  7C                  	ld		a,h
     111.  00:4508  87 87 87            [3]	add		a,a
     112.  00:450B  47                  	ld		b,a			; B = dy*8
     113.  00:450C  C5                  	push	bc			; dx*8 and dy*8 on the stack
     114.  00:450D                      	
     115.  00:450D                      	; de has the 16 bit tile
     116.  00:450D                      	; de = 10 bits = 5 bits for y and 5 bits for x
     117.  00:450D                      
     118.  00:450D  EB                  	ex		de,hl
     119.  00:450E  29 29 29            [3]	add		hl,hl
     120.  00:4511                      	
     121.  00:4511                      	; now l is sx*8 and h is sy
     122.  00:4511                      		
     123.  00:4511  7C                  	ld		a,h
     124.  00:4512  87 87 87            [3]	add		a,a
     125.  00:4515  67                  	ld		h,a
     126.  00:4516  F5                  	push	af
     127.  00:4517                      	
     128.  00:4517                      	; now h is sy*8
     129.  00:4517  F3                  	di
     130.  00:4518  3E 20               	ld 		a, 32
     131.  00:451A  D3 99               	out 	(0x99),a
     132.  00:451C  3E 91               	ld 		a, 17+128
     133.  00:451E  D3 99               	out 	(0x99),a
     134.  00:4520  FB                  	ei
     135.  00:4521                      
     136.  00:4521  0E 9B               	ld 		c, 0x9B
     137.  00:4523                      	
     138.  00:4523  CD E4 45            	call _waitvdp;
     139.  00:4526                      	
     140.  00:4526  ED 69               	out		(c), l 		; sx
     141.  00:4528  AF                  	xor a
     142.  00:4529  D3 9B               	out		(0x9B), a 	; sx (high)
     143.  00:452B                      	
     144.  00:452B  ED 61               	out		(c), h 		; sy
     145.  00:452D  F1                  	pop		af
     146.  00:452E  3E 02               	ld		a,2			; source page for tiles 32x32=1024 tiles
     147.  00:4530  CE 00               	adc		a,0
     148.  00:4532  D3 9B               	out 	(0x9B), a 	; sy (high-> page 2)
     149.  00:4534                      
     150.  00:4534  E1                  	pop		hl			; recover dx*8,dy*8
     151.  00:4535                      	
     152.  00:4535  ED 69               	out 	(c), l 		; dx
     153.  00:4537  AF                  	xor a
     154.  00:4538  D3 9B               	out 	(0x9B), a	; dx (high)
     155.  00:453A  ED 61               	out 	(c), h 		; dy
     156.  00:453C  3A 1E C0            	ld 		a,(_currentpage)	; destination page
     157.  00:453F  D3 9B               	out 	(0x9B), a	; dy (high-> page 0 or 1)
     158.  00:4541                      
     159.  00:4541  2E 08               	ld 		l,8 		; block size
     160.  00:4543                      
     161.  00:4543  ED 69               	out 	(c), l
     162.  00:4545  AF                  	xor a
     163.  00:4546  D3 9B               	out 	(0x9B), a
     164.  00:4548  ED 69               	out 	(c), l
     165.  00:454A  D3 9B               	out 	(0x9B), a
     166.  00:454C  D3 9B               	out 	(0x9B), a
     167.  00:454E  D3 9B               	out 	(0x9B), a
     168.  00:4550  C9                  	ret
     169.  00:4551                      
     170.  00:4551                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     171.  00:4551                      ; input
     172.  00:4551                      ; hl configured in window map 32x24
     173.  00:4551                      ;  e color
     174.  00:4551                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     175.  00:4551                      
     176.  00:4551                      plot_solid_box:
     177.  00:4551  1E 77               	ld		e,SolidColor+16*SolidColor		; solid color
     178.  00:4553                      
     179.  00:4553  29 29               [2]	add		hl,hl
     180.  00:4555  4D                  	ld		c,l			; C = dx*8
     181.  00:4556  7C                  	ld		a,h
     182.  00:4557  87 87 87            [3]	add		a,a
     183.  00:455A  47                  	ld		b,a			; B = dy*8
     184.  00:455B  C5                  	push	bc			; dx*8 and dy*8 on the stack
     185.  00:455C                      
     186.  00:455C  F3                  	di
     187.  00:455D  3E 24               	ld 		a, 36
     188.  00:455F  D3 99               	out 	(0x99),a
     189.  00:4561  3E 91               	ld 		a, 17+128
     190.  00:4563  D3 99               	out 	(0x99),a
     191.  00:4565  FB                  	ei
     192.  00:4566                      
     193.  00:4566  0E 9B               	ld 		c, 0x9B
     194.  00:4568                      	
     195.  00:4568  CD E4 45            	call _waitvdp;
     196.  00:456B  E1                  	pop		hl			; recover dx*8,dy*8
     197.  00:456C                      	
     198.  00:456C  ED 69               	out 	(c), l 		; dx
     199.  00:456E  AF                  	xor a
     200.  00:456F  D3 9B               	out 	(0x9B), a	; dx (high)
     201.  00:4571  ED 61               	out 	(c), h 		; dy
     202.  00:4573  3A 1E C0            	ld 		a,(_currentpage)	; destination page
     203.  00:4576  D3 9B               	out 	(0x9B), a	; dy (high-> page 0 or 1)
     204.  00:4578                      
     205.  00:4578  2E 08               	ld 		l,8 		; block size
     206.  00:457A                      
     207.  00:457A  ED 69               	out 	(c), l
     208.  00:457C  AF                  	xor a
     209.  00:457D  D3 9B               	out 	(0x9B), a
     210.  00:457F  ED 69               	out 	(c), l
     211.  00:4581  D3 9B               	out 	(0x9B), a
     212.  00:4583  ED 59               	out 	(c), e
     213.  00:4585  D3 9B               	out 	(0x9B), a
     214.  00:4587  2E C0               	ld		l,11000000B
     215.  00:4589  ED 69               	out 	(c), l
     216.  00:458B  C9                  	ret
     414   00:458C                      
     415   00:458C                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     416   00:458C                      
     417   00:458C                      _clean_buffs:
     418   00:458C  01 3F 0C            	ld	bc,2*WinWidth*WinWidth*2-1
     419   00:458F  21 1F C0            	ld	hl,_shadow0
     420   00:4592  36 FF               	ld	(hl),-1
     421   00:4594  11 20 C0            	ld	de,_shadow0+1
     422   00:4597  ED B0               	ldir
     423   00:4599  C9                  	ret
     424   00:459A                      	
     425   00:459A                      ;Set VDP for writing at address CDE (17-bit) 
     426   00:459A                      
     427   00:459A                      _vdpsetvramwr:
     428   00:459A  79                  	ld a,c
     429   00:459B                      ;Set VDP for writing at address ADE (17-bit) ;
     430   00:459B  CB 02               	rlc d
     431   00:459D  17                  	rla
     432   00:459E  CB 02               	rlc d
     433   00:45A0  17                  	rla
     434   00:45A1  CB 3A               	srl d ; primo shift, il secondo dopo la out
     435   00:45A3                      
     436   00:45A3  D3 99               	out (0x99),a ;set bits 14-16
     437   00:45A5  3E 8E               	ld a,14+128
     438   00:45A7  D3 99               	out (0x99),a
     439   00:45A9                      
     440   00:45A9  CB 3A               	srl d ; secondo shift.            
     441   00:45AB  7B                  	ld a,e ;set bits 0-7
     442   00:45AC  D3 99               	out (0x99),a
     443   00:45AE  7A                  	ld a,d ;set bits 8-13
     444   00:45AF  F6 40               	or 0x40 ; + write access
     445   00:45B1  D3 99               	out (0x99),a
     446   00:45B3  C9                  	ret
     447   00:45B4                      	
     448   00:45B4                      ;Set VDP port #98 to start reading at address CDE (17-bit) ;
     449   00:45B4                      
     450   00:45B4                      _vdpsetvramrd:
     451   00:45B4  79                  	ld a,c
     452   00:45B5                      ;Set VDP port #98 to start reading at address ADE (17-bit) ;
     453   00:45B5  CB 02               	rlc d
     454   00:45B7  17                  	rla
     455   00:45B8  CB 02               	rlc d
     456   00:45BA  17                  	rla
     457   00:45BB  CB 3A               	srl d ; primo shift, il secondo dopo la out
     458   00:45BD                      
     459   00:45BD  D3 99               	out (0x99),a ;set bits 14-16
     460   00:45BF  3E 8E               	ld a,14+128
     461   00:45C1  D3 99               	out (0x99),a
     462   00:45C3                      
     463   00:45C3  CB 3A               	srl d ; secondo shift.            
     464   00:45C5  7B                  	ld a,e ;set bits 0-7
     465   00:45C6  D3 99               	out (0x99),a
     466   00:45C8  7A                  	ld a,d ;set bits 8-13
     467   00:45C9  E6 3F               	and 0x3F
     468   00:45CB  D3 99               	out (0x99),a
     469   00:45CD  C9                  	ret
     470   00:45CE                      
     471   00:45CE                      ;Display page E in screen 5
     472   00:45CE                      _setpage:
     473   00:45CE  7B                  	ld a,e
     474   00:45CF  87                  	add a,a ;x32
     475   00:45D0  87                  	add a,a
     476   00:45D1  87                  	add a,a
     477   00:45D2  87                  	add a,a
     478   00:45D3  87                  	add a,a
     479   00:45D4  C6 1F               	add a,31
     480   00:45D6  F3                  	di
     481   00:45D7  D3 99               	out (0x99),a
     482   00:45D9  3E 82               	ld a,2+128
     483   00:45DB  D3 99               	out (0x99),a
     484   00:45DD  FB                  	ei            
     485   00:45DE  C9                  	ret
     486   00:45DF                      
     487   00:45DF  (00:005F)           chgmod        equ     0x005f      ;change graphic mode
     488   00:45DF  (00:000C)           RDSLT         equ     0x000c      ;read address HL in slot A
     489   00:45DF  (00:0156)           KILBUF        equ     0x0156      ;clear keyboard buffer
     490   00:45DF                      
     491   00:45DF                      _scr:
     492   00:45DF  7B                  	ld  a,e
     493   00:45E0  CD 5F 00            	call	chgmod
     494   00:45E3  C9                  	ret
     495   00:45E4                      
     496   00:45E4                      
     497   00:45E4                      _waitvdp:
     498   00:45E4  F3                  	di
     499   00:45E5  3E 02               	ld a,2
     500   00:45E7  D3 99               	out (0x99),a
     501   00:45E9  3E 8F               	ld a, 0x8f
     502   00:45EB  D3 99               	out (0x99),a
     503   00:45ED                      
     504   00:45ED  DB 99               1:  in a,(0x99)
     505   00:45EF  0F                  	rrca
     506   00:45F0  DA ED 45            	jp c, 1b
     507   00:45F3                      
     508   00:45F3  AF                  	xor a
     509   00:45F4  D3 99               	out (0x99),a
     510   00:45F6  3E 8F               	ld a, 0x8f
     511   00:45F8  D3 99               	out (0x99),a
     512   00:45FA  FB                  	ei
     513   00:45FB  C9                  	ret
     514   00:45FC                      
     515   00:45FC                      
     516   00:45FC                      	
     517   00:45FC                      _print_fps:
     518   00:45FC  ED 5B 07 C0         	ld	de,(_buffer+3)
     519   00:4600  16 00               	ld	d,0
     520   00:4602  21 E0 05            	ld	hl,1024+512-'0'+16
     521   00:4605  19                  	add	hl,de
     522   00:4606  EB                  	ex	de,hl
     523   00:4607                      	
     524   00:4607  21 FC 05            	ld	hl,2*(23*32+30)
     525   00:460A  CD D9 44            	call 	plot_foreground
     526   00:460D                      
     527   00:460D  3A 08 C0            	ld	a,(_buffer+4)
     528   00:4610  5F                  	ld	e,a
     529   00:4611  16 00               	ld	d,0
     530   00:4613  21 E0 05            	ld	hl,1024+512-'0'+16
     531   00:4616  19                  	add	hl,de
     532   00:4617  EB                  	ex	de,hl
     533   00:4618                      	
     534   00:4618  21 FE 05            	ld	hl,2*(23*32+31)
     535   00:461B  C3 D9 44            	jp 	plot_foreground
     536   00:461E                      	
     537   00:461E                      
     538   00:461E                      ;-------------------------------------
     539   00:461E                      _compute_fps:
     540   00:461E  ED 5B 14 C0         	ld	de,(_fps)
     541   00:4622  01 04 C0            	ld	bc,_buffer
     542   00:4625                      
     543   00:4625                      int2ascii:
     544   00:4625                      	
     545   00:4625                      ; in de input 
     546   00:4625                      ; in bc output
     547   00:4625                      
     548   00:4625  EB                  	ex  de,hl
     549   00:4626  59                  	ld  e,c
     550   00:4627  50                  	ld  d,b
     551   00:4628                      
     552   00:4628                      Num2asc:
     553   00:4628  01 F0 D8            	ld  bc,-10000
     554   00:462B  CD 41 46            	call    Num1
     555   00:462E  01 18 FC            	ld  bc,-1000
     556   00:4631  CD 41 46            	call    Num1
     557   00:4634  01 9C FF            	ld  bc,-100
     558   00:4637  CD 41 46            	call    Num1
     559   00:463A  0E F6               	ld  c,-10
     560   00:463C  CD 41 46            	call    Num1
     561   00:463F  0E FF               	ld  c,-1
     562   00:4641                      
     563   00:4641                      Num1:   
     564   00:4641  3E 2F               	ld  a,'0'-1  ; '0' in the tileset
     565   00:4643                      
     566   00:4643                      Num2:   
     567   00:4643  3C                  	inc a
     568   00:4644  09                  	add hl,bc
     569   00:4645  38 FC               	jr  c,Num2
     570   00:4647  ED 42               	sbc hl,bc
     571   00:4649                      
     572   00:4649  12                  	ld  (de),a
     573   00:464A  13                  	inc de
     574   00:464B  C9                  	ret
     575   00:464C                      
     576   00:464C                      _metatable:
     577   00:464C  (07D0)              	incbin "metatable.bin"
     578   00:4E1C                      _backmap:
     579   00:4E1C  (0400)              	incbin "backmap.bin"
     580   00:521C                      
     581   00:521C                      ; start
     582   00:521C                      _mballon_start
     583   00:521C  11 00 C0            	ld	de,0xc000
     584   00:521F  21 2A 52            	ld	hl,_relocate
     585   00:5222  01 0D 00            	ld	bc,_endrelocate-_relocate
     586   00:5225  ED B0               	ldir
     587   00:5227  C3 00 C0            	jp	0xc000
     588   00:522A                      _relocate:
     589   00:522A  3E 04               	ld	a,:mballon
     590   00:522C  32 00 60            	ld	(_bank1),a
     591   00:522F  3C                  	inc	a
     592   00:5230  32 00 70            	ld	(_bank2),a
     593   00:5233  2A 02 40            	ld	hl,(0x4002)
     594   00:5236  E9                  	jp	(hl)
     595   00:5237                      _endrelocate:
     596   00:5237                      
     597   00:5237                      
     598   00:5237                      	include enemies.asm
       1.  00:5237                      
       2.  00:5237                      
       3.  00:5237                      		struct enemy
       4.  00:5237                    < type 	db
       5.  00:5237                    < state 	db
       6.  00:5237                    < x		dw	
       7.  00:5237                    < y		dw
       8.  00:5237                    < dx		dw
       9.  00:5237                    < dy		dw
      10.  00:5237                    < nx		db
      11.  00:5237                    < ny		db
      12.  00:5237                    < buf		ds	8*8
      13.  00:5237                    < 	endstruct
      14.  00:5237                      
      15.  00:5237  (00:0008)           nenemies equ	8
      16.  00:5237                      
      17.  00:5237                      
      18.  00:5237                      ;;;;;;;;;;;;;;;;;;;;;;;;
      19.  00:5237                      ; in 
      20.  00:5237                      ;  de source in a WinHeight*WinWidth buffer of uints
      21.  00:5237                      ;  hl destination in enemylist
      22.  00:5237                      ;;;;;;;;;;;;;;;;;;;;;;;;
      23.  00:5237                      
      24.  00:5237                      save_background:
      25.  00:5237  E5                  	push	hl
      26.  00:5238  DD E1               	pop		ix
      27.  00:523A  01 0C 00            	ld	bc,enemy.buf
      28.  00:523D  09                  	add	hl,bc
      29.  00:523E                      	
      30.  00:523E  DD 7E 0B            	ld	a,(ix+enemy.ny)
      31.  00:5241  EB                  	ex	de,hl
      32.  00:5242  06 00               	ld	b,0
      33.  00:5244                      	
      34.  00:5244  DD 4E 0A            2:	ld	c,(ix+enemy.nx)
      35.  00:5247  CB 31               	sll	c
      36.  00:5249  D5                  	push	de
      37.  00:524A  ED B0               	ldir
      38.  00:524C  D1                  	pop	de
      39.  00:524D                      
      40.  00:524D  0E 1C               	ld	c,WinWidth
      41.  00:524F  EB                  	ex	de,hl
      42.  00:5250  09                  	add	hl,bc
      43.  00:5251  EB                  	ex	de,hl
      44.  00:5252  3D                  	dec	a
      45.  00:5253  C2 44 52            	jp	nz,2b
      46.  00:5256  C9                  	ret
      47.  00:5257                      	
      48.  00:5257                      ;;;;;;;;;;;;;;;;;;;;;;;;
      49.  00:5257                      ; in 
      50.  00:5257                      ;  de destination in a WinHeight*WinWidth buffer of uints
      51.  00:5257                      ;  hl source in enemylist
      52.  00:5257                      ;;;;;;;;;;;;;;;;;;;;;;;;
      53.  00:5257                      
      54.  00:5257                      restore_background:
      55.  00:5257  E5                  	push	hl
      56.  00:5258  DD E1               	pop		ix
      57.  00:525A  01 0C 00            	ld	bc,enemy.buf
      58.  00:525D  09                  	add	hl,bc
      59.  00:525E                      	
      60.  00:525E  DD 7E 0B            	ld	a,(ix+enemy.ny)
      61.  00:5261  06 00               	ld	b,0
      62.  00:5263                      	
      63.  00:5263  DD 4E 0A            2:	ld	c,(ix+enemy.nx)
      64.  00:5266  CB 31               	sll	c
      65.  00:5268  D5                  	push	de
      66.  00:5269  ED B0               	ldir
      67.  00:526B  D1                  	pop	de
      68.  00:526C                      
      69.  00:526C  0E 1C               	ld	c,WinWidth
      70.  00:526E  EB                  	ex	de,hl
      71.  00:526F  09                  	add	hl,bc
      72.  00:5270  EB                  	ex	de,hl
      73.  00:5271  3D                  	dec	a
      74.  00:5272  C2 63 52            	jp	nz,2b
      75.  00:5275  C9                  	ret
      76.  00:5276                      	
      77.  00:5276                      	
      78.  00:5276                      	
     599   00:5276                      
     600   00:5276  (01)                	page 1
     601   01:8000                      _frame:
     602   01:8000  (0951)              	incbin "frame_.bin"			
     603   01:8951                      	
     604   01:8951  (02)                	page 2
     605   02:8000                      _tiles:
     606   02:8000  (3582)              	incbin "tiles_.bin"
     607   02:B582                      
     608   02:B582  (03)                	page 3
     609   03:8000                      _level:
     610   03:8000  (0479)              	incbin "metamap_.bin"			
     611   03:8479                      
     612   03:8479  (04)                	page 4
     613   04:8000                      mballon:
     614   04:8000  (4000)              	incbin "MBALLOON.BIN",,0x4000	
     615   04:C000  (05)                	page 5
     616   05:8000  (4000)              	incbin "MBALLOON.BIN",0x4000	
     617   05:C000                      FINISH:
     618   05:C000                      
     619   05:C000                      ;---------------------------------------------------------
     620   05:C000                      ; Variables
     621   05:C000                      ;---------------------------------------------------------
     622   05:C000                      
     623   05:C000                      
     624   05:C000                      	
     625   05:C000  (C000)              	MAP 0xC000
     626   05:C000  (05:C000)           slotvar				#1
     627   05:C000  (05:C001)           slotram				#1
     628   05:C000  (05:C002)           _dx					#1
     629   05:C000                      
     630   05:C000  (05:C003)           _ticxframe			#1
     631   05:C000                      
     632   05:C000  (05:C004)           _buffer:			#16
     633   05:C000  (05:C014)           _fps:				#2
     634   05:C000  (05:C016)           _nframes:			#2
     635   05:C000  (05:C018)           _vbit16:			#2
     636   05:C000  (05:C01A)           _levelmappos:		#2
     637   05:C000                      
     638   05:C000  (05:C01C)           _shadowbuff:		#2
     639   05:C000  (05:C01E)           _currentpage:		#1
     640   05:C000                      
     641   05:C000  (05:C01F)           _shadow0:			#WinWidth*WinWidth*2
     642   05:C000  (05:C63F)           _shadow1:			#WinWidth*WinWidth*2
     643   05:C000                      
     644   05:C000  (05:CC5F)           _levelmap:			#mapWidth*mapHeight*2	
     645   05:C000                      
     646   05:C000  (05:EC5F)           enemylist:			#enemy*nenemies
     647   05:C000  (0000)              	ENDMAP

    LABELS
-------------------------------------------------
00:00006000   _bank1
00:00007000   _bank2
00:0000037C X n_tiles
00:00000100   mapWidth
00:00000010   mapHeight
00:0000001C   WinWidth
00:00000010   WinHeight
00:00000000 X Transp
00:00000340   SolidTile
00:00000007   SolidColor
00:00000024 X ENASLT
00:00000138   RSLREG
00:0000FCC1   EXPTBL
00:00004010   search_slot
00:0000402F X search_slotram
00:00004050   search_slotram0
00:00004055 X setrompage0
00:0000405B   setrompage2
00:00004061 X setrampage2
00:00004067 X setrompage3
00:0000406D X setrampage3
00:00004073 X recbios
00:00004076   setslotpage0
00:000040AD X setslotpage1
00:000040EC   setslotpage2
00:00004133   setslotpage3
00:0000000C X rdslt
00:0000001C X CALSLT
00:00000180   chgcpu
00:0000FCC1 X exttbl
00:00004172   _set_r800
00:00004193   set_turbo_tr
00:0000419B   checkkbd
00:000041A6   START
00:00004279   main_loop
00:0000430E   up
00:0000431B   dwn
00:00004328   right
00:00004338   left
00:0000FC9E   JIFFY
00:0000434A   _isr
00:0000436F   powerup
00:000000D5   GTSTCK
00:000000D8 X GTTRIG
00:00004376   _cursors
00:00000099   vdpport1
00:0000009A   vdpport2
00:00004384   levelcolors
00:000043A4   _SetPalet
00:000043B6   _vuitpakker
00:000043EE   _literal
00:000043F3   __loop
00:000043FC X _getlen
00:00004402   lus
00:0000441F   lenok
00:0000442C   _mode7
00:00004432   _mode6
00:00004438   _mode5
00:0000443E   _mode4
00:00004444   _mode3
00:0000444A   _mode2
00:0000445A   offsok
00:00004465   _loop
00:0000447B   _getbit
00:0000447F   _getbitexx
00:00004485   Depack_out
00:00004487   setVwrite
00:00004493   setVread
00:000044A1   __modes
00:000044AF   plot_tile
00:000044D9   plot_foreground
00:000044EC   plot_trasp_tile
00:00004504   vdp_conf
00:00004551   plot_solid_box
00:0000458C   _clean_buffs
00:0000459A   _vdpsetvramwr
00:000045B4   _vdpsetvramrd
00:000045CE   _setpage
00:0000005F   chgmod
00:0000000C X RDSLT
00:00000156 X KILBUF
00:000045DF   _scr
00:000045E4   _waitvdp
00:000045FC   _print_fps
00:0000461E   _compute_fps
00:00004625 X int2ascii
00:00004628 X Num2asc
00:00004641   Num1
00:00004643   Num2
00:0000464C   _metatable
00:00004E1C   _backmap
00:0000521C   _mballon_start
00:0000522A   _relocate
00:00005237   _endrelocate
00:00000000 X enemy.type
00:00000001 X enemy.state
00:00000002 X enemy.x
00:00000004 X enemy.y
00:00000006 X enemy.dx
00:00000008 X enemy.dy
00:0000000A   enemy.nx
00:0000000B   enemy.ny
00:0000000C   enemy.buf
00:0000004C   enemy
00:00000008   nenemies
00:00005237 X save_background
00:00005257 X restore_background
01:00008000   _frame
02:00008000   _tiles
03:00008000   _level
04:00008000   mballon
05:0000C000 X FINISH
05:0000C000   slotvar
05:0000C001   slotram
05:0000C002   _dx
05:0000C003   _ticxframe
05:0000C004   _buffer
05:0000C014   _fps
05:0000C016   _nframes
05:0000C018   _vbit16
05:0000C01A   _levelmappos
05:0000C01C   _shadowbuff
05:0000C01E   _currentpage
05:0000C01F   _shadow0
05:0000C63F   _shadow1
05:0000CC5F   _levelmap
05:0000EC5F X enemylist


 Output: main.out
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: *  Used: 00000000

    No output

 Output: maneldem.rom
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: 00004000  Used: 00001276

   Address   Length Align   Label
   00004000    4726         search_slot
   00005276   11658       <empty>

 Page: 01
  Org: 00008000  Size: 00004000  Used: 00000951

   Address   Length Align   Label
   00008000    2385         _frame
   00008951   13999       <empty>

 Page: 02
  Org: 00008000  Size: 00004000  Used: 00003582

   Address   Length Align   Label
   00008000   13698         _tiles
   0000B582    2686       <empty>

 Page: 03
  Org: 00008000  Size: 00004000  Used: 00000479

   Address   Length Align   Label
   00008000    1145         _level
   00008479   15239       <empty>

 Page: 04
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         mballon

 Page: 05
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         FINISH

 Page: 06
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 07
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 08
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 09
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0A
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0B
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0C
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0D
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0E
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0F
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>
