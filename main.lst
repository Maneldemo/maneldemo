Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2015.03.02 - 23:28:26]

main.asm
Errors: 0

       1   00:0000                      ;----------------------------------------------------------------------------
       2   00:0000                      ;----------------------------------------------------------------------------
       3   00:0000                      
       4   00:0000                              output "maneldem.rom"
       5   00:0000                      
       6   00:0000                      		defpage	0,0x4000, 0x4000		; page 0 main code + far call routines
       7   00:0000                      		defpage	1,0x8000, 0x4000		; swapped data 
       8   00:0000                      		defpage	2..15
       9   00:0000                      	
      10   00:0000  (00:6000)           _bank1	equ	0x6000
      11   00:0000  (00:7000)           _bank2	equ	0x7000
      12   00:0000                      		
      13   00:0000  (00)                		page 0
      14   00:4000                      		
      15   00:4000                              org 4000h
      16   00:4000                              dw  4241h,START,0,0,0,0,0,0
      16   00:4000  41 42 F3 41 00 00 00 00 00 00 00 00 00 00 00 00 
      17   00:4010                      
      18   00:4010                      
      19   00:4010                      		include "header.asm"
       1.  00:4010  (00:0759)           n_tiles: equ 1881
       2.  00:4010  (00:0100)           mapWidth:	equ	256
       3.  00:4010  (00:0020)           mapHeight:	equ	 32
       4.  00:4010  (00:001C)           WinWidth:	equ	 28
       5.  00:4010  (00:0010)           WinHeight:	equ	 16
       6.  00:4010  (00:0326)           Transp:	equ	806
       7.  00:4010  (00:0000)           SolidTile0	equ	  0
       8.  00:4010  (00:0017)           SolidTile1	equ	 23
       9.  00:4010  (00:033A)           SolidTile2	equ	826
      10.  00:4010  (00:0510)           SolidTile3	equ	1296
      11.  00:4010  (00:0670)           SolidTile4	equ	1648
      12.  00:4010  (00:0000)           SolidColor0	equ	  0
      13.  00:4010  (00:0001)           SolidColor1	equ	  1
      14.  00:4010  (00:0004)           SolidColor2	equ	  4
      15.  00:4010  (00:0007)           SolidColor3	equ	  7
      16.  00:4010  (00:0008)           SolidColor4	equ	  8
      20   00:4010                      	
      21   00:4010                      		include "rominit64.asm"
       1.  00:4010                      
       2.  00:4010                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       3.  00:4010                      ; set pages and subslot
       4.  00:4010                      ;
       5.  00:4010                      
       6.  00:4010                      
       7.  00:4010  (00:0024)           ENASLT:			equ		024h
       8.  00:4010  (00:0138)           RSLREG:			equ		0138h
       9.  00:4010  (00:FCC1)           EXPTBL:			equ		0FCC1h	; Bios Slot / Expansion Slot
      10.  00:4010                      
      11.  00:4010                      
      12.  00:4010                      ; ----------------------------
      13.  00:4010                      ; pre-set main slot for page 3
      14.  00:4010                      ; and set sub-slot for page 3
      15.  00:4010                      ; ----------------------------
      16.  00:4010                      	macro	mainslot_setup n
      17.  00:4010                    < 	and		3
      18.  00:4010                    < [2]	rrca
      19.  00:4010                    < 	and		0xC0
      20.  00:4010                    < 	ld		c,a
      21.  00:4010                    < 	ld		a,d
      22.  00:4010                    < 	and		0x3F
      23.  00:4010                    < 	or		c
      24.  00:4010                    < 	ld		c,a					; Primary slot value with main slot in page 3
      25.  00:4010                    < 
      26.  00:4010                    < 	ld		a,b
      27.  00:4010                    < 	and		0x0C
      28.  00:4010                    < [2]	rrca
      29.  00:4010                    < 	and		3
      30.  00:4010                    < 	ld		b,a					; B = Expanded slot in page 3
      31.  00:4010                    < 	ld		a,c
      32.  00:4010                    < 	out		(0A8h),a			; Slot : Main Slot, xx, xx, Main slot
      33.  00:4010                    < 	ld		a,(0FFFFh)
      34.  00:4010                    < 	cpl
      35.  00:4010                    < 	if (n<=4)
      36.  00:4010                    < [n]	RLCA
      37.  00:4010                    < 	else
      38.  00:4010                    < [8-n] RRCA	
      39.  00:4010                    < 	endif
      40.  00:4010                    < 	and		0xFC
      41.  00:4010                    < 	or		b
      42.  00:4010                    < 	if (n<=4)
      43.  00:4010                    < [n]	RRCA
      44.  00:4010                    < 	else
      45.  00:4010                    < [8-n] RLCA
      46.  00:4010                    < 	endif
      47.  00:4010                    < 	ld		(0FFFFh),a		; Expanded slot selected
      48.  00:4010                    < 	ld		b,a				; save for later	
      49.  00:4010                    < 	endmacro
      50.  00:4010                      		
      51.  00:4010                      
      52.  00:4010                      ; ------------------------------
      53.  00:4010                      ; SEARCH_SLOT
      54.  00:4010                      ; look for the slot of our rom
      55.  00:4010                      ; active in page 1
      56.  00:4010                      ; ------------------------------
      57.  00:4010                      
      58.  00:4010                      search_slot:
      59.  00:4010  CD 38 01            	call	RSLREG
      60.  00:4013  0F 0F               [2]	rrca
      61.  00:4015  E6 03               	and		3
      62.  00:4017  4F                  	ld		c,a
      63.  00:4018  06 00               	ld		b,0
      64.  00:401A  21 C1 FC            	ld		hl,EXPTBL
      65.  00:401D  09                  	add		hl,bc
      66.  00:401E  7E                  	ld		a,(hl)
      67.  00:401F  E6 80               	and		080h
      68.  00:4021  B1                  	or		c
      69.  00:4022  4F                  	ld		c,a
      70.  00:4023  23 23 23 23         [4]	inc		hl
      71.  00:4027  7E                  	ld		a,(hl)
      72.  00:4028  E6 0C               	and		0Ch
      73.  00:402A  B1                  	or		c
      74.  00:402B  32 00 C0            	ld		(slotvar),a
      75.  00:402E  C9                  	ret
      76.  00:402F                      	
      77.  00:402F                      ; ------------------------------
      78.  00:402F                      ; look for the slot of ram
      79.  00:402F                      ; active in page 3
      80.  00:402F                      ; ------------------------------
      81.  00:402F                      
      82.  00:402F                      search_slotram:
      83.  00:402F  F3                  	di
      84.  00:4030  CD 38 01            	call	RSLREG
      85.  00:4033  07 07               [2]	rlca
      86.  00:4035  E6 03               	and		3
      87.  00:4037  4F                  	ld		c,a
      88.  00:4038  06 00               	ld		b,0
      89.  00:403A  21 C1 FC            	ld		hl,EXPTBL
      90.  00:403D  09                  	add		hl,bc
      91.  00:403E  7E                  	ld		a,(hl)
      92.  00:403F  E6 80               	and		080h
      93.  00:4041  28 0D               	jr		z,search_slotram0
      94.  00:4043  B1                  	or		c
      95.  00:4044  4F                  	ld		c,a
      96.  00:4045  23 23 23 23         [4]	inc		hl
      97.  00:4049  7E                  	ld		a,(hl)
      98.  00:404A  07 07 07 07         [4]	rlca
      99.  00:404E  E6 0C               	and		0Ch
     100.  00:4050                      search_slotram0:
     101.  00:4050  B1                  	or		c
     102.  00:4051  32 01 C0            	ld		(slotram),a
     103.  00:4054  C9                  	ret
     104.  00:4055                      	
     105.  00:4055                      ; ------------------------------
     106.  00:4055                      ; SETROMPAGE0
     107.  00:4055                      ; Set the chart in
     108.  00:4055                      ; Page 0
     109.  00:4055                      ; -----------------------------
     110.  00:4055                      
     111.  00:4055                      setrompage0:
     112.  00:4055  3A 00 C0            	ld		a,(slotvar)
     113.  00:4058  C3 76 40            	jp		setslotpage0
     114.  00:405B                      
     115.  00:405B                      setrompage2:
     116.  00:405B  3A 00 C0            	ld		a,(slotvar)
     117.  00:405E  C3 EC 40            	jp		setslotpage2
     118.  00:4061                      
     119.  00:4061                      setrampage2:
     120.  00:4061  3A 01 C0            	ld		a,(slotram)
     121.  00:4064  C3 EC 40            	jp		setslotpage2
     122.  00:4067                      	
     123.  00:4067                      setrompage3:
     124.  00:4067  3A 00 C0            	ld		a,(slotvar)
     125.  00:406A  C3 33 41            	jp		setslotpage3
     126.  00:406D                      
     127.  00:406D                      setrampage3:
     128.  00:406D  3A 01 C0            	ld		a,(slotram)
     129.  00:4070  C3 33 41            	jp		setslotpage3
     130.  00:4073                      	
     131.  00:4073                      ; ------------------------------
     132.  00:4073                      ; RECBIOS
     133.  00:4073                      ; set the bios ROM
     134.  00:4073                      ; -------------------------------
     135.  00:4073                      recbios:
     136.  00:4073  3A C1 FC            	ld		a,(EXPTBL)
     137.  00:4076                      
     138.  00:4076                      ; ---------------------------
     139.  00:4076                      ; SETSLOTPAGE0
     140.  00:4076                      ; Set the slot passed in A
     141.  00:4076                      ; at page 0 in the Z80 address space
     142.  00:4076                      ; A: Format FxxxSSPP
     143.  00:4076                      ; ----------------------------
     144.  00:4076                      
     145.  00:4076                      setslotpage0:
     146.  00:4076  F3                  	di
     147.  00:4077  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     148.  00:4078  DB A8               	in		a,(0A8h)
     149.  00:407A  E6 FC               	and		0xFC
     150.  00:407C  57                  	ld		d,a					; D = Primary slot value
     151.  00:407D  78                  	ld		a,b
     152.  00:407E  E6 03               	and		3
     153.  00:4080  B2                  	or		d
     154.  00:4081  57                  	ld		d,a		; D = Final Value for primary slot
     155.  00:4082  78                  	ld		a,b		; Check if expanded
     156.  00:4083  CB 7F               	bit		7,a
     157.  00:4085  28 22               	jr		z,1f	; Not Expanded
     158.  00:4087                      	mainslot_setup	0
     158.  00:4087  E6 03             >  and  3
     158.  00:4089  0F 0F             > [2] rrca
     158.  00:408B  E6 C0             >  and  0xC0
     158.  00:408D  4F                >  ld  c,a
     158.  00:408E  7A                >  ld  a,d
     158.  00:408F  E6 3F             >  and  0x3F
     158.  00:4091  B1                >  or  c
     158.  00:4092  4F                >  ld  c,a
     158.  00:4093                    > 
     158.  00:4093  78                >  ld  a,b
     158.  00:4094  E6 0C             >  and  0x0C
     158.  00:4096  0F 0F             > [2] rrca
     158.  00:4098  E6 03             >  and  3
     158.  00:409A  47                >  ld  b,a
     158.  00:409B  79                >  ld  a,c
     158.  00:409C  D3 A8             >  out  (0A8h),a
     158.  00:409E  3A FF FF          >  ld  a,(0FFFFh)
     158.  00:40A1  2F                >  cpl
     158.  00:40A2                    >  if (n<=4)
     158.  00:40A2                    > [n] RLCA
     158.  00:40A2                    >  else
     158.  00:40A2                    ~ [8-n] RRCA
     158.  00:40A2                    ~  endif
     158.  00:40A2  E6 FC             >  and  0xFC
     158.  00:40A4  B0                >  or  b
     158.  00:40A5                    >  if (n<=4)
     158.  00:40A5                    > [n] RRCA
     158.  00:40A5                    >  else
     158.  00:40A5                    ~ [8-n] RLCA
     158.  00:40A5                    ~  endif
     158.  00:40A5  32 FF FF          >  ld  (0FFFFh),a
     158.  00:40A8  47                >  ld  b,a
     159.  00:40A9  7A                  1:	ld		a,d				; A = Final value
     160.  00:40AA  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     161.  00:40AC  C9                  	ret
     162.  00:40AD                      
     163.  00:40AD                      ; ---------------------------
     164.  00:40AD                      ; SETSLOTPAGE1
     165.  00:40AD                      ; Set the slot passed in A
     166.  00:40AD                      ; at page 1 in the Z80 address space
     167.  00:40AD                      ; A: Format FxxxSSPP
     168.  00:40AD                      ; ----------------------------
     169.  00:40AD                      
     170.  00:40AD                      setslotpage1:
     171.  00:40AD  F3                  	di
     172.  00:40AE  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     173.  00:40AF  DB A8               	in		a,(0A8h)
     174.  00:40B1  0F 0F               [2]	RRCA
     175.  00:40B3  E6 FC               	and		0xFC
     176.  00:40B5  57                  	ld		d,a					; D = Primary slot value
     177.  00:40B6  78                  	ld		a,b
     178.  00:40B7  E6 03               	and		3
     179.  00:40B9  B2                  	or		d
     180.  00:40BA  07 07               [2]	RLCA
     181.  00:40BC  57                  	ld		d,a		; D = Final Value for primary slot
     182.  00:40BD  78                  	ld		a,b		; Check if expanded
     183.  00:40BE  CB 7F               	bit		7,a
     184.  00:40C0  28 26               	jr		z,1f	; Not Expanded
     185.  00:40C2                      	mainslot_setup	6
     185.  00:40C2  E6 03             >  and  3
     185.  00:40C4  0F 0F             > [2] rrca
     185.  00:40C6  E6 C0             >  and  0xC0
     185.  00:40C8  4F                >  ld  c,a
     185.  00:40C9  7A                >  ld  a,d
     185.  00:40CA  E6 3F             >  and  0x3F
     185.  00:40CC  B1                >  or  c
     185.  00:40CD  4F                >  ld  c,a
     185.  00:40CE                    > 
     185.  00:40CE  78                >  ld  a,b
     185.  00:40CF  E6 0C             >  and  0x0C
     185.  00:40D1  0F 0F             > [2] rrca
     185.  00:40D3  E6 03             >  and  3
     185.  00:40D5  47                >  ld  b,a
     185.  00:40D6  79                >  ld  a,c
     185.  00:40D7  D3 A8             >  out  (0A8h),a
     185.  00:40D9  3A FF FF          >  ld  a,(0FFFFh)
     185.  00:40DC  2F                >  cpl
     185.  00:40DD                    >  if (n<=4)
     185.  00:40DD                    ~ [n] RLCA
     185.  00:40DD                    ~  else
     185.  00:40DD  0F 0F             > [8-n] RRCA
     185.  00:40DF                    >  endif
     185.  00:40DF  E6 FC             >  and  0xFC
     185.  00:40E1  B0                >  or  b
     185.  00:40E2                    >  if (n<=4)
     185.  00:40E2                    ~ [n] RRCA
     185.  00:40E2                    ~  else
     185.  00:40E2  07 07             > [8-n] RLCA
     185.  00:40E4                    >  endif
     185.  00:40E4  32 FF FF          >  ld  (0FFFFh),a
     185.  00:40E7  47                >  ld  b,a
     186.  00:40E8  7A                  1:	ld		a,d				; A = Final value
     187.  00:40E9  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     188.  00:40EB  C9                  	ret
     189.  00:40EC                      	
     190.  00:40EC                      
     191.  00:40EC                      ; ---------------------------
     192.  00:40EC                      ; SETSLOTPAGE2
     193.  00:40EC                      ; Set the slot passed in A
     194.  00:40EC                      ; at page 2 in the Z80 address space
     195.  00:40EC                      ; A: Format FxxxSSPP
     196.  00:40EC                      ; ----------------------------
     197.  00:40EC                      
     198.  00:40EC                      setslotpage2:
     199.  00:40EC  F3                  	di
     200.  00:40ED  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     201.  00:40EE  DB A8               	in		a,(0A8h)
     202.  00:40F0  07 07 07 07         [4]	RLCA
     203.  00:40F4  E6 FC               	and		0xFC
     204.  00:40F6  57                  	ld		d,a					; D = Primary slot value
     205.  00:40F7  78                  	ld		a,b
     206.  00:40F8  E6 03               	and		3
     207.  00:40FA  B2                  	or		d
     208.  00:40FB  0F 0F 0F 0F         [4]	RRCA
     209.  00:40FF  57                  	ld		d,a		; D = Final Value for primary slot
     210.  00:4100  78                  	ld		a,b		; Check if expanded
     211.  00:4101  CB 7F               	bit		7,a
     212.  00:4103  28 2A               	jr		z,1f	; Not Expanded
     213.  00:4105                      	mainslot_setup	4
     213.  00:4105  E6 03             >  and  3
     213.  00:4107  0F 0F             > [2] rrca
     213.  00:4109  E6 C0             >  and  0xC0
     213.  00:410B  4F                >  ld  c,a
     213.  00:410C  7A                >  ld  a,d
     213.  00:410D  E6 3F             >  and  0x3F
     213.  00:410F  B1                >  or  c
     213.  00:4110  4F                >  ld  c,a
     213.  00:4111                    > 
     213.  00:4111  78                >  ld  a,b
     213.  00:4112  E6 0C             >  and  0x0C
     213.  00:4114  0F 0F             > [2] rrca
     213.  00:4116  E6 03             >  and  3
     213.  00:4118  47                >  ld  b,a
     213.  00:4119  79                >  ld  a,c
     213.  00:411A  D3 A8             >  out  (0A8h),a
     213.  00:411C  3A FF FF          >  ld  a,(0FFFFh)
     213.  00:411F  2F                >  cpl
     213.  00:4120                    >  if (n<=4)
     213.  00:4120  07 07 07 07       > [n] RLCA
     213.  00:4124                    >  else
     213.  00:4124                    ~ [8-n] RRCA
     213.  00:4124                    ~  endif
     213.  00:4124  E6 FC             >  and  0xFC
     213.  00:4126  B0                >  or  b
     213.  00:4127                    >  if (n<=4)
     213.  00:4127  0F 0F 0F 0F       > [n] RRCA
     213.  00:412B                    >  else
     213.  00:412B                    ~ [8-n] RLCA
     213.  00:412B                    ~  endif
     213.  00:412B  32 FF FF          >  ld  (0FFFFh),a
     213.  00:412E  47                >  ld  b,a
     214.  00:412F  7A                  1:	ld		a,d				; A = Final value
     215.  00:4130  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     216.  00:4132  C9                  	ret
     217.  00:4133                      	
     218.  00:4133                      ; ---------------------------
     219.  00:4133                      ; SETSLOTPAGE3
     220.  00:4133                      ; Set the slot passed in A
     221.  00:4133                      ; at page 3 in the Z80 address space
     222.  00:4133                      ; A: Format FxxxSSPP
     223.  00:4133                      ; ----------------------------
     224.  00:4133                      	
     225.  00:4133                      setslotpage3:
     226.  00:4133  F3                  	di
     227.  00:4134  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     228.  00:4135  DB A8               	in		a,(0A8h)
     229.  00:4137  07 07               [2]	RLCA
     230.  00:4139  E6 FC               	and		0xFC
     231.  00:413B  57                  	ld		d,a					; D = Primary slot value
     232.  00:413C  78                  	ld		a,b
     233.  00:413D  E6 03               	and		3
     234.  00:413F  B2                  	or		d
     235.  00:4140  0F 0F               [2]	RRCA	
     236.  00:4142  57                  	ld		d,a		; D = Final Value for primary slot
     237.  00:4143  78                  	ld		a,b		; Check if expanded
     238.  00:4144  CB 7F               	bit		7,a
     239.  00:4146  28 26               	jr		z,1f	; Not Expanded
     240.  00:4148                      	mainslot_setup	2
     240.  00:4148  E6 03             >  and  3
     240.  00:414A  0F 0F             > [2] rrca
     240.  00:414C  E6 C0             >  and  0xC0
     240.  00:414E  4F                >  ld  c,a
     240.  00:414F  7A                >  ld  a,d
     240.  00:4150  E6 3F             >  and  0x3F
     240.  00:4152  B1                >  or  c
     240.  00:4153  4F                >  ld  c,a
     240.  00:4154                    > 
     240.  00:4154  78                >  ld  a,b
     240.  00:4155  E6 0C             >  and  0x0C
     240.  00:4157  0F 0F             > [2] rrca
     240.  00:4159  E6 03             >  and  3
     240.  00:415B  47                >  ld  b,a
     240.  00:415C  79                >  ld  a,c
     240.  00:415D  D3 A8             >  out  (0A8h),a
     240.  00:415F  3A FF FF          >  ld  a,(0FFFFh)
     240.  00:4162  2F                >  cpl
     240.  00:4163                    >  if (n<=4)
     240.  00:4163  07 07             > [n] RLCA
     240.  00:4165                    >  else
     240.  00:4165                    ~ [8-n] RRCA
     240.  00:4165                    ~  endif
     240.  00:4165  E6 FC             >  and  0xFC
     240.  00:4167  B0                >  or  b
     240.  00:4168                    >  if (n<=4)
     240.  00:4168  0F 0F             > [n] RRCA
     240.  00:416A                    >  else
     240.  00:416A                    ~ [8-n] RLCA
     240.  00:416A                    ~  endif
     240.  00:416A  32 FF FF          >  ld  (0FFFFh),a
     240.  00:416D  47                >  ld  b,a
     241.  00:416E  7A                  1:	ld		a,d				; A = Final value
     242.  00:416F  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     243.  00:4171  C9                  	ret
     244.  00:4172                      
     245.  00:4172                      	
      22   00:4172                      
      23   00:4172  (00:000C)           rdslt	equ	0x000c
      24   00:4172  (00:001C)           CALSLT	equ	0x001c
      25   00:4172  (00:0180)           chgcpu	equ	0x0180	; change cpu mode
      26   00:4172  (00:FCC1)           exttbl	equ	0xfcc1	; main rom slot
      27   00:4172                      
      28   00:4172                      ; _levelmap:			#mapWidth*mapHeight*2	
      29   00:4172                      
      30   00:4172  (00:8000)           _levelmap equ	0x8000	; ram in page 1
      31   00:4172                      
      32   00:4172                      ; Switch to r800 rom mode
      33   00:4172                      	
      34   00:4172                      _set_r800:
      35   00:4172  DB AA               		in	a,(0aah)
      36   00:4174  E6 F0               		and 011110000B			; upper 4 bits contain info to preserve
      37   00:4176  F6 06               		or	6
      38   00:4178  D3 AA               		out (0aah),a
      39   00:417A  DB A9               		in	a,(0a9h)
      40   00:417C  6F                  		ld	l,a
      41   00:417D                      
      42   00:417D  3A 2D 00            		ld	a,(0x002d)
      43   00:4180  FE 03               		cp	3					; this is a TR
      44   00:4182  7D                  		ld	a,l
      45   00:4183  28 0E               		jr	z,set_turbo_tr
      46   00:4185                      								; this is anything else
      47   00:4185  E6 02               		and	0x02				; CTR
      48   00:4187  C0                  		ret	nz					; if NZ, CTR is not pressed set the turbo
      49   00:4188                      
      50   00:4188  3A 80 01            		ld	A,(chgcpu)
      51   00:418B  FE C3               		cp	0C3h
      52   00:418D  3E 81               		ld	a,81h              ; R800 ROM mode or any other turbo
      53   00:418F  CC 80 01            		call	z,chgcpu
      54   00:4192  C9                  		ret
      55   00:4193                      
      56   00:4193                      set_turbo_tr
      57   00:4193  E6 02               		and	0x02				; CTR
      58   00:4195  C8                  		ret	z					; if Z, CTR is pressed -> do not set the turbo
      59   00:4196  3E 81               		ld	a,81h              	; R800 ROM mode
      60   00:4198  C3 80 01            		jp chgcpu
      61   00:419B                      		
      62   00:419B                      	
      63   00:419B                      checkkbd:
      64   00:419B  DB AA               		in	a,(0aah)
      65   00:419D  E6 F0               		and 011110000B			; upper 4 bits contain info to preserve
      66   00:419F  B3                  		or	e
      67   00:41A0  D3 AA               		out (0aah),a
      68   00:41A2  DB A9               		in	a,(0a9h)
      69   00:41A4  6F                  		ld	l,a
      70   00:41A5  C9                  		ret
      71   00:41A6                      		
      72   00:41A6                      ;-------------------------------------		
      73   00:41A6                      		
      74   00:41A6                      		include plot_frame.asm
       1.  00:41A6                      
       2.  00:41A6                      plot_frame:
       3.  00:41A6  0E 10               		ld		c,WinHeight
       4.  00:41A8                      		
       5.  00:41A8  2A 22 C0            		ld		hl,(_levelmappos)	; pixel scale
       6.  00:41AB                      		repeat 2
       7.  00:41AB                    < 		srl		h
       8.  00:41AB                    < 		rr		l
       9.  00:41AB                    < 		endrepeat
       9.  00:41AB  CB 3C CB 1D CB 3C CB 1D 
      10.  00:41B3  CB 85               		res		0,l
      11.  00:41B5  11 00 80            		ld		de,_levelmap		; byte scale
      12.  00:41B8  19                  		add		hl,de
      13.  00:41B9  EB                  		ex		de,hl			; de -> levelmap
      14.  00:41BA  21 42 00            		ld		hl,2*32+2		; hl -> screen 
      15.  00:41BD                      		
      16.  00:41BD  06 1C               2:		ld		b,WinWidth
      17.  00:41BF  D5                  		push	de
      18.  00:41C0                      
      19.  00:41C0  D5                  3:		push	de
      20.  00:41C1  E5                  		push	hl
      21.  00:41C2                      		
      22.  00:41C2  EB                  		ex		de,hl
      23.  00:41C3  5E                  		ld		e,(hl)
      24.  00:41C4  23                  		inc		hl
      25.  00:41C5  56                  		ld		d,(hl)		; DE = meta tile
      26.  00:41C6                      		
      27.  00:41C6  EB                  		ex		de,hl
      28.  00:41C7  29 29 29            [3]		add		hl,hl
      29.  00:41CA                      		
      30.  00:41CA  11 F0 46            		ld		de,_metatable
      31.  00:41CD  19                  		add		hl,de
      32.  00:41CE  3A 22 C0            		ld		a,(_levelmappos)
      33.  00:41D1  E6 06               		and		00000110B
      34.  00:41D3                      		; and		00000000B
      35.  00:41D3  16 00               		ld		d,0
      36.  00:41D5  5F                  		ld		e,a
      37.  00:41D6  19                  		add		hl,de
      38.  00:41D7  5E                  		ld		e,(hl)
      39.  00:41D8  23                  		inc		hl
      40.  00:41D9  56                  		ld		d,(hl)		; DE = tile
      41.  00:41DA                      
      42.  00:41DA  E1                  		pop		hl			; HL = screen position
      43.  00:41DB  E5                  		push	hl
      44.  00:41DC                      
      45.  00:41DC  C5                  		push	bc
      46.  00:41DD  CD 2B 45            		call	plot_tile
      47.  00:41E0  C1                  		pop		bc
      48.  00:41E1  E1                  		pop		hl
      49.  00:41E2  D1                  		pop		de
      50.  00:41E3                      		
      51.  00:41E3  23                  		inc		hl			; the screen in WinWidthxWinHeight
      52.  00:41E4                      		
      53.  00:41E4  13 13               [2]		inc		de			; the levelmap is uint
      54.  00:41E6  10 D8               		djnz	3b
      55.  00:41E8                      		
      56.  00:41E8                      		if (WinWidth<32)
      57.  00:41E8  11 04 00            			ld	de,32-WinWidth	; only if WinWidth<32
      58.  00:41EB  19                  			add	hl,de
      59.  00:41EC                      		endif
      60.  00:41EC                      		
      61.  00:41EC  D1                  		pop		de
      62.  00:41ED                      		
      63.  00:41ED  14 14               [2]		inc d				; only if mapWidth=256
      64.  00:41EF                      		
      65.  00:41EF  0D                  		dec		c
      66.  00:41F0  20 CB               		jr	nz,2b
      67.  00:41F2  C9                  		ret
      75   00:41F3                      		
      76   00:41F3                      ;-------------------------------------
      77   00:41F3                      ; Entry point
      78   00:41F3                      ;-------------------------------------
      79   00:41F3                      START:
      80   00:41F3  1E 05                       ld		e,5
      81   00:41F5  CD 83 46            		call	_scr
      82   00:41F8                      
      83   00:41F8  CD 72 41            		call 	_set_r800
      84   00:41FB  CD E9 43                    call    powerup
      85   00:41FE                      
      86   00:41FE  1E 06               		ld e,6
      87   00:4200  CD 9B 41            		call	checkkbd
      88   00:4203  3E 01               		ld	a,1
      89   00:4205  CB 0D               		rrc	l				; shift
      90   00:4207  D2 0B 42            		jp	nc,_ntsc
      91   00:420A  AF                  		xor	a
      92   00:420B  32 02 C0            _ntsc:	ld	(SEL_NTSC),a	; if set NSTC, if reset PAL
      93   00:420E                      		
      94   00:420E                      		; ld	e,7
      95   00:420E                      		; call	checkkbd
      96   00:420E                      		; and	0x04				; ESC
      97   00:420E                      		; jp 	z,_mballon_start
      98   00:420E                      		
      99   00:420E  11 00 00            		ld		de,0
     100   00:4211  4B                  		ld		c,e
     101   00:4212  F3                  		di
     102   00:4213  CD 3E 46            		call	_vdpsetvramwr
     103   00:4216  01 00 00            		ld		bc,0x0000
     104   00:4219  AF                  1:		xor		a
     105   00:421A  D3 98               		out		(0x98),a
     106   00:421C  0B                  		dec		bc
     107   00:421D  78                  		ld		a,b
     108   00:421E  B1                  		or		c
     109   00:421F  20 F8               		jr	nz,1b
     110   00:4221                      		
     111   00:4221  F3                  		di
     112   00:4222                      		// sprites 16x16
     113   00:4222  3A E0 F3            		ld	a,(0xF3E0)
     114   00:4225  F6 02               		or	2
     115   00:4227  32 E0 F3            		ld	(0xF3E0),a
     116   00:422A  D3 99               		out		(0x99),a
     117   00:422C  3E 81               		ld		a,128+1
     118   00:422E  D3 99               		out		(0x99),a
     119   00:4230                      
     120   00:4230                      		// border color
     121   00:4230  3E 55               		ld		a,0x55
     122   00:4232  D3 99               		out		(0x99),a
     123   00:4234  3E 87               		ld		a,128+7
     124   00:4236  D3 99               		out		(0x99),a
     125   00:4238                      		
     126   00:4238                      		// enable sprites + TP
     127   00:4238  3A E7 FF            		ld		a,(0xFFE7)
     128   00:423B  F6 20               		or		32
     129   00:423D  32 E7 FF            		ld		(0xFFE7),a
     130   00:4240  D3 99               		out		(0x99),a
     131   00:4242  3E 88               		ld		a,128+8
     132   00:4244  D3 99               		out		(0x99),a
     133   00:4246                      		
     134   00:4246                      		// Set 192 lines @50Hz (PAL assumed!)
     135   00:4246  3A 02 C0            		ld	a,(SEL_NTSC)
     136   00:4249  A7                  		and 	a
     137   00:424A  20 0C               		jr		nz,1f
     138   00:424C                      		
     139   00:424C  3A E8 FF            		ld		a,(0xFFE8)		; PAL
     140   00:424F  E6 7F               		and		127
     141   00:4251  F6 02               		or		2
     142   00:4253  32 E8 FF            		ld		(0xFFE8),a
     143   00:4256  18 0C               		jr	2f
     144   00:4258  3A E8 FF            1:		ld		a,(0xFFE8)		; NTSC
     145   00:425B  E6 7F               		and		127
     146   00:425D  F6 02               		or		2
     147   00:425F  EE 02               		xor		2
     148   00:4261  32 E8 FF            		ld		(0xFFE8),a
     149   00:4264                      2:	
     150   00:4264  D3 99               		out		(0x99),a
     151   00:4266  3E 89               		ld		a,128+9
     152   00:4268  D3 99               		out		(0x99),a
     153   00:426A  FB                  		ei
     154   00:426B                      
     155   00:426B  CD BF 5B            		call _hw_sprite_init
     156   00:426E                      		
     157   00:426E  3E C3               		LD	A,0xC3
     158   00:4270  21 B9 43            		LD	HL,_isr
     159   00:4273  F3                  		DI
     160   00:4274  32 9F FD            		LD	(0xFD9F),A
     161   00:4277  22 A0 FD            		LD	(0xFDA0),HL
     162   00:427A  FB                  		EI
     163   00:427B                      
     164   00:427B  CD 30 46            		call	_clean_buffs
     165   00:427E                      
     166   00:427E  CD 20 44            		call	_SetPalet
     167   00:4281  1E 00               		ld		e,0
     168   00:4283  CD 72 46                    call	_setpage
     169   00:4286                      		
     170   00:4286                      		; unpack level map (meta_tiles)
     171   00:4286  3E 04               		ld	a, :_level
     172   00:4288  32 00 70            		ld	(_bank2),a
     173   00:428B                      		
     174   00:428B  AF                  		xor	a
     175   00:428C  32 20 C0            		ld		(_vbit16 ),a
     176   00:428F  11 00 80            		ld		de,	_level
     177   00:4292  01 00 00            		ld		bc,0
     178   00:4295  CD 32 44            		call	_vuitpakker 
     179   00:4298                      		
     180   00:4298  CD 61 40            		call	setrampage2
     181   00:429B                      		
     182   00:429B  11 00 00            		ld		de,0
     183   00:429E  4B                  		ld		c,e
     184   00:429F  CD 58 46            		call	_vdpsetvramrd
     185   00:42A2  21 00 80            		ld		hl,_levelmap
     186   00:42A5  11 00 40            		ld		de,mapWidth*mapHeight*2
     187   00:42A8  0E 98               		ld		c,0x98
     188   00:42AA  ED A2               1:		ini
     189   00:42AC  1B                  		dec	de
     190   00:42AD  7A                  		ld	a,d
     191   00:42AE  B3                  		or	e
     192   00:42AF  20 F9               		jr	nz,1b
     193   00:42B1                      
     194   00:42B1  CD 5B 40            		call	setrompage2
     195   00:42B4                      				
     196   00:42B4                      		; unpack frame
     197   00:42B4  3E 01               		ld		a, :_frame
     198   00:42B6  32 00 70            		ld		(_bank2),a
     199   00:42B9                      		
     200   00:42B9  AF                  		xor	a
     201   00:42BA  32 20 C0            		ld		(_vbit16 ),a
     202   00:42BD  11 00 80            		ld		de,	_frame
     203   00:42C0  01 00 00            		ld		bc,0
     204   00:42C3  CD 32 44            		call	_vuitpakker 
     205   00:42C6                      
     206   00:42C6  1E 01               		ld		e,1
     207   00:42C8  CD 72 46                    call	_setpage
     208   00:42CB                      
     209   00:42CB  11 00 80            		ld		de,	_frame
     210   00:42CE  01 00 80            		ld		bc,0x8000
     211   00:42D1  CD 32 44            		call	_vuitpakker 
     212   00:42D4                      		
     213   00:42D4  1E 02               		ld		e,2
     214   00:42D6  CD 72 46                    call	_setpage
     215   00:42D9                      
     216   00:42D9                      		; unpack tileset
     217   00:42D9  3E 02               		ld		a, :_tiles0
     218   00:42DB  32 00 70            		ld		(_bank2),a
     219   00:42DE                      		
     220   00:42DE  3E 01               		ld		a,1
     221   00:42E0  32 20 C0            		ld		(_vbit16 ),a
     222   00:42E3  11 00 80            		ld		de,	_tiles0
     223   00:42E6  01 00 00            		ld		bc,0
     224   00:42E9  CD 32 44            		call	_vuitpakker 
     225   00:42EC                      		
     226   00:42EC  1E 03               		ld		e,3
     227   00:42EE  CD 72 46                    call	_setpage
     228   00:42F1                      		
     229   00:42F1  3E 03               		ld		a, :_tiles1
     230   00:42F3  32 00 70            		ld		(_bank2),a
     231   00:42F6                      		
     232   00:42F6  3E 01               		ld		a,1
     233   00:42F8  32 20 C0            		ld		(_vbit16 ),a
     234   00:42FB  11 00 80            		ld		de,	_tiles1
     235   00:42FE  01 00 80            		ld		bc,0x8000
     236   00:4301  CD 32 44            		call	_vuitpakker 
     237   00:4304                      		
     238   00:4304                      		; call	int_sprites
     239   00:4304                      
     240   00:4304                      		; main init
     241   00:4304                      		
     242   00:4304  CD 61 40            		call	setrampage2
     243   00:4307  FB                  		ei
     244   00:4308                      		
     245   00:4308  21 00 00            		ld		hl,0
     246   00:430B  22 22 C0            		ld		(_levelmappos),hl
     247   00:430E  22 1E C0            		ld		(_nframes),hl
     248   00:4311  7C                  		ld		a,h
     249   00:4312  32 26 C0            		ld		(_currentpage),a
     250   00:4315  32 03 C0            		ld		(_mcdx),a
     251   00:4318  32 09 C0            		ld		(_mcframe),a
     252   00:431B                      main_loop:
     253   00:431B  AF                  		xor		a
     254   00:431C  32 0B C0            		ld		(_ticxframe),a
     255   00:431F                      
     256   00:431F  3A 26 C0            		ld		a,(_currentpage)
     257   00:4322  EE 01               		xor		1
     258   00:4324  32 26 C0            		ld		(_currentpage),a
     259   00:4327  EE 01               		xor		1
     260   00:4329  5F                  		ld		e,a
     261   00:432A  76                  		halt
     262   00:432B  CD 72 46                    call	_setpage
     263   00:432E  CB 43               		bit		0,e
     264   00:4330  21 47 C6            		ld		hl,_shadow1
     265   00:4333  20 03               		jr		nz,1f
     266   00:4335  21 27 C0            		ld		hl,_shadow0
     267   00:4338  22 24 C0            1:		ld		(_shadowbuff),hl
     268   00:433B                      
     269   00:433B                      		; ld	ix,enemylist
     270   00:433B                      		; call save_background
     271   00:433B                      
     272   00:433B                      		; ld	ix,enemylist
     273   00:433B                      		; call plot_sprite
     274   00:433B                      
     275   00:433B  CD A6 41            		call	plot_frame
     276   00:433E                      		
     277   00:433E  CD 38 5C            		call	enemies_LMMM
     278   00:4341                      
     279   00:4341                      		; ld	ix,enemylist
     280   00:4341                      		; call restore_background
     281   00:4341                      
     282   00:4341                      		; ld	ix,enemylist
     283   00:4341                      		; call	move_sprites
     284   00:4341                      		
     285   00:4341  CD C2 46            		call	_compute_fps
     286   00:4344  CD A0 46            		call	_print_fps
     287   00:4347                      
     288   00:4347  2A 1E C0            		ld		hl,(_nframes)
     289   00:434A  23                  		inc		hl
     290   00:434B  22 1E C0            		ld		(_nframes),hl
     291   00:434E                      		
     292   00:434E  CD F2 43            		call	_cursors
     293   00:4351  7D                  		ld		a,l
     294   00:4352  FE 01               		cp		1
     295   00:4354  CA 6E 43            		jp		z,up
     296   00:4357  FE 03               		cp		3
     297   00:4359  CA 88 43            		jp		z,right
     298   00:435C  FE 05               		cp		5
     299   00:435E  CA 7B 43            		jp		z,dwn
     300   00:4361  FE 07               		cp		7
     301   00:4363  CA A0 43            		jp		z,left
     302   00:4366  AF                  		xor		a
     303   00:4367  32 03 C0            		ld		(_mcdx),a
     304   00:436A  C3 1B 43            		jp      main_loop
     305   00:436D                      
     306   00:436D  C9                          ret
     307   00:436E                      
     308   00:436E  2A 22 C0            up:		ld		hl,(_levelmappos)
     309   00:4371  01 00 F8            		ld		bc,-mapWidth*8
     310   00:4374  09                  		add		hl,bc
     311   00:4375  22 22 C0            		ld		(_levelmappos),hl
     312   00:4378  C3 1B 43            		jp      main_loop
     313   00:437B                      
     314   00:437B  2A 22 C0            dwn:	ld		hl,(_levelmappos)
     315   00:437E  01 00 08            		ld		bc,mapWidth*8
     316   00:4381  09                  		add		hl,bc
     317   00:4382  22 22 C0            		ld		(_levelmappos),hl
     318   00:4385  C3 1B 43            		jp      main_loop
     319   00:4388                      		
     320   00:4388  2A 22 C0            right:	ld		hl,(_levelmappos)
     321   00:438B  3A 0B C0            		ld		a,(_ticxframe)
     322   00:438E  32 03 C0            		ld		(_mcdx),a
     323   00:4391  4F                  		ld		c,a					; compensate frame rate
     324   00:4392  06 00               		ld		b,0
     325   00:4394  09                  		add		hl,bc
     326   00:4395  22 22 C0            		ld		(_levelmappos),hl
     327   00:4398  3E 01               		ld	a,1
     328   00:439A  32 0A C0            		ld	(_mcstate),a
     329   00:439D  C3 1B 43            		jp      main_loop
     330   00:43A0                      
     331   00:43A0  2A 22 C0            left:	ld		hl,(_levelmappos)
     332   00:43A3  3A 0B C0            		ld		a,(_ticxframe)
     333   00:43A6  ED 44               		neg
     334   00:43A8  32 03 C0            		ld		(_mcdx),a
     335   00:43AB  4F                  		ld		c,a					; compensate frame rate
     336   00:43AC  06 FF               		ld		b,-1
     337   00:43AE  09                  		add		hl,bc
     338   00:43AF  22 22 C0            		ld		(_levelmappos),hl
     339   00:43B2  AF                  		xor	a
     340   00:43B3  32 0A C0            		ld	(_mcstate),a
     341   00:43B6  C3 1B 43            		jp      main_loop
     342   00:43B9                      
     343   00:43B9                      ;-------------------------------------
     344   00:43B9  (00:FC9E)           JIFFY: equ 0xFC9E 
     345   00:43B9                      ;-------------------------------------
     346   00:43B9  E5                  _isr:	push	hl
     347   00:43BA  C5                  		push	bc
     348   00:43BB  2A 9E FC            		ld		hl,(JIFFY)
     349   00:43BE                      
     350   00:43BE  3A 02 C0            		ld	a,(SEL_NTSC)
     351   00:43C1  A7                  		and 	a
     352   00:43C2  20 05               		jr		nz,1f
     353   00:43C4                      		
     354   00:43C4  01 CE FF            		ld		bc,-50			; PAL 
     355   00:43C7  18 03               		jr	2f
     356   00:43C9                      1:
     357   00:43C9  01 C4 FF            		ld		bc,-60			; NTSC
     358   00:43CC                      		
     359   00:43CC  09                  2:		add		hl,bc
     360   00:43CD  21 0B C0            		ld		hl,_ticxframe
     361   00:43D0  34                  		inc		(hl)
     362   00:43D1  C1                  		pop		bc
     363   00:43D2  E1                  		pop		hl
     364   00:43D3  D0                  		ret	nc
     365   00:43D4                      		
     366   00:43D4  E5                  		push	hl
     367   00:43D5  21 00 00            		ld		hl,0
     368   00:43D8  22 9E FC            		ld		(JIFFY),hl
     369   00:43DB  2A 1E C0            		ld		hl,(_nframes)
     370   00:43DE  22 1C C0            		ld		(_fps),hl
     371   00:43E1  21 00 00            		ld		hl,0
     372   00:43E4  22 1E C0            		ld		(_nframes),hl
     373   00:43E7  E1                  		pop		hl
     374   00:43E8  C9                  		ret
     375   00:43E9                      ;-------------------------------------
     376   00:43E9                      ;   Power-up routine for 32K ROM
     377   00:43E9                      ;   set pages and sub slot
     378   00:43E9                      ;-------------------------------------
     379   00:43E9                      powerup:
     380   00:43E9  CD 10 40                    call    search_slot
     381   00:43EC  CD 2F 40                    call    search_slotram
     382   00:43EF  C3 5B 40            		jp		setrompage2
     383   00:43F2                              
     384   00:43F2                      
     385   00:43F2                      ;-------------------------------------
     386   00:43F2                      
     387   00:43F2                      
     388   00:43F2  (00:00D5)           GTSTCK      equ 0x00D5      ;Returns the joystick status
     389   00:43F2  (00:00D8)           GTTRIG      equ 0x00D8      ;Returns current trigger status
     390   00:43F2                      
     391   00:43F2                      
     392   00:43F2                      _cursors:
     393   00:43F2                      
     394   00:43F2  AF                  	xor     a
     395   00:43F3  CD D5 00            	call	GTSTCK
     396   00:43F6  F5                  	push	af		;return the cursors
     397   00:43F7  3E 01               	ld		a,1
     398   00:43F9  CD D5 00            	call	GTSTCK
     399   00:43FC  E1                  	pop		hl		;return the joystick
     400   00:43FD  B4                  	or		h
     401   00:43FE  6F                  	ld		l,a
     402   00:43FF  C9                  	ret
     403   00:4400                      	
     404   00:4400                      
     405   00:4400                      
     406   00:4400                              
     407   00:4400                      ;-------------------------------------
     408   00:4400                      		
     409   00:4400  (00:0099)           vdpport1 equ 0x99
     410   00:4400  (00:009A)           vdpport2 equ 0x9A
     411   00:4400                      
     412   00:4400                      levelcolors:
     413   00:4400  (0020)              	incbin "palette.bin"
     414   00:4420                      
     415   00:4420                      _SetPalet:   
     416   00:4420  F3                  	di
     417   00:4421  AF                  	xor a 			;Set pointer to zero.
     418   00:4422  D3 99               	out (vdpport1),a        
     419   00:4424  3E 90               	ld  a,16 | 010000000B
     420   00:4426  D3 99               	out (vdpport1),a
     421   00:4428                      
     422   00:4428  21 00 44            	ld  hl,levelcolors
     423   00:442B  01 9A 20            	ld bc,vdpport2+32*256
     424   00:442E  ED B3               	otir
     425   00:4430  FB                  	ei
     426   00:4431  C9                  	ret
     427   00:4432                      
     428   00:4432                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     429   00:4432                      
     430   00:4432                      	include vuitpakker.asm
       1.  00:4432                      
       2.  00:4432                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       3.  00:4432                      
       4.  00:4432                      
       5.  00:4432                      _vuitpakker:
       6.  00:4432  FD E5                   push iy
       7.  00:4434  DD E5                   push ix
       8.  00:4436                      
       9.  00:4436  CD 3E 44                call  1f
      10.  00:4439                      
      11.  00:4439  DD E1                   pop ix
      12.  00:443B  FD E1                   pop iy
      13.  00:443D  C9                      ret
      14.  00:443E                      
      15.  00:443E                      1:
      16.  00:443E                      ; in de input
      17.  00:443E                      ; in bc VRAM output
      18.  00:443E                      
      19.  00:443E  62                      ld h,d
      20.  00:443F  6B                      ld l,e
      21.  00:4440  50                      ld d,b
      22.  00:4441  59                      ld e,c
      23.  00:4442                      
      24.  00:4442                      ; pletter v0.5 msx unpacker
      25.  00:4442                      
      26.  00:4442                      ;-----------------------------------------------------------
      27.  00:4442                      ; Pletter 0.5b VRAM Depacker - 64Kb version
      28.  00:4442                      ; HL = RAM/ROM source ; DE = VRAM destination
      29.  00:4442                      ;-----------------------------------------------------------
      30.  00:4442  F3                      di
      31.  00:4443                      
      32.  00:4443                      ; VRAM address setup
      33.  00:4443                      ;    ld  a,e
      34.  00:4443                      ;    out (0x99),a
      35.  00:4443                      ;    ld  a,d
      36.  00:4443                      ;    or  0x40
      37.  00:4443                      ;    out (0x99),a
      38.  00:4443  CD 03 45                call setVwrite
      39.  00:4446                      
      40.  00:4446                      ; Initialization
      41.  00:4446  7E                      ld  a,(hl)
      42.  00:4447  23                      inc hl
      43.  00:4448  D9                      exx
      44.  00:4449  11 00 00                ld  de,0
      45.  00:444C  87                      add a,a
      46.  00:444D  3C                      inc a
      47.  00:444E  CB 13                   rl  e
      48.  00:4450  87                      add a,a
      49.  00:4451  CB 13                   rl  e
      50.  00:4453  87                      add a,a
      51.  00:4454  CB 13                   rl  e
      52.  00:4456  CB 13                   rl  e
      53.  00:4458  21 1D 45                ld  hl,__modes
      54.  00:445B  19                      add hl,de
      55.  00:445C  5E                      ld  e,(hl)
      56.  00:445D  DD                      db    0xdd
      57.  00:445E  6B                      ld  l,e         ; ld ixl,e    
      58.  00:445F  23                      inc hl
      59.  00:4460  5E                      ld  e,(hl)
      60.  00:4461  DD                      db    0xdd
      61.  00:4462  63                      ld h,e          ; ld  ixh,e
      62.  00:4463  1E 01                   ld  e,1
      63.  00:4465  D9                      exx
      64.  00:4466  FD 21 6F 44             ld  iy,__loop
      65.  00:446A                      
      66.  00:446A                      ; Main depack loop
      67.  00:446A  0E 98               _literal:ld  c,098h
      68.  00:446C  ED A3                   outi
      69.  00:446E  13                      inc de
      70.  00:446F  87                  __loop:   add a,a
      71.  00:4470  CC F7 44                call    z,_getbit
      72.  00:4473  30 F5                   jr  nc,_literal
      73.  00:4475                      
      74.  00:4475                      ; Compressed data
      75.  00:4475  D9                      exx
      76.  00:4476  62                      ld  h,d
      77.  00:4477  6B                      ld  l,e
      78.  00:4478  87                  _getlen: add a,a
      79.  00:4479  CC FB 44                call    z,_getbitexx
      80.  00:447C  30 1D                   jr  nc,lenok
      81.  00:447E  87                  lus:    add a,a
      82.  00:447F  CC FB 44                call    z,_getbitexx
      83.  00:4482  ED 6A                   adc hl,hl
      84.  00:4484  D8                      ret c
      85.  00:4485  87                      add a,a
      86.  00:4486  CC FB 44                call    z,_getbitexx
      87.  00:4489  30 10                   jr  nc,lenok
      88.  00:448B  87                      add a,a
      89.  00:448C  CC FB 44                call    z,_getbitexx
      90.  00:448F  ED 6A                   adc hl,hl
      91.  00:4491  DA 01 45                jp  c,Depack_out
      92.  00:4494  87                      add a,a
      93.  00:4495  CC FB 44                call    z,_getbitexx
      94.  00:4498  DA 7E 44                jp  c,lus
      95.  00:449B  23                  lenok:  inc hl
      96.  00:449C  D9                      exx
      97.  00:449D  4E                      ld  c,(hl)
      98.  00:449E  23                      inc hl
      99.  00:449F  06 00                   ld  b,0
     100.  00:44A1  CB 79                   bit 7,c
     101.  00:44A3  CA D6 44                jp  z,offsok
     102.  00:44A6  DD E9                   jp  (ix)
     103.  00:44A8                      
     104.  00:44A8  87                  _mode7:  add a,a
     105.  00:44A9  CC F7 44                call    z,_getbit
     106.  00:44AC  CB 10                   rl  b
     107.  00:44AE  87                  _mode6:  add a,a
     108.  00:44AF  CC F7 44                call    z,_getbit
     109.  00:44B2  CB 10                   rl  b
     110.  00:44B4  87                  _mode5:  add a,a
     111.  00:44B5  CC F7 44                call    z,_getbit
     112.  00:44B8  CB 10                   rl  b
     113.  00:44BA  87                  _mode4:  add a,a
     114.  00:44BB  CC F7 44                call    z,_getbit
     115.  00:44BE  CB 10                   rl  b
     116.  00:44C0  87                  _mode3:  add a,a
     117.  00:44C1  CC F7 44                call    z,_getbit
     118.  00:44C4  CB 10                   rl  b
     119.  00:44C6  87                  _mode2:  add a,a
     120.  00:44C7  CC F7 44                call    z,_getbit
     121.  00:44CA  CB 10                   rl  b
     122.  00:44CC  87                      add a,a
     123.  00:44CD  CC F7 44                call    z,_getbit
     124.  00:44D0  30 04                   jr  nc,offsok
     125.  00:44D2  B7                      or  a
     126.  00:44D3  04                      inc b
     127.  00:44D4  CB B9                   res 7,c
     128.  00:44D6  03                  offsok: inc bc
     129.  00:44D7  E5                      push    hl
     130.  00:44D8  D9                      exx
     131.  00:44D9  E5                      push    hl
     132.  00:44DA  D9                      exx
     133.  00:44DB  6B                      ld  l,e
     134.  00:44DC  62                      ld  h,d
     135.  00:44DD  ED 42                   sbc hl,bc
     136.  00:44DF  C1                      pop bc
     137.  00:44E0  F5                      push    af
     138.  00:44E1                      _loop: 
     139.  00:44E1                      ;    ld  a,l
     140.  00:44E1                      ;    out (0x99),a
     141.  00:44E1                      ;    ld  a,h
     142.  00:44E1                      ;    out (0x99),a
     143.  00:44E1  CD 0F 45                call setVread
     144.  00:44E4                          
     145.  00:44E4  DB 98                   in  a,(0x98)
     146.  00:44E6  08                      ex  af,af'
     147.  00:44E7                      ;    ld  a,e
     148.  00:44E7                      ;    out (0x99),a
     149.  00:44E7                      ;    ld  a,d
     150.  00:44E7                      ;    or  0x40
     151.  00:44E7                      ;    out (0x99),a
     152.  00:44E7  CD 03 45                call setVwrite
     153.  00:44EA                          
     154.  00:44EA  08                      ex  af,af'
     155.  00:44EB  D3 98                   out (0x98),a
     156.  00:44ED  13                      inc de
     157.  00:44EE  ED A1                   cpi
     158.  00:44F0  EA E1 44                jp  pe,_loop
     159.  00:44F3  F1                      pop af
     160.  00:44F4  E1                      pop hl
     161.  00:44F5  FD E9                   jp  (iy)
     162.  00:44F7                      ;
     163.  00:44F7  7E                  _getbit: ld  a,(hl)
     164.  00:44F8  23                      inc hl
     165.  00:44F9  17                      rla
     166.  00:44FA  C9                      ret
     167.  00:44FB                      
     168.  00:44FB                      _getbitexx:
     169.  00:44FB  D9                      exx
     170.  00:44FC  7E                      ld  a,(hl)
     171.  00:44FD  23                      inc hl
     172.  00:44FE  D9                      exx
     173.  00:44FF  17                      rla
     174.  00:4500  C9                      ret
     175.  00:4501                      
     176.  00:4501                      ; De-packer exit
     177.  00:4501                      Depack_out:
     178.  00:4501  FB                      ei
     179.  00:4502  C9                      ret
     180.  00:4503                      
     181.  00:4503                      
     182.  00:4503                      
     183.  00:4503                      setVwrite:
     184.  00:4503                      
     185.  00:4503  D5                      push    de
     186.  00:4504  C5                      push    bc
     187.  00:4505  ED 4B 20 C0             ld      bc,(_vbit16)
     188.  00:4509  CD 3E 46                call    _vdpsetvramwr
     189.  00:450C  C1                      pop     bc
     190.  00:450D  D1                      pop     de
     191.  00:450E                      
     192.  00:450E  C9                      ret
     193.  00:450F                      setVread:    
     194.  00:450F                      
     195.  00:450F  D5                      push    de
     196.  00:4510  C5                      push    bc
     197.  00:4511  5D                      ld      e,l
     198.  00:4512  54                      ld      d,h
     199.  00:4513  ED 4B 20 C0             ld      bc,(_vbit16)
     200.  00:4517  CD 58 46                call    _vdpsetvramrd
     201.  00:451A  C1                      pop     bc
     202.  00:451B  D1                      pop     de
     203.  00:451C                      
     204.  00:451C  C9                      ret
     205.  00:451D                      
     206.  00:451D                      __modes:
     207.  00:451D  D6 44                   dw  offsok
     208.  00:451F  C6 44                   dw  _mode2
     209.  00:4521  C0 44                   dw  _mode3
     210.  00:4523  BA 44                   dw  _mode4
     211.  00:4525  B4 44                   dw  _mode5
     212.  00:4527  AE 44                   dw  _mode6
     213.  00:4529  A8 44                   dw  _mode7
     431   00:452B                      
     432   00:452B                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     433   00:452B                      
     434   00:452B                      	include plot_tile.asm
       1.  00:452B                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       2.  00:452B                      ; input
       3.  00:452B                      ; hl  configured in window map 32x24
       4.  00:452B                      ; de  tile to be plot
       5.  00:452B                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       6.  00:452B                      plot_tile:
       7.  00:452B  29                  	add		hl,hl		; now HL is aiming to uints
       8.  00:452C                      
       9.  00:452C  E5                  	push	hl
      10.  00:452D  ED 4B 24 C0         	ld		bc,(_shadowbuff)
      11.  00:4531  09                  	add		hl,bc		; HL = pointer to the shadow map
      12.  00:4532                      	
      13.  00:4532  7E                  	ld		a,(hl)		; Avoid writing the same tile
      14.  00:4533  BB                  	cp		e
      15.  00:4534  20 08               	jr		nz,1f
      16.  00:4536  23                  	inc		hl
      17.  00:4537  7E                  	ld		a,(hl)
      18.  00:4538  BA                  	cp		d
      19.  00:4539  2B                  	dec		hl
      20.  00:453A  20 02               	jr		nz,1f
      21.  00:453C                      
      22.  00:453C  E1                  	pop		hl
      23.  00:453D  C9                  	ret
      24.  00:453E                      	
      25.  00:453E  73                  1:	ld		(hl),e		; rewrite the position with the actual tile in shadowbuffer
      26.  00:453F  23                  	inc		hl
      27.  00:4540  72                  	ld		(hl),d
      28.  00:4541                      	
      29.  00:4541  E1                  	pop		hl			; HL relative position in 32x24*2
      30.  00:4542                      						; DE new 16 tile to be plotted
      31.  00:4542                      						
      32.  00:4542  CB 7A               	bit 	7,d			; test for LMMMM	
      33.  00:4544  C2 91 45            	jp		nz,plot_trasp_tile
      34.  00:4547                      	
      35.  00:4547  7A                  	ld		a,d
      36.  00:4548  B3                  	or		e
      37.  00:4549  C2 55 45            	jp		nz,plot_foreground
      38.  00:454C                      
      39.  00:454C                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      40.  00:454C                      ; input
      41.  00:454C                      ; hl  configured in window map 32x24
      42.  00:454C                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      43.  00:454C                      
      44.  00:454C                      ; plot_background:
      45.  00:454C                      
      46.  00:454C  E5                  	push	hl
      47.  00:454D  11 9E 56            	ld		de,_backmap-32*4-2
      48.  00:4550  19                  	add		hl,de
      49.  00:4551  5E                  	ld		e,(hl)
      50.  00:4552  23                  	inc		hl
      51.  00:4553  56                  	ld		d,(hl)
      52.  00:4554  E1                  	pop		hl
      53.  00:4555                      	
      54.  00:4555                      	
      55.  00:4555                      plot_foreground:
      56.  00:4555                      	; ld	a,low SolidTile0
      57.  00:4555                      	; cp	e
      58.  00:4555                      	; jr	nz,1f
      59.  00:4555                      	; ld	a,high SolidTile0
      60.  00:4555                      	; cp	d
      61.  00:4555                      	; ld	a,17*SolidColor0		; solid color0
      62.  00:4555                      	; jp	z,plot_solid_box
      63.  00:4555                      ; 1:
      64.  00:4555  3E 17               	ld	a,low SolidTile1
      65.  00:4557  BB                  	cp	e
      66.  00:4558  20 08               	jr	nz,1f
      67.  00:455A  3E 00               	ld	a,high SolidTile1
      68.  00:455C  BA                  	cp	d
      69.  00:455D  3E 11               	ld	a,17*SolidColor1		; solid color1
      70.  00:455F  CA F6 45            	jp	z,plot_solid_box
      71.  00:4562                      1:	
      72.  00:4562  3E 3A               	ld	a,low SolidTile2
      73.  00:4564  BB                  	cp	e
      74.  00:4565  20 08               	jr	nz,1f
      75.  00:4567  3E 03               	ld	a,high SolidTile2
      76.  00:4569  BA                  	cp	d
      77.  00:456A  3E 44               	ld	a,17*SolidColor2		; solid color2
      78.  00:456C  CA F6 45            	jp	z,plot_solid_box
      79.  00:456F                      1:		
      80.  00:456F  3E 10               	ld	a,low SolidTile3
      81.  00:4571  BB                  	cp	e
      82.  00:4572  20 08               	jr	nz,1f
      83.  00:4574  3E 05               	ld	a,high SolidTile3
      84.  00:4576  BA                  	cp	d
      85.  00:4577  3E 77               	ld	a,17*SolidColor3		; solid color3
      86.  00:4579  CA F6 45            	jp	z,plot_solid_box
      87.  00:457C                      1:		
      88.  00:457C  3E 70               	ld	a,low SolidTile4
      89.  00:457E  BB                  	cp	e
      90.  00:457F  20 08               	jr	nz,1f
      91.  00:4581  3E 06               	ld	a,high SolidTile4
      92.  00:4583  BA                  	cp	d
      93.  00:4584  3E 88               	ld	a,17*SolidColor4		; solid color4
      94.  00:4586  CA F6 45            	jp	z,plot_solid_box
      95.  00:4589                      1:		
      96.  00:4589                      	
      97.  00:4589                      
      98.  00:4589  CD A9 45            	call 	vdp_conf
      99.  00:458C                      
     100.  00:458C  3E D0               	ld		a,11010000B
     101.  00:458E  D3 9B               	out 	(0x9B), a		; command HMMM
     102.  00:4590  C9                  	ret
     103.  00:4591                      
     104.  00:4591                      	
     105.  00:4591                      	
     106.  00:4591                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     107.  00:4591                      ; input
     108.  00:4591                      ; hl   configured in window map 32x24
     109.  00:4591                      ; de  tile to be plot
     110.  00:4591                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     111.  00:4591                      
     112.  00:4591                      plot_trasp_tile:
     113.  00:4591                      
     114.  00:4591  D5                  	push	de
     115.  00:4592  E5                  	push	hl
     116.  00:4593                      					;	plot_background
     117.  00:4593  11 9E 56            	ld		de,_backmap-32*4-2
     118.  00:4596  19                  	add		hl,de
     119.  00:4597  5E                  	ld		e,(hl)
     120.  00:4598  23                  	inc		hl
     121.  00:4599  56                  	ld		d,(hl)
     122.  00:459A                      
     123.  00:459A  E1                  	pop		hl
     124.  00:459B  E5                  	push	hl
     125.  00:459C  CD 55 45            	call	plot_foreground
     126.  00:459F  E1                  	pop		hl
     127.  00:45A0  D1                  	pop		de
     128.  00:45A1                      
     129.  00:45A1  CD A9 45            	call	vdp_conf
     130.  00:45A4                      
     131.  00:45A4  3E 98               	ld		a,10011000B
     132.  00:45A6  D3 9B               	out 	(0x9B), a		; command LMMM
     133.  00:45A8  C9                  	ret
     134.  00:45A9                      
     135.  00:45A9                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     136.  00:45A9                      ; input
     137.  00:45A9                      ; hl   configured in window map 32x24
     138.  00:45A9                      ; de  tile to be plot
     139.  00:45A9                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     140.  00:45A9                      
     141.  00:45A9                      vdp_conf:	
     142.  00:45A9                      	
     143.  00:45A9  29 29               [2]	add		hl,hl
     144.  00:45AB  4D                  	ld		c,l			; C = dx*8
     145.  00:45AC  7C                  	ld		a,h
     146.  00:45AD  87 87 87            [3]	add		a,a
     147.  00:45B0  47                  	ld		b,a			; B = dy*8
     148.  00:45B1  C5                  	push	bc			; dx*8 and dy*8 on the stack
     149.  00:45B2                      	
     150.  00:45B2                      	; de has the 16 bit tile
     151.  00:45B2                      	; de = 10 bits = 5 bits for y and 5 bits for x
     152.  00:45B2                      
     153.  00:45B2  EB                  	ex		de,hl
     154.  00:45B3  29 29 29            [3]	add		hl,hl
     155.  00:45B6                      	
     156.  00:45B6                      	; now l is sx*8 and h is sy
     157.  00:45B6                      		
     158.  00:45B6  7C                  	ld		a,h
     159.  00:45B7  87 87 87            [3]	add		a,a
     160.  00:45BA  67                  	ld		h,a
     161.  00:45BB  F5                  	push	af
     162.  00:45BC                      	
     163.  00:45BC                      	; now h is sy*8
     164.  00:45BC  F3                  	di
     165.  00:45BD  3E 20               	ld 		a, 32
     166.  00:45BF  D3 99               	out 	(0x99),a
     167.  00:45C1  3E 91               	ld 		a, 17+128
     168.  00:45C3  D3 99               	out 	(0x99),a
     169.  00:45C5  FB                  	ei
     170.  00:45C6                      
     171.  00:45C6  0E 9B               	ld 		c, 0x9B
     172.  00:45C8                      	
     173.  00:45C8  CD 88 46            	call _waitvdp;
     174.  00:45CB                      	
     175.  00:45CB  ED 69               	out		(c), l 		; sx
     176.  00:45CD  AF                  	xor a
     177.  00:45CE  D3 9B               	out		(0x9B), a 	; sx (high)
     178.  00:45D0                      	
     179.  00:45D0  ED 61               	out		(c), h 		; sy
     180.  00:45D2  F1                  	pop		af
     181.  00:45D3  3E 02               	ld		a,2			; source page for tiles 32x32=1024 tiles
     182.  00:45D5  CE 00               	adc		a,0
     183.  00:45D7  D3 9B               	out 	(0x9B), a 	; sy (high-> page 2)
     184.  00:45D9                      
     185.  00:45D9  E1                  	pop		hl			; recover dx*8,dy*8
     186.  00:45DA                      	
     187.  00:45DA  ED 69               	out 	(c), l 		; dx
     188.  00:45DC  AF                  	xor a
     189.  00:45DD  D3 9B               	out 	(0x9B), a	; dx (high)
     190.  00:45DF  ED 61               	out 	(c), h 		; dy
     191.  00:45E1  3A 26 C0            	ld 		a,(_currentpage)	; destination page
     192.  00:45E4  D3 9B               	out 	(0x9B), a	; dy (high-> page 0 or 1)
     193.  00:45E6                      
     194.  00:45E6  2E 08               	ld 		l,8 		; block size
     195.  00:45E8                      
     196.  00:45E8  ED 69               	out 	(c), l
     197.  00:45EA  AF                  	xor a
     198.  00:45EB  D3 9B               	out 	(0x9B), a
     199.  00:45ED  ED 69               	out 	(c), l
     200.  00:45EF  D3 9B               	out 	(0x9B), a
     201.  00:45F1  D3 9B               	out 	(0x9B), a
     202.  00:45F3  D3 9B               	out 	(0x9B), a
     203.  00:45F5  C9                  	ret
     204.  00:45F6                      
     205.  00:45F6                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     206.  00:45F6                      ; input
     207.  00:45F6                      ; hl configured in window map 32x24
     208.  00:45F6                      ;  a color
     209.  00:45F6                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     210.  00:45F6                      
     211.  00:45F6                      plot_solid_box:
     212.  00:45F6  5F                  	ld		e,a		; solid color
     213.  00:45F7                      
     214.  00:45F7  29 29               [2]	add		hl,hl
     215.  00:45F9  4D                  	ld		c,l			; C = dx*8
     216.  00:45FA  7C                  	ld		a,h
     217.  00:45FB  87 87 87            [3]	add		a,a
     218.  00:45FE  47                  	ld		b,a			; B = dy*8
     219.  00:45FF  C5                  	push	bc			; dx*8 and dy*8 on the stack
     220.  00:4600                      
     221.  00:4600  F3                  	di
     222.  00:4601  3E 24               	ld 		a, 36
     223.  00:4603  D3 99               	out 	(0x99),a
     224.  00:4605  3E 91               	ld 		a, 17+128
     225.  00:4607  D3 99               	out 	(0x99),a
     226.  00:4609  FB                  	ei
     227.  00:460A                      
     228.  00:460A  0E 9B               	ld 		c, 0x9B
     229.  00:460C                      	
     230.  00:460C  CD 88 46            	call _waitvdp;
     231.  00:460F  E1                  	pop		hl			; recover dx*8,dy*8
     232.  00:4610                      	
     233.  00:4610  ED 69               	out 	(c), l 		; dx
     234.  00:4612  AF                  	xor a
     235.  00:4613  D3 9B               	out 	(0x9B), a	; dx (high)
     236.  00:4615  ED 61               	out 	(c), h 		; dy
     237.  00:4617  3A 26 C0            	ld 		a,(_currentpage)	; destination page
     238.  00:461A  D3 9B               	out 	(0x9B), a	; dy (high-> page 0 or 1)
     239.  00:461C                      
     240.  00:461C  2E 08               	ld 		l,8 		; block size
     241.  00:461E                      
     242.  00:461E  ED 69               	out 	(c), l
     243.  00:4620  AF                  	xor a
     244.  00:4621  D3 9B               	out 	(0x9B), a
     245.  00:4623  ED 69               	out 	(c), l
     246.  00:4625  D3 9B               	out 	(0x9B), a
     247.  00:4627  ED 59               	out 	(c), e
     248.  00:4629  D3 9B               	out 	(0x9B), a
     249.  00:462B  2E C0               	ld		l,11000000B	; command HMMV
     250.  00:462D  ED 69               	out 	(c), l
     251.  00:462F  C9                  	ret
     435   00:4630                      
     436   00:4630                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     437   00:4630                      
     438   00:4630                      _clean_buffs:
     439   00:4630  01 3F 0C            	ld	bc,2*WinWidth*WinWidth*2-1
     440   00:4633  21 27 C0            	ld	hl,_shadow0
     441   00:4636  36 FF               	ld	(hl),-1
     442   00:4638  11 28 C0            	ld	de,_shadow0+1
     443   00:463B  ED B0               	ldir
     444   00:463D  C9                  	ret
     445   00:463E                      	
     446   00:463E                      ;Set VDP for writing at address CDE (17-bit) 
     447   00:463E                      
     448   00:463E                      _vdpsetvramwr:
     449   00:463E  79                  	ld a,c
     450   00:463F                      ;Set VDP for writing at address ADE (17-bit) ;
     451   00:463F  CB 02               	rlc d
     452   00:4641  17                  	rla
     453   00:4642  CB 02               	rlc d
     454   00:4644  17                  	rla
     455   00:4645  CB 3A               	srl d ; primo shift, il secondo dopo la out
     456   00:4647                      
     457   00:4647  D3 99               	out (0x99),a ;set bits 14-16
     458   00:4649  3E 8E               	ld a,14+128
     459   00:464B  D3 99               	out (0x99),a
     460   00:464D                      
     461   00:464D  CB 3A               	srl d ; secondo shift.            
     462   00:464F  7B                  	ld a,e ;set bits 0-7
     463   00:4650  D3 99               	out (0x99),a
     464   00:4652  7A                  	ld a,d ;set bits 8-13
     465   00:4653  F6 40               	or 0x40 ; + write access
     466   00:4655  D3 99               	out (0x99),a
     467   00:4657  C9                  	ret
     468   00:4658                      	
     469   00:4658                      ;Set VDP port #98 to start reading at address CDE (17-bit) ;
     470   00:4658                      
     471   00:4658                      _vdpsetvramrd:
     472   00:4658  79                  	ld a,c
     473   00:4659                      ;Set VDP port #98 to start reading at address ADE (17-bit) ;
     474   00:4659  CB 02               	rlc d
     475   00:465B  17                  	rla
     476   00:465C  CB 02               	rlc d
     477   00:465E  17                  	rla
     478   00:465F  CB 3A               	srl d ; primo shift, il secondo dopo la out
     479   00:4661                      
     480   00:4661  D3 99               	out (0x99),a ;set bits 14-16
     481   00:4663  3E 8E               	ld a,14+128
     482   00:4665  D3 99               	out (0x99),a
     483   00:4667                      
     484   00:4667  CB 3A               	srl d ; secondo shift.            
     485   00:4669  7B                  	ld a,e ;set bits 0-7
     486   00:466A  D3 99               	out (0x99),a
     487   00:466C  7A                  	ld a,d ;set bits 8-13
     488   00:466D  E6 3F               	and 0x3F
     489   00:466F  D3 99               	out (0x99),a
     490   00:4671  C9                  	ret
     491   00:4672                      
     492   00:4672                      ;Display page E in screen 5
     493   00:4672                      _setpage:
     494   00:4672  7B                  	ld a,e
     495   00:4673  87                  	add a,a ;x32
     496   00:4674  87                  	add a,a
     497   00:4675  87                  	add a,a
     498   00:4676  87                  	add a,a
     499   00:4677  87                  	add a,a
     500   00:4678  C6 1F               	add a,31
     501   00:467A  F3                  	di
     502   00:467B  D3 99               	out (0x99),a
     503   00:467D  3E 82               	ld a,2+128
     504   00:467F  D3 99               	out (0x99),a
     505   00:4681  FB                  	ei            
     506   00:4682  C9                  	ret
     507   00:4683                      
     508   00:4683  (00:005F)           chgmod        equ     0x005f      ;change graphic mode
     509   00:4683  (00:000C)           RDSLT         equ     0x000c      ;read address HL in slot A
     510   00:4683  (00:0156)           KILBUF        equ     0x0156      ;clear keyboard buffer
     511   00:4683                      
     512   00:4683                      _scr:
     513   00:4683  7B                  	ld  a,e
     514   00:4684  CD 5F 00            	call	chgmod
     515   00:4687  C9                  	ret
     516   00:4688                      
     517   00:4688                      
     518   00:4688                      _waitvdp:
     519   00:4688  F3                  	di
     520   00:4689  3E 02               	ld a,2
     521   00:468B  D3 99               	out (0x99),a
     522   00:468D  3E 8F               	ld a, 0x8f
     523   00:468F  D3 99               	out (0x99),a
     524   00:4691                      
     525   00:4691  DB 99               1:  in a,(0x99)
     526   00:4693  0F                  	rrca
     527   00:4694  DA 91 46            	jp c, 1b
     528   00:4697                      
     529   00:4697  AF                  	xor a
     530   00:4698  D3 99               	out (0x99),a
     531   00:469A  3E 8F               	ld a, 0x8f
     532   00:469C  D3 99               	out (0x99),a
     533   00:469E  FB                  	ei
     534   00:469F  C9                  	ret
     535   00:46A0                      
     536   00:46A0                      
     537   00:46A0                      	
     538   00:46A0                      _print_fps:
     539   00:46A0  3A 0F C0            	ld	a,(_buffer+3)
     540   00:46A3  5F                  	ld	e,a
     541   00:46A4  16 00               	ld	d,0
     542   00:46A6  21 80 07            	ld	hl,32*(64-3)-'0'+16
     543   00:46A9  19                  	add	hl,de
     544   00:46AA  EB                  	ex	de,hl
     545   00:46AB                      	
     546   00:46AB  21 FC 05            	ld	hl,2*(23*32+30)
     547   00:46AE  CD 55 45            	call 	plot_foreground
     548   00:46B1                      
     549   00:46B1  3A 10 C0            	ld	a,(_buffer+4)
     550   00:46B4  5F                  	ld	e,a
     551   00:46B5  16 00               	ld	d,0
     552   00:46B7  21 80 07            	ld	hl,32*(64-3)-'0'+16
     553   00:46BA  19                  	add	hl,de
     554   00:46BB  EB                  	ex	de,hl
     555   00:46BC                      	
     556   00:46BC  21 FE 05            	ld	hl,2*(23*32+31)
     557   00:46BF  C3 55 45            	jp 	plot_foreground
     558   00:46C2                      	
     559   00:46C2                      
     560   00:46C2                      ;-------------------------------------
     561   00:46C2                      _compute_fps:
     562   00:46C2  ED 5B 1C C0         	ld	de,(_fps)
     563   00:46C6  01 0C C0            	ld	bc,_buffer
     564   00:46C9                      
     565   00:46C9                      int2ascii:
     566   00:46C9                      	
     567   00:46C9                      ; in de input 
     568   00:46C9                      ; in bc output
     569   00:46C9                      
     570   00:46C9  EB                  	ex  de,hl
     571   00:46CA  59                  	ld  e,c
     572   00:46CB  50                  	ld  d,b
     573   00:46CC                      
     574   00:46CC                      Num2asc:
     575   00:46CC  01 F0 D8            	ld  bc,-10000
     576   00:46CF  CD E5 46            	call    Num1
     577   00:46D2  01 18 FC            	ld  bc,-1000
     578   00:46D5  CD E5 46            	call    Num1
     579   00:46D8  01 9C FF            	ld  bc,-100
     580   00:46DB  CD E5 46            	call    Num1
     581   00:46DE  0E F6               	ld  c,-10
     582   00:46E0  CD E5 46            	call    Num1
     583   00:46E3  0E FF               	ld  c,-1
     584   00:46E5                      
     585   00:46E5                      Num1:   
     586   00:46E5  3E 2F               	ld  a,'0'-1  ; '0' in the tileset
     587   00:46E7                      
     588   00:46E7                      Num2:   
     589   00:46E7  3C                  	inc a
     590   00:46E8  09                  	add hl,bc
     591   00:46E9  38 FC               	jr  c,Num2
     592   00:46EB  ED 42               	sbc hl,bc
     593   00:46ED                      
     594   00:46ED  12                  	ld  (de),a
     595   00:46EE  13                  	inc de
     596   00:46EF  C9                  	ret
     597   00:46F0                      
     598   00:46F0                      _metatable:
     599   00:46F0  (1030)              	incbin "metatable.bin"
     600   00:5720                      _backmap:
     601   00:5720  (0400)              	incbin "backmap.bin"
     602   00:5B20                      
     603   00:5B20                      ; start
     604   00:5B20                      ; _mballon_start
     605   00:5B20                      	; ld	de,0xc000
     606   00:5B20                      	; ld	hl,_relocate
     607   00:5B20                      	; ld	bc,_endrelocate-_relocate
     608   00:5B20                      	; ldir
     609   00:5B20                      	; jp	0xc000
     610   00:5B20                      ; _relocate:
     611   00:5B20                      	; ld	a,:mballon
     612   00:5B20                      	; ld	(_bank1),a
     613   00:5B20                      	; inc	a
     614   00:5B20                      	; ld	(_bank2),a
     615   00:5B20                      	; ld	hl,(0x4002)
     616   00:5B20                      	; jp	(hl)
     617   00:5B20                      ; _endrelocate:
     618   00:5B20                      
     619   00:5B20                      	include enemies.asm
       1.  00:5B20                      
       2.  00:5B20  (00:0008)           nenemies 	equ	8
       3.  00:5B20  (00:0080)           sprite_size	equ	8*8*2
       4.  00:5B20                      
       5.  00:5B20                      		struct enemy
       6.  00:5B20                    < type 	db
       7.  00:5B20                    < state 	db
       8.  00:5B20                    < frame 	db
       9.  00:5B20                    < x		dw	
      10.  00:5B20                    < y		dw
      11.  00:5B20                    < mappos	dw
      12.  00:5B20                    < dx		dw
      13.  00:5B20                    < dy		dw
      14.  00:5B20                    < nx		db
      15.  00:5B20                    < ny		db
      16.  00:5B20                    < buf		ds	sprite_size
      17.  00:5B20                    < 	endstruct
      18.  00:5B20                      	
      19.  00:5B20  (06)                	page 6
      20.  06:8000                      frames:
      21.  06:8000  1A 00 EB 00 AA 00   		dw 01Ah,0EBh,0AAh
      22.  06:8006  1A 00 EB 00 AA 00   		dw 01Ah,0EBh,0AAh
      23.  06:800C                      
      24.  06:800C  00 (128)            [127]	ds	sprite_size
      25.  06:BF8C                      
      26.  06:BF8C  (00)                	page 0
      27.  00:5B20                      int_sprites
      28.  00:5B20  DD 21 67 CC         	ld	ix,enemylist
      29.  00:5B24  DD 36 03 00         	ld	(ix+enemy.x),0
      30.  00:5B28  DD 36 04 00         	ld	(ix+enemy.x+1),0
      31.  00:5B2C                      	
      32.  00:5B2C  DD 36 05 00         	ld	(ix+enemy.y),0
      33.  00:5B30  DD 36 06 00         	ld	(ix+enemy.y+1),0
      34.  00:5B34                      	
      35.  00:5B34  DD 36 0D 03         	ld	(ix+enemy.nx),3
      36.  00:5B38  DD 36 0E 02         	ld	(ix+enemy.ny),2
      37.  00:5B3C                      	
      38.  00:5B3C  DD 36 02 00         	ld	(ix+enemy.frame),0
      39.  00:5B40                      	
      40.  00:5B40  01 02 94            	ld	bc,_levelmap+2+mapWidth*10*2
      41.  00:5B43  DD 71 07            	ld	(ix+enemy.mappos),c
      42.  00:5B46  DD 70 08            	ld	(ix+enemy.mappos+1),b
      43.  00:5B49  C9                  	ret
      44.  00:5B4A                      
      45.  00:5B4A                      move_sprites
      46.  00:5B4A  DD 7E 09            	ld	a,(ix+enemy.dx)
      47.  00:5B4D  3D                  	dec	a
      48.  00:5B4E  E6 03               	and	3
      49.  00:5B50  DD 77 09            	ld	(ix+enemy.dx),a
      50.  00:5B53  C0                  	ret	nz
      51.  00:5B54                      	
      52.  00:5B54  DD 6E 07            	ld	l,(ix+enemy.mappos)
      53.  00:5B57  DD 66 08            	ld	h,(ix+enemy.mappos+1)
      54.  00:5B5A  23 23               [2]	inc	hl
      55.  00:5B5C  DD 75 07            	ld	(ix+enemy.mappos),l
      56.  00:5B5F  DD 74 08            	ld	(ix+enemy.mappos+1),h
      57.  00:5B62  C9                  	ret
      58.  00:5B63                      
      59.  00:5B63                      	; ld	bc,(ix+enemy.y)
      60.  00:5B63                      	; ld	hl,mapWidth
      61.  00:5B63                      	; call	bcxhl
      62.  00:5B63                      	; ld	bc,(ix+enemy.y)
      63.  00:5B63                      	; add	hl,bc
      64.  00:5B63                      	; ld	bc,_levelmap
      65.  00:5B63                      	; add	hl,bc	
      66.  00:5B63                      
      67.  00:5B63                      ;;;;;;;;;;;;;;;;;;;;;;;;
      68.  00:5B63                      ; save_background
      69.  00:5B63                      ; in 
      70.  00:5B63                      ;  ix destination in enemylist
      71.  00:5B63                      ;;;;;;;;;;;;;;;;;;;;;;;;
      72.  00:5B63                      
      73.  00:5B63                      save_background:
      74.  00:5B63  DD 5E 07            	ld	e,(ix+enemy.mappos)
      75.  00:5B66  DD 56 08            	ld	d,(ix+enemy.mappos+1)
      76.  00:5B69                      	
      77.  00:5B69  DD E5               	push	ix
      78.  00:5B6B  E1                  	pop		hl
      79.  00:5B6C  01 0F 00            	ld	bc,enemy.buf
      80.  00:5B6F  09                  	add	hl,bc
      81.  00:5B70  EB                  	ex	de,hl
      82.  00:5B71                      	
      83.  00:5B71  DD 7E 0E            	ld	a,(ix+enemy.ny)
      84.  00:5B74                      
      85.  00:5B74  06 00               	ld	b,0
      86.  00:5B76                      	
      87.  00:5B76  DD 4E 0D            2:	ld	c,(ix+enemy.nx)
      88.  00:5B79  CB 21               	sla	c
      89.  00:5B7B  E5                  	push	hl
      90.  00:5B7C  ED B0               	ldir
      91.  00:5B7E  E1                  	pop	hl
      92.  00:5B7F                      	
      93.  00:5B7F  24 24               [2]	inc h	; only if (mapWidth=256)
      94.  00:5B81                      	
      95.  00:5B81  3D                  	dec	a
      96.  00:5B82  C2 76 5B            	jp	nz,2b
      97.  00:5B85  C9                  	ret
      98.  00:5B86                      	
      99.  00:5B86                      ;;;;;;;;;;;;;;;;;;;;;;;;
     100.  00:5B86                      ; plot_sprite
     101.  00:5B86                      ; in 
     102.  00:5B86                      ;  ix destination in enemylist
     103.  00:5B86                      ;;;;;;;;;;;;;;;;;;;;;;;;
     104.  00:5B86                      
     105.  00:5B86                      plot_sprite:
     106.  00:5B86  DD 6E 02            	ld	l,(ix+enemy.frame)
     107.  00:5B89  26 00               	ld	h,0
     108.  00:5B8B  29 29 29 29 29 29   [6]	add	hl,hl			; sprite_size = 64*2
     109.  00:5B91                      
     110.  00:5B91  3E 06               	ld	a,:frames
     111.  00:5B93  32 00 70            	ld	(_bank2),a
     112.  00:5B96  01 00 80            	ld	bc,frames
     113.  00:5B99  09                  	add	hl,bc			; hl aims to the current frame to be plotted
     114.  00:5B9A                      
     115.  00:5B9A  C3 A4 5B            	jp	plot_sprtite_frame
     116.  00:5B9D                      	
     117.  00:5B9D                      ;;;;;;;;;;;;;;;;;;;;;;;;
     118.  00:5B9D                      ; restore_background
     119.  00:5B9D                      ; in 
     120.  00:5B9D                      ;  ix source in enemylist
     121.  00:5B9D                      ;;;;;;;;;;;;;;;;;;;;;;;;
     122.  00:5B9D                      
     123.  00:5B9D                      restore_background:
     124.  00:5B9D  DD E5               	push	ix
     125.  00:5B9F  E1                  	pop		hl
     126.  00:5BA0  01 0F 00            	ld	bc,enemy.buf
     127.  00:5BA3  09                  	add	hl,bc			
     128.  00:5BA4                      
     129.  00:5BA4                      plot_sprtite_frame:
     130.  00:5BA4  DD 5E 07            	ld	e,(ix+enemy.mappos)
     131.  00:5BA7  DD 56 08            	ld	d,(ix+enemy.mappos+1)	; hl->buffer, de->_levelmap
     132.  00:5BAA                      	
     133.  00:5BAA  DD 7E 0E            	ld	a,(ix+enemy.ny)
     134.  00:5BAD  06 00               	ld	b,0
     135.  00:5BAF                      	
     136.  00:5BAF  DD 4E 0D            2:	ld	c,(ix+enemy.nx)
     137.  00:5BB2  CB 21               	sla	c
     138.  00:5BB4  D5                  	push	de
     139.  00:5BB5  ED B0               	ldir
     140.  00:5BB7  D1                  	pop	de
     141.  00:5BB8                      
     142.  00:5BB8  14 14               [2]	inc d	; only if (mapWidth=256)
     143.  00:5BBA                      
     144.  00:5BBA  3D                  	dec	a
     145.  00:5BBB  C2 AF 5B            	jp	nz,2b
     146.  00:5BBE  C9                  	ret
     147.  00:5BBF                      	
     148.  00:5BBF                      	
     149.  00:5BBF                      	
     620   00:5BBF                      
     621   00:5BBF                      	include hwsprites.asm
       1.  00:5BBF                      
       2.  00:5BBF                      ; SGT = 0x7800 ->#R6 = 0x0F
       3.  00:5BBF                      ; SAT = 0x7600 ->#R5 = 0xEF #R11=0
       4.  00:5BBF                      
       5.  00:5BBF                      _hw_sprite_init:
       6.  00:5BBF                      
       7.  00:5BBF  F3                  		di
       8.  00:5BC0                      		; SGT = 0x7800 ->#R6 = 0x0F
       9.  00:5BC0  3E 0F               		ld		a,0x0F
      10.  00:5BC2  D3 99               		out		(0x99),a
      11.  00:5BC4  3E 86               		ld		a,128+6
      12.  00:5BC6  D3 99               		out		(0x99),a
      13.  00:5BC8                      		
      14.  00:5BC8                      		; SAT = 0x7600 ->#R5 = 0xEF #R11=0
      15.  00:5BC8  3E EF               		ld		a,0xEF
      16.  00:5BCA  D3 99               		out		(0x99),a
      17.  00:5BCC  3E 85               		ld		a,128+5
      18.  00:5BCE  D3 99               		out		(0x99),a
      19.  00:5BD0                      		
      20.  00:5BD0  AF                  		xor	a
      21.  00:5BD1  D3 99               		out		(0x99),a
      22.  00:5BD3  3E 8B               		ld		a,128+11
      23.  00:5BD5  D3 99               		out		(0x99),a
      24.  00:5BD7  FB                  		ei
      25.  00:5BD8                      		
      26.  00:5BD8                      		; unpack level map (meta_tiles)
      27.  00:5BD8  3E 05               		ld	a, :sprtdata.SPRITES
      28.  00:5BDA  32 00 70            		ld	(_bank2),a
      29.  00:5BDD                      		
      30.  00:5BDD  21 00 80            		ld		hl,	sprtdata.SPRITES
      31.  00:5BE0  0E 00               		ld		c,0
      32.  00:5BE2  11 00 78            		ld		de,0x7800
      33.  00:5BE5  CD 3E 46            		call	_vdpsetvramwr
      34.  00:5BE8                      		
      35.  00:5BE8  01 98 00            		ld		bc,0x98
      36.  00:5BEB                      [8]		otir	; 2K
      36.  00:5BEB  ED B3 ED B3 ED B3 ED B3 ED B3 ED B3 ED B3 ED B3 
      37.  00:5BFB                      
      38.  00:5BFB  21 40 82            		ld		hl,	sprtdata.ATRIBUTOS
      39.  00:5BFE  0E 00               		ld		c,0
      40.  00:5C00  11 00 74            		ld		de,0x7600-512
      41.  00:5C03  CD 3E 46            		call	_vdpsetvramwr
      42.  00:5C06                      
      43.  00:5C06  01 98 00            		ld		bc,0x98
      44.  00:5C09  ED B3 ED B3         [2]		otir	; 512
      45.  00:5C0D                      
      46.  00:5C0D                      
      47.  00:5C0D  0E 00               		ld		c,0
      48.  00:5C0F  11 00 76            		ld		de,0x7600
      49.  00:5C12  CD 3E 46            		call	_vdpsetvramwr
      50.  00:5C15                      		
      51.  00:5C15  21 1E 5C            		ld		hl,hwsprt_test		
      52.  00:5C18  01 98 80            		ld		bc,0x8098
      53.  00:5C1B  ED B3               		otir			
      54.  00:5C1D  C9                  		ret
      55.  00:5C1E                      		
      56.  00:5C1E                      hwsprt_test
      57.  00:5C1E  D8                  		db	0xd8
      58.  00:5C1F  40 80 00 0F         		db	64,128,0,15
      59.  00:5C23  40 80 04 0F         		db	64,128,4,15
      60.  00:5C27  40 80 08 0F         		db	64,128,8,15
      61.  00:5C2B                      		
      62.  00:5C2B  20 80 0C 0F         		db	32,128,12,15
      63.  00:5C2F  20 80 10 0F         		db	32,128,16,15
      64.  00:5C33  20 80 14 0F         		db	32,128,20,15
      65.  00:5C37  D8                  		db	0xd8
     622   00:5C38                      	
     623   00:5C38                      	include enemies_LMMM.asm
       1.  00:5C38                      
       2.  00:5C38                      enemies_LMMM:
       3.  00:5C38  F3                  	di
       4.  00:5C39  3E 20               	ld 		a, 32
       5.  00:5C3B  D3 99               	out 	(0x99),a
       6.  00:5C3D  3E 91               	ld 		a, 17+128
       7.  00:5C3F  D3 99               	out 	(0x99),a
       8.  00:5C41  FB                  	ei
       9.  00:5C42                      
      10.  00:5C42  0E 9B               	ld 		c, 0x9B
      11.  00:5C44                      	
      12.  00:5C44  CD 88 46            	call _waitvdp;
      13.  00:5C47                      	
      14.  00:5C47  3A 03 C0            	ld		a,(_mcdx)
      15.  00:5C4A  A7                  	and	a
      16.  00:5C4B  20 04               	jr	nz,2f
      17.  00:5C4D  3D                  	dec	a
      18.  00:5C4E  32 09 C0            	ld	(_mcframe),a	
      19.  00:5C51                      2:
      20.  00:5C51  3A 09 C0            	ld	a,(_mcframe)
      21.  00:5C54  3C                  	inc	a
      22.  00:5C55  FE 03               	cp	3
      23.  00:5C57  20 01               	jr	nz,1f
      24.  00:5C59  AF                  	xor	a
      25.  00:5C5A  32 09 C0            1:	ld	(_mcframe),a
      26.  00:5C5D  87 87 87 87         [4]	add	a,a
      27.  00:5C61  6F                  	ld	l,a
      28.  00:5C62                      
      29.  00:5C62  3A 0A C0            	ld	a,(_mcstate)
      30.  00:5C65  A7                  	and	a
      31.  00:5C66  28 04               	jr	z,1f
      32.  00:5C68  3E 30               	ld	a,3*16
      33.  00:5C6A  85                  	add	a,l
      34.  00:5C6B  6F                  	ld	l,a
      35.  00:5C6C                      1:
      36.  00:5C6C  26 D8               	ld	h,216
      37.  00:5C6E  ED 69               	out		(c), l 		; sx
      38.  00:5C70  AF                  	xor a
      39.  00:5C71  D3 9B               	out		(0x9B), a 	; sx (high)
      40.  00:5C73                      	
      41.  00:5C73  ED 61               	out		(c), h 		; sy
      42.  00:5C75  3E 03               	ld		a,3			; source page for sprites
      43.  00:5C77  D3 9B               	out 	(0x9B), a 	; sy (high-> page 3)
      44.  00:5C79                      	
      45.  00:5C79  21 78 50            	ld	hl,120+(16+64)*256
      46.  00:5C7C  ED 69               	out 	(c), l 		; dx
      47.  00:5C7E  AF                  	xor a
      48.  00:5C7F  D3 9B               	out 	(0x9B), a	; dx (high)
      49.  00:5C81  ED 61               	out 	(c), h 		; dy
      50.  00:5C83  3A 26 C0            	ld 		a,(_currentpage)	; destination page
      51.  00:5C86  D3 9B               	out 	(0x9B), a	; dy (high-> page 0 or 1)
      52.  00:5C88                      
      53.  00:5C88  21 10 10            	ld 		hl,16*257 		; block size
      54.  00:5C8B                      
      55.  00:5C8B  ED 69               	out 	(c), l
      56.  00:5C8D  AF                  	xor a
      57.  00:5C8E  D3 9B               	out 	(0x9B), a
      58.  00:5C90  ED 61               	out 	(c), h
      59.  00:5C92  D3 9B               	out 	(0x9B), a
      60.  00:5C94  D3 9B               	out 	(0x9B), a
      61.  00:5C96  D3 9B               	out 	(0x9B), a
      62.  00:5C98                      
      63.  00:5C98  3E 98               	ld		a,10011000B
      64.  00:5C9A  D3 9B               	out 	(0x9B), a		; command LMMM
      65.  00:5C9C  C9                  	ret
     624   00:5C9D                      
     625   00:5C9D  (01)                	page 1
     626   01:8000                      _frame:
     627   01:8000  (0951)              	incbin "frame_.bin"			
     628   01:8951                      	
     629   01:8951  (02)                	page 2
     630   02:8000                      _tiles0:
     631   02:8000  (3B4D)              	incbin "tiles0_.bin"
     632   02:BB4D                      	
     633   02:BB4D  (03)                	page 3
     634   03:8000                      _tiles1:
     635   03:8000  (3EEA)              	incbin "tiles1_.bin"
     636   03:BEEA                      
     637   03:BEEA  (04)                	page 4
     638   04:8000                      _level:
     639   04:8000  (0AF1)              	incbin "metamap_.bin"			
     640   04:8AF1                      	
     641   04:8AF1  (05)                	page 5
     642   05:8000                      sprtdata
     643   05:8000                      	include 	SPROL.ASM
       1.  05:8000                      .SPRITES
       2.  05:8000                      ; --- Slot 0
       3.  05:8000                      ; mask 00
       4.  05:8000                       DB $01,$00,$07,$00,$00,$00,$01,$01
       4.  05:8000  01 00 07 00 00 00 01 01 
       5.  05:8008                       DB $00,$04,$10,$18,$18,$04,$00,$06
       5.  05:8008  00 04 10 18 18 04 00 06 
       6.  05:8010                       DB $20,$80,$F8,$20,$20,$70,$20,$E8
       6.  05:8010  20 80 F8 20 20 70 20 E8 
       7.  05:8018                       DB $48,$00,$20,$00,$00,$08,$20,$18
       7.  05:8018  48 00 20 00 00 08 20 18 
       8.  05:8020                      ; mask 01
       9.  05:8020                       DB $03,$07,$00,$07,$00,$05,$04,$02
       9.  05:8020  03 07 00 07 00 05 04 02 
      10.  05:8028                       DB $00,$07,$0D,$02,$1C,$02,$06,$00
      10.  05:8028  00 07 0D 02 1C 02 06 00 
      11.  05:8030                       DB $20,$F0,$00,$F8,$10,$00,$80,$14
      11.  05:8030  20 F0 00 F8 10 00 80 14 
      12.  05:8038                       DB $A4,$48,$C8,$70,$80,$70,$18,$00
      12.  05:8038  A4 48 C8 70 80 70 18 00 
      13.  05:8040                      ; mask 02
      14.  05:8040                       DB $05,$00,$00,$00,$0F,$0F,$06,$06
      14.  05:8040  05 00 00 00 0F 0F 06 06 
      15.  05:8048                       DB $07,$08,$02,$05,$1B,$01,$09,$00
      15.  05:8048  07 08 02 05 1B 01 09 00 
      16.  05:8050                       DB $E0,$00,$00,$00,$D8,$80,$D0,$14
      16.  05:8050  E0 00 00 00 D8 80 D0 14 
      17.  05:8058                       DB $B4,$B4,$14,$88,$70,$80,$C4,$00
      17.  05:8058  B4 B4 14 88 70 80 C4 00 
      18.  05:8060                      
      19.  05:8060                      ;
      20.  05:8060                      ; --- Slot 1
      21.  05:8060                      ; mask 10
      22.  05:8060                       DB $01,$00,$07,$00,$00,$00,$01,$01
      22.  05:8060  01 00 07 00 00 00 01 01 
      23.  05:8068                       DB $00,$00,$00,$02,$04,$02,$00,$03
      23.  05:8068  00 00 00 02 04 02 00 03 
      24.  05:8070                       DB $20,$80,$F8,$20,$20,$70,$20,$E0
      24.  05:8070  20 80 F8 20 20 70 20 E0 
      25.  05:8078                       DB $A0,$60,$60,$E0,$08,$00,$08,$38
      25.  05:8078  A0 60 60 E0 08 00 08 38 
      26.  05:8080                      ; mask 11
      27.  05:8080                       DB $03,$00,$00,$0F,$00,$05,$04,$02
      27.  05:8080  03 00 00 0F 00 05 04 02 
      28.  05:8088                       DB $02,$02,$01,$05,$03,$01,$03,$00
      28.  05:8088  02 02 01 05 03 01 03 00 
      29.  05:8090                       DB $30,$88,$00,$F8,$10,$00,$80,$10
      29.  05:8090  30 88 00 F8 10 00 80 10 
      30.  05:8098                       DB $A0,$60,$60,$10,$F0,$90,$34,$00
      30.  05:8098  A0 60 60 10 F0 90 34 00 
      31.  05:80A0                      ; mask 12
      32.  05:80A0                       DB $05,$07,$00,$00,$0F,$0F,$06,$06
      32.  05:80A0  05 07 00 00 0F 0F 06 06 
      33.  05:80A8                       DB $05,$07,$06,$00,$00,$04,$04,$00
      33.  05:80A8  05 07 06 00 00 04 04 00 
      34.  05:80B0                       DB $E0,$F0,$00,$00,$D8,$80,$D0,$10
      34.  05:80B0  E0 F0 00 00 D8 80 D0 10 
      35.  05:80B8                       DB $F0,$90,$F0,$00,$00,$68,$C0,$00
      35.  05:80B8  F0 90 F0 00 00 68 C0 00 
      36.  05:80C0                      
      37.  05:80C0                      ;
      38.  05:80C0                      ; --- Slot 2
      39.  05:80C0                      ; mask 20
      40.  05:80C0                       DB $01,$00,$07,$00,$00,$00,$01,$01
      40.  05:80C0  01 00 07 00 00 00 01 01 
      41.  05:80C8                       DB $00,$04,$00,$01,$01,$04,$00,$07
      41.  05:80C8  00 04 00 01 01 04 00 07 
      42.  05:80D0                       DB $20,$80,$F8,$20,$20,$70,$20,$E0
      42.  05:80D0  20 80 F8 20 20 70 20 E0 
      43.  05:80D8                       DB $40,$00,$20,$88,$88,$60,$90,$F0
      43.  05:80D8  40 00 20 88 88 60 90 F0 
      44.  05:80E0                      ; mask 21
      45.  05:80E0                       DB $03,$00,$00,$0F,$00,$05,$04,$02
      45.  05:80E0  03 00 00 0F 00 05 04 02 
      46.  05:80E8                       DB $00,$07,$01,$02,$07,$03,$03,$00
      46.  05:80E8  00 07 01 02 07 03 03 00 
      47.  05:80F0                       DB $30,$88,$00,$F8,$10,$00,$80,$10
      47.  05:80F0  30 88 00 F8 10 00 80 10 
      48.  05:80F8                       DB $A0,$40,$C0,$60,$F8,$90,$28,$00
      48.  05:80F8  A0 40 C0 60 F8 90 28 00 
      49.  05:8100                      ; mask 22
      50.  05:8100                       DB $05,$07,$00,$00,$0F,$0F,$06,$06
      50.  05:8100  05 07 00 00 0F 0F 06 06 
      51.  05:8108                       DB $07,$00,$06,$04,$00,$00,$04,$00
      51.  05:8108  07 00 06 04 00 00 04 00 
      52.  05:8110                       DB $E0,$F0,$00,$00,$D8,$80,$D0,$10
      52.  05:8110  E0 F0 00 00 D8 80 D0 10 
      53.  05:8118                       DB $B0,$B0,$10,$10,$00,$00,$40,$00
      53.  05:8118  B0 B0 10 10 00 00 40 00 
      54.  05:8120                      
      55.  05:8120                      ;
      56.  05:8120                      ; --- Slot 3
      57.  05:8120                      ; mask 30
      58.  05:8120                       DB $04,$01,$1F,$04,$04,$0E,$04,$17
      58.  05:8120  04 01 1F 04 04 0E 04 17 
      59.  05:8128                       DB $12,$00,$04,$00,$00,$10,$04,$18
      59.  05:8128  12 00 04 00 00 10 04 18 
      60.  05:8130                       DB $80,$00,$E0,$00,$00,$00,$80,$80
      60.  05:8130  80 00 E0 00 00 00 80 80 
      61.  05:8138                       DB $00,$20,$08,$18,$18,$20,$00,$60
      61.  05:8138  00 20 08 18 18 20 00 60 
      62.  05:8140                      ; mask 31
      63.  05:8140                       DB $04,$0F,$00,$1F,$08,$00,$01,$28
      63.  05:8140  04 0F 00 1F 08 00 01 28 
      64.  05:8148                       DB $25,$12,$13,$0E,$01,$0E,$18,$00
      64.  05:8148  25 12 13 0E 01 0E 18 00 
      65.  05:8150                       DB $C0,$E0,$00,$E0,$00,$A0,$20,$40
      65.  05:8150  C0 E0 00 E0 00 A0 20 40 
      66.  05:8158                       DB $00,$E0,$B0,$40,$38,$40,$60,$00
      66.  05:8158  00 E0 B0 40 38 40 60 00 
      67.  05:8160                      ; mask 32
      68.  05:8160                       DB $07,$00,$00,$00,$1B,$01,$0B,$28
      68.  05:8160  07 00 00 00 1B 01 0B 28 
      69.  05:8168                       DB $2D,$2D,$28,$11,$0E,$01,$23,$00
      69.  05:8168  2D 2D 28 11 0E 01 23 00 
      70.  05:8170                       DB $A0,$00,$00,$00,$F0,$F0,$60,$60
      70.  05:8170  A0 00 00 00 F0 F0 60 60 
      71.  05:8178                       DB $E0,$10,$40,$A0,$D8,$80,$90,$00
      71.  05:8178  E0 10 40 A0 D8 80 90 00 
      72.  05:8180                      
      73.  05:8180                      ;
      74.  05:8180                      ; --- Slot 4
      75.  05:8180                      ; mask 40
      76.  05:8180                       DB $04,$01,$1F,$04,$04,$0E,$04,$07
      76.  05:8180  04 01 1F 04 04 0E 04 07 
      77.  05:8188                       DB $05,$06,$06,$07,$10,$00,$10,$1C
      77.  05:8188  05 06 06 07 10 00 10 1C 
      78.  05:8190                       DB $80,$00,$E0,$00,$00,$00,$80,$80
      78.  05:8190  80 00 E0 00 00 00 80 80 
      79.  05:8198                       DB $00,$00,$00,$40,$20,$40,$00,$C0
      79.  05:8198  00 00 00 40 20 40 00 C0 
      80.  05:81A0                      ; mask 41
      81.  05:81A0                       DB $0C,$11,$00,$1F,$08,$00,$01,$08
      81.  05:81A0  0C 11 00 1F 08 00 01 08 
      82.  05:81A8                       DB $05,$06,$06,$08,$0F,$09,$2C,$00
      82.  05:81A8  05 06 06 08 0F 09 2C 00 
      83.  05:81B0                       DB $C0,$00,$00,$F0,$00,$A0,$20,$40
      83.  05:81B0  C0 00 00 F0 00 A0 20 40 
      84.  05:81B8                       DB $40,$40,$80,$A0,$C0,$80,$C0,$00
      84.  05:81B8  40 40 80 A0 C0 80 C0 00 
      85.  05:81C0                      ; mask 42
      86.  05:81C0                       DB $07,$0F,$00,$00,$1B,$01,$0B,$08
      86.  05:81C0  07 0F 00 00 1B 01 0B 08 
      87.  05:81C8                       DB $0F,$09,$0F,$00,$00,$16,$03,$00
      87.  05:81C8  0F 09 0F 00 00 16 03 00 
      88.  05:81D0                       DB $A0,$E0,$00,$00,$F0,$F0,$60,$60
      88.  05:81D0  A0 E0 00 00 F0 F0 60 60 
      89.  05:81D8                       DB $A0,$E0,$60,$00,$00,$20,$20,$00
      89.  05:81D8  A0 E0 60 00 00 20 20 00 
      90.  05:81E0                      
      91.  05:81E0                      ;
      92.  05:81E0                      ; --- Slot 5
      93.  05:81E0                      ; mask 50
      94.  05:81E0                       DB $04,$01,$1F,$04,$04,$0E,$04,$07
      94.  05:81E0  04 01 1F 04 04 0E 04 07 
      95.  05:81E8                       DB $02,$00,$04,$11,$11,$06,$09,$0F
      95.  05:81E8  02 00 04 11 11 06 09 0F 
      96.  05:81F0                       DB $80,$00,$E0,$00,$00,$00,$80,$80
      96.  05:81F0  80 00 E0 00 00 00 80 80 
      97.  05:81F8                       DB $00,$20,$00,$80,$80,$20,$00,$E0
      97.  05:81F8  00 20 00 80 80 20 00 E0 
      98.  05:8200                      ; mask 51
      99.  05:8200                       DB $0C,$11,$00,$1F,$08,$00,$01,$08
      99.  05:8200  0C 11 00 1F 08 00 01 08 
     100.  05:8208                       DB $05,$02,$03,$06,$1F,$09,$14,$00
     100.  05:8208  05 02 03 06 1F 09 14 00 
     101.  05:8210                       DB $C0,$00,$00,$F0,$00,$A0,$20,$40
     101.  05:8210  C0 00 00 F0 00 A0 20 40 
     102.  05:8218                       DB $00,$E0,$80,$40,$E0,$C0,$C0,$00
     102.  05:8218  00 E0 80 40 E0 C0 C0 00 
     103.  05:8220                      ; mask 52
     104.  05:8220                       DB $07,$0F,$00,$00,$1B,$01,$0B,$08
     104.  05:8220  07 0F 00 00 1B 01 0B 08 
     105.  05:8228                       DB $0D,$0D,$08,$08,$00,$00,$02,$00
     105.  05:8228  0D 0D 08 08 00 00 02 00 
     106.  05:8230                       DB $A0,$E0,$00,$00,$F0,$F0,$60,$60
     106.  05:8230  A0 E0 00 00 F0 F0 60 60 
     107.  05:8238                       DB $E0,$00,$60,$20,$00,$00,$20,$00
     107.  05:8238  E0 00 60 20 00 00 20 00 
     108.  05:8240                      
     109.  05:8240                      .ATRIBUTOS
     110.  05:8240                      ; attr 00
     111.  05:8240                       DB $0C,$0E,$01,$0A,$0C,$0C,$0C,$0C
     111.  05:8240  0C 0E 01 0A 0C 0C 0C 0C 
     112.  05:8248                       DB $0C,$04,$04,$0C,$08,$04,$04,$01
     112.  05:8248  0C 04 04 0C 08 04 04 01 
     113.  05:8250                      ; attr 01
     114.  05:8250                       DB $42,$41,$00,$41,$4A,$4A,$4A,$4A
     114.  05:8250  42 41 00 41 4A 4A 4A 4A 
     115.  05:8258                       DB $4A,$42,$42,$42,$42,$42,$42,$00
     115.  05:8258  4A 42 42 42 42 42 42 00 
     116.  05:8260                      ; attr 02
     117.  05:8260                       DB $41,$00,$00,$00,$41,$41,$41,$41
     117.  05:8260  41 00 00 00 41 41 41 41 
     118.  05:8268                       DB $41,$41,$41,$41,$41,$41,$41,$00
     118.  05:8268  41 41 41 41 41 41 41 00 
     119.  05:8270                      ; attr 10
     120.  05:8270                       DB $0C,$0C,$01,$0A,$0C,$0C,$0C,$0C
     120.  05:8270  0C 0C 01 0A 0C 0C 0C 0C 
     121.  05:8278                       DB $08,$08,$08,$02,$02,$04,$04,$01
     121.  05:8278  08 08 08 02 02 04 04 01 
     122.  05:8280                      ; attr 11
     123.  05:8280                       DB $42,$42,$00,$41,$4A,$4A,$4A,$4A
     123.  05:8280  42 42 00 41 4A 4A 4A 4A 
     124.  05:8288                       DB $42,$44,$42,$41,$41,$42,$42,$00
     124.  05:8288  42 44 42 41 41 42 42 00 
     125.  05:8290                      ; attr 12
     126.  05:8290                       DB $41,$41,$00,$00,$41,$41,$41,$41
     126.  05:8290  41 41 00 00 41 41 41 41 
     127.  05:8298                       DB $41,$42,$41,$00,$00,$41,$41,$00
     127.  05:8298  41 42 41 00 00 41 41 00 
     128.  05:82A0                      ; attr 20
     129.  05:82A0                       DB $0C,$0C,$01,$0A,$0C,$0C,$0C,$0C
     129.  05:82A0  0C 0C 01 0A 0C 0C 0C 0C 
     130.  05:82A8                       DB $0C,$04,$04,$0C,$0A,$02,$04,$01
     130.  05:82A8  0C 04 04 0C 0A 02 04 01 
     131.  05:82B0                      ; attr 21
     132.  05:82B0                       DB $42,$42,$00,$41,$4A,$4A,$4A,$4A
     132.  05:82B0  42 42 00 41 4A 4A 4A 4A 
     133.  05:82B8                       DB $4A,$42,$42,$42,$41,$41,$42,$00
     133.  05:82B8  4A 42 42 42 41 41 42 00 
     134.  05:82C0                      ; attr 22
     135.  05:82C0                       DB $41,$41,$00,$00,$41,$41,$41,$41
     135.  05:82C0  41 41 00 00 41 41 41 41 
     136.  05:82C8                       DB $41,$41,$41,$41,$00,$00,$41,$00
     136.  05:82C8  41 41 41 41 00 00 41 00 
     137.  05:82D0                      ; attr 30
     138.  05:82D0                       DB $0C,$0E,$01,$0A,$0C,$0C,$0C,$0C
     138.  05:82D0  0C 0E 01 0A 0C 0C 0C 0C 
     139.  05:82D8                       DB $0C,$04,$04,$0C,$08,$04,$04,$01
     139.  05:82D8  0C 04 04 0C 08 04 04 01 
     140.  05:82E0                      ; attr 31
     141.  05:82E0                       DB $42,$41,$00,$41,$4A,$4A,$4A,$4A
     141.  05:82E0  42 41 00 41 4A 4A 4A 4A 
     142.  05:82E8                       DB $4A,$42,$42,$42,$42,$42,$42,$00
     142.  05:82E8  4A 42 42 42 42 42 42 00 
     143.  05:82F0                      ; attr 32
     144.  05:82F0                       DB $41,$00,$00,$00,$41,$41,$41,$41
     144.  05:82F0  41 00 00 00 41 41 41 41 
     145.  05:82F8                       DB $41,$41,$41,$41,$41,$41,$41,$00
     145.  05:82F8  41 41 41 41 41 41 41 00 
     146.  05:8300                      ; attr 40
     147.  05:8300                       DB $0C,$0C,$01,$0A,$0C,$0C,$0C,$0C
     147.  05:8300  0C 0C 01 0A 0C 0C 0C 0C 
     148.  05:8308                       DB $08,$08,$08,$02,$02,$04,$04,$01
     148.  05:8308  08 08 08 02 02 04 04 01 
     149.  05:8310                      ; attr 41
     150.  05:8310                       DB $42,$42,$00,$41,$4A,$4A,$4A,$4A
     150.  05:8310  42 42 00 41 4A 4A 4A 4A 
     151.  05:8318                       DB $42,$44,$42,$41,$41,$42,$42,$00
     151.  05:8318  42 44 42 41 41 42 42 00 
     152.  05:8320                      ; attr 42
     153.  05:8320                       DB $41,$41,$00,$00,$41,$41,$41,$41
     153.  05:8320  41 41 00 00 41 41 41 41 
     154.  05:8328                       DB $41,$42,$41,$00,$00,$41,$41,$00
     154.  05:8328  41 42 41 00 00 41 41 00 
     155.  05:8330                      ; attr 50
     156.  05:8330                       DB $0C,$0C,$01,$0A,$0C,$0C,$0C,$0C
     156.  05:8330  0C 0C 01 0A 0C 0C 0C 0C 
     157.  05:8338                       DB $0C,$04,$04,$0C,$0A,$02,$04,$01
     157.  05:8338  0C 04 04 0C 0A 02 04 01 
     158.  05:8340                      ; attr 51
     159.  05:8340                       DB $42,$42,$00,$41,$4A,$4A,$4A,$4A
     159.  05:8340  42 42 00 41 4A 4A 4A 4A 
     160.  05:8348                       DB $4A,$42,$42,$42,$41,$41,$42,$00
     160.  05:8348  4A 42 42 42 41 41 42 00 
     161.  05:8350                      ; attr 52
     162.  05:8350                       DB $41,$41,$00,$00,$41,$41,$41,$41
     162.  05:8350  41 41 00 00 41 41 41 41 
     163.  05:8358                       DB $41,$41,$41,$41,$00,$00,$41,$00
     163.  05:8358  41 41 41 41 00 00 41 00 
     164.  05:8360                      
     165.  05:8360                      	
     644   05:8360                      FINISH:
     645   05:8360                      
     646   05:8360                      ;---------------------------------------------------------
     647   05:8360                      ; Variables
     648   05:8360                      ;---------------------------------------------------------
     649   05:8360                      
     650   05:8360                      
     651   05:8360                      	
     652   05:8360  (C000)              	MAP 0xC000
     653   05:8360  (05:C000)           slotvar				#1
     654   05:8360  (05:C001)           slotram				#1
     655   05:8360  (05:C002)           SEL_NTSC			#1
     656   05:8360  (05:C003)           _mcdx				#1
     657   05:8360  (05:C004)           _mcdy				#1
     658   05:8360  (05:C005)           _mcx				#2
     659   05:8360  (05:C007)           _mcy				#2
     660   05:8360  (05:C009)           _mcframe			#1
     661   05:8360  (05:C00A)           _mcstate			#1
     662   05:8360                      
     663   05:8360                      
     664   05:8360  (05:C00B)           _ticxframe			#1
     665   05:8360                      
     666   05:8360  (05:C00C)           _buffer:			#16
     667   05:8360  (05:C01C)           _fps:				#2
     668   05:8360  (05:C01E)           _nframes:			#2
     669   05:8360  (05:C020)           _vbit16:			#2
     670   05:8360  (05:C022)           _levelmappos:		#2
     671   05:8360                      
     672   05:8360  (05:C024)           _shadowbuff:		#2
     673   05:8360  (05:C026)           _currentpage:		#1
     674   05:8360                      
     675   05:8360  (05:C027)           _shadow0:			#WinWidth*WinWidth*2
     676   05:8360  (05:C647)           _shadow1:			#WinWidth*WinWidth*2
     677   05:8360                      
     678   05:8360  (05:CC67)           enemylist:			#enemy*nenemies
     679   05:8360  (0000)              	ENDMAP

    LABELS
-------------------------------------------------
00:00006000 X _bank1
00:00007000   _bank2
00:00000759 X n_tiles
00:00000100   mapWidth
00:00000020   mapHeight
00:0000001C   WinWidth
00:00000010   WinHeight
00:00000326 X Transp
00:00000000 X SolidTile0
00:00000017   SolidTile1
00:0000033A   SolidTile2
00:00000510   SolidTile3
00:00000670   SolidTile4
00:00000000 X SolidColor0
00:00000001   SolidColor1
00:00000004   SolidColor2
00:00000007   SolidColor3
00:00000008   SolidColor4
00:00000024 X ENASLT
00:00000138   RSLREG
00:0000FCC1   EXPTBL
00:00004010   search_slot
00:0000402F   search_slotram
00:00004050   search_slotram0
00:00004055 X setrompage0
00:0000405B   setrompage2
00:00004061   setrampage2
00:00004067 X setrompage3
00:0000406D X setrampage3
00:00004073 X recbios
00:00004076   setslotpage0
00:000040AD X setslotpage1
00:000040EC   setslotpage2
00:00004133   setslotpage3
00:0000000C X rdslt
00:0000001C X CALSLT
00:00000180   chgcpu
00:0000FCC1 X exttbl
00:00008000   _levelmap
00:00004172   _set_r800
00:00004193   set_turbo_tr
00:0000419B   checkkbd
00:000041A6   plot_frame
00:000041F3   START
00:0000420B   _ntsc
00:0000431B   main_loop
00:0000436E   up
00:0000437B   dwn
00:00004388   right
00:000043A0   left
00:0000FC9E   JIFFY
00:000043B9   _isr
00:000043E9   powerup
00:000000D5   GTSTCK
00:000000D8 X GTTRIG
00:000043F2   _cursors
00:00000099   vdpport1
00:0000009A   vdpport2
00:00004400   levelcolors
00:00004420   _SetPalet
00:00004432   _vuitpakker
00:0000446A   _literal
00:0000446F   __loop
00:00004478 X _getlen
00:0000447E   lus
00:0000449B   lenok
00:000044A8   _mode7
00:000044AE   _mode6
00:000044B4   _mode5
00:000044BA   _mode4
00:000044C0   _mode3
00:000044C6   _mode2
00:000044D6   offsok
00:000044E1   _loop
00:000044F7   _getbit
00:000044FB   _getbitexx
00:00004501   Depack_out
00:00004503   setVwrite
00:0000450F   setVread
00:0000451D   __modes
00:0000452B   plot_tile
00:00004555   plot_foreground
00:00004591   plot_trasp_tile
00:000045A9   vdp_conf
00:000045F6   plot_solid_box
00:00004630   _clean_buffs
00:0000463E   _vdpsetvramwr
00:00004658   _vdpsetvramrd
00:00004672   _setpage
00:0000005F   chgmod
00:0000000C X RDSLT
00:00000156 X KILBUF
00:00004683   _scr
00:00004688   _waitvdp
00:000046A0   _print_fps
00:000046C2   _compute_fps
00:000046C9 X int2ascii
00:000046CC X Num2asc
00:000046E5   Num1
00:000046E7   Num2
00:000046F0   _metatable
00:00005720   _backmap
00:00000008   nenemies
00:00000080   sprite_size
00:00000000 X enemy.type
00:00000001 X enemy.state
00:00000002   enemy.frame
00:00000003   enemy.x
00:00000005   enemy.y
00:00000007   enemy.mappos
00:00000009   enemy.dx
00:0000000B X enemy.dy
00:0000000D   enemy.nx
00:0000000E   enemy.ny
00:0000000F   enemy.buf
00:0000008F   enemy
06:00008000   frames
00:00005B20 X int_sprites
00:00005B4A X move_sprites
00:00005B63 X save_background
00:00005B86 X plot_sprite
00:00005B9D X restore_background
00:00005BA4   plot_sprtite_frame
00:00005BBF   _hw_sprite_init
00:00005C1E   hwsprt_test
00:00005C38   enemies_LMMM
01:00008000   _frame
02:00008000   _tiles0
03:00008000   _tiles1
04:00008000   _level
05:00008000 X sprtdata
05:00008000   sprtdata.SPRITES
05:00008240   sprtdata.ATRIBUTOS
05:00008360 X FINISH
05:0000C000   slotvar
05:0000C001   slotram
05:0000C002   SEL_NTSC
05:0000C003   _mcdx
05:0000C004 X _mcdy
05:0000C005 X _mcx
05:0000C007 X _mcy
05:0000C009   _mcframe
05:0000C00A   _mcstate
05:0000C00B   _ticxframe
05:0000C00C   _buffer
05:0000C01C   _fps
05:0000C01E   _nframes
05:0000C020   _vbit16
05:0000C022   _levelmappos
05:0000C024   _shadowbuff
05:0000C026   _currentpage
05:0000C027   _shadow0
05:0000C647   _shadow1
05:0000CC67   enemylist


 Output: main.out
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: *  Used: 00000000

    No output

 Output: maneldem.rom
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: 00004000  Used: 00001C9D

   Address   Length Align   Label
   00004000    6944         search_slot
   00005B20     381         int_sprites
   00005C9D    9059       <empty>

 Page: 01
  Org: 00008000  Size: 00004000  Used: 00000951

   Address   Length Align   Label
   00008000    2385         _frame
   00008951   13999       <empty>

 Page: 02
  Org: 00008000  Size: 00004000  Used: 00003B4D

   Address   Length Align   Label
   00008000   15181         _tiles0
   0000BB4D    1203       <empty>

 Page: 03
  Org: 00008000  Size: 00004000  Used: 00003EEA

   Address   Length Align   Label
   00008000   16106         _tiles1
   0000BEEA     278       <empty>

 Page: 04
  Org: 00008000  Size: 00004000  Used: 00000AF1

   Address   Length Align   Label
   00008000    2801         _level
   00008AF1   13583       <empty>

 Page: 05
  Org: 00008000  Size: 00004000  Used: 00000360

   Address   Length Align   Label
   00008000     864         sprtdata
   00008360   15520       <empty>

 Page: 06
  Org: 00008000  Size: 00004000  Used: 00003F8C

   Address   Length Align   Label
   00008000   16268         frames
   0000BF8C     116       <empty>

 Page: 07
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 08
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 09
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0A
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0B
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0C
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0D
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0E
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0F
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>
